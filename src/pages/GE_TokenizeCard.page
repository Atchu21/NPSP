<apex:page controller="GE_PaymentServices" showHeader="false" applyHtmlTag="true" applyBodyTag="false">

    <head>
        <apex:slds />
    </head>

    <article class='slds-scope'>
        <form onsubmit="handleForm(event)">
            <div id="payments"></div>
        </form>
    </article>

    <script src="{!elevateSDKURL}"></script>
    <script>
        const sfdo = new sfdoPaymentsJsSdk({ debug: true });
        const lightningOrigin = buildLightningOrigin();
        const DEFAULT_NAME_ON_CARD = '[Not Provided]';
        const postMessageType = 'post__npsp';

        /*******************************************************************************
        * @description Method listens for messages from a credit card widget LWC
        * Event.data contains at least an "action" and optionally a "nameOnCard" value.
        */
        window.onmessage = function (event) {
            if (event && event.origin !== lightningOrigin) {
                // Reject any messages from an unexpected origin
                return;
            }
            if (event.data) {
                handleMessage(event);
            }
        }

        function handleMessage(event) {
            const action = event.data.action;
            switch (action) {
                case 'mount':
                    handleMounting(determinePaymentMethod(event.data.paymentMethod));
                    break;

                case 'setPaymentMethod':
                    handleSetPaymentMethod(event.data.paymentMethod);
                    break;

                case 'createToken':
                    handleTokenCreation(event.data.nameOnCard || DEFAULT_NAME_ON_CARD);
                    break;

                case 'createAchToken':
                    handleAchTokenCreation();
                    break;
            }
        }

        function determinePaymentMethod(paymentMethodValue) {
            return paymentMethodValue === 'ACH'
                ? sfdo.PaymentMethod.ACH
                : sfdo.PaymentMethod.CREDIT_CARD;
        }

        function handleSetPaymentMethod(paymentMethod) {
            sfdo.setPaymentMethod(determinePaymentMethod(event.data.paymentMethod))
                .then(() => {
                    const successMessage = JSON.stringify({ type: postMessageType, success: true });
                    postMessage(successMessage);
                })
                .catch((err) => {
                    const errorString = JSON.stringify({ type: postMessageType, ...err});
                    postMessage(errorString);
                });
        }

        /*******************************************************************************
        * @description Creates a token and posts the response to a credit card widget LWC
        */
        function handleTokenCreation(nameOnCard) {
            const auth = {
                jwt: '{!jwtForToken}',
                userName: '{!$User.Username}'
            };
            const tokenConfig = {
                auth: auth,
                nameOnCard: nameOnCard
            };

            sfdo.createToken(tokenConfig)
                .then((resp) => {
                    if (resp.token) {
                        // Send token to lwc
                        const successString = JSON.stringify({ type: postMessageType, token: resp.token });
                        postMessage(successString);

                    } else if (resp.error) {
                        // Response contains the error, send it to lwc
                        postMessage(JSON.stringify({ type: postMessageType, ...resp }));
                    }
                })
                .catch((err) => {
                    // Send error to lwc
                    const errorString = JSON.stringify({ type: postMessageType, ...err });
                    postMessage(errorString);
                });
        }

        function handleAchTokenCreation() { }

        /*******************************************************************************
        * @description Posts messages to a credit card widget LWC
        *
        * @param {string} message: String to pass to the LWC
        */
        function postMessage(message) {
            window.top.postMessage(message, lightningOrigin);
        }

        function buildLightningOrigin() {
            const hostname = window.location.hostname;
            const arr = hostname.split(".");
            let domain = arr[0].replace('--npsp', '');
            domain = domain.replace('--c', '');

            return `https://${domain}.lightning.force.com`;
        }

        const styles = `
            .logo {
                left: 8px !important;
            }
            .fieldset.cc-number {
                padding-left: 0;
                padding-right: 1rem;
            }
            .fieldset.exp {
                padding-left: 0;
                padding-right: 1rem;
            }
            .fieldset.cvc {
                padding: 0;
            }
            .fieldset.account-number {
                padding-left: 0;
                padding-right: 1rem;
            }
            .error-wrapper.fieldset.exp {
                max-width: fit-content;
            }
            .error-wrapper.fieldset.cvc {
                max-width: fit-content;
            }
        `;

        function handleMounting(paymentMethod) {
            const config = {
                id: 'payments',
                clientId: '{!productId}',
                gatewayId: '{!gatewayIds}',
                merchantId: '{!merchantIds}',
                designSystem: 'Lightning',
                paymentMethod: paymentMethod,
                styles: styles
            };

            sfdo.mount(config)
                .then(() => {
                    const successMessage = JSON.stringify({ type: postMessageType, success: true });
                    postMessage(successMessage);
                })
                .catch((err) => {
                    const errorString = JSON.stringify({ type: postMessageType, ...err});
                    postMessage(errorString);
                });
        }

        function isReadyToMount() {
            const message = JSON.stringify({ isReadyToMount: true });
            postMessage(message);
        }

        window.onload = isReadyToMount();
    </script>

</apex:page>