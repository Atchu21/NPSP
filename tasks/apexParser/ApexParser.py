# Generated from ApexParser.g4 by ANTLR 4.9.3
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00ec")
        buf.write("\u06fe\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\2\3\2\7\2\u0123\n\2\f\2\16\2\u0126\13\2\3")
        buf.write("\2\3\2\3\2\3\2\3\3\3\3\3\3\3\4\3\4\3\4\3\5\7\5\u0133\n")
        buf.write("\5\f\5\16\5\u0136\13\5\3\5\3\5\7\5\u013a\n\5\f\5\16\5")
        buf.write("\u013d\13\5\3\5\3\5\7\5\u0141\n\5\f\5\16\5\u0144\13\5")
        buf.write("\3\5\5\5\u0147\n\5\3\6\3\6\3\6\3\6\5\6\u014d\n\6\3\6\3")
        buf.write("\6\5\6\u0151\n\6\3\6\3\6\3\7\3\7\3\7\3\7\5\7\u0159\n\7")
        buf.write("\3\7\3\7\3\b\3\b\3\b\7\b\u0160\n\b\f\b\16\b\u0163\13\b")
        buf.write("\3\t\3\t\3\t\3\t\5\t\u0169\n\t\3\t\3\t\3\n\3\n\3\n\7\n")
        buf.write("\u0170\n\n\f\n\16\n\u0173\13\n\3\13\3\13\7\13\u0177\n")
        buf.write("\13\f\13\16\13\u017a\13\13\3\13\3\13\3\f\3\f\7\f\u0180")
        buf.write("\n\f\f\f\16\f\u0183\13\f\3\f\3\f\3\r\3\r\5\r\u0189\n\r")
        buf.write("\3\r\3\r\7\r\u018d\n\r\f\r\16\r\u0190\13\r\3\r\5\r\u0193")
        buf.write("\n\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u01a8")
        buf.write("\n\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u01b1\n")
        buf.write("\17\3\20\3\20\5\20\u01b5\n\20\3\20\3\20\3\20\3\20\5\20")
        buf.write("\u01bb\n\20\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3")
        buf.write("\23\3\23\3\23\3\23\7\23\u01c9\n\23\f\23\16\23\u01cc\13")
        buf.write("\23\3\23\3\23\3\24\7\24\u01d1\n\24\f\24\16\24\u01d4\13")
        buf.write("\24\3\24\3\24\5\24\u01d8\n\24\3\24\3\24\3\24\3\24\3\25")
        buf.write("\3\25\3\25\7\25\u01e1\n\25\f\25\16\25\u01e4\13\25\3\26")
        buf.write("\3\26\3\26\5\26\u01e9\n\26\3\27\3\27\3\27\3\27\7\27\u01ef")
        buf.write("\n\27\f\27\16\27\u01f2\13\27\3\27\5\27\u01f5\n\27\5\27")
        buf.write("\u01f7\n\27\3\27\3\27\3\30\3\30\3\30\7\30\u01fe\n\30\f")
        buf.write("\30\16\30\u0201\13\30\3\30\3\30\3\31\3\31\7\31\u0207\n")
        buf.write("\31\f\31\16\31\u020a\13\31\3\32\3\32\5\32\u020e\n\32\3")
        buf.write("\32\3\32\5\32\u0212\n\32\3\32\3\32\5\32\u0216\n\32\3\32")
        buf.write("\3\32\5\32\u021a\n\32\5\32\u021c\n\32\3\33\3\33\3\33\3")
        buf.write("\33\3\34\3\34\5\34\u0224\n\34\3\34\3\34\3\35\3\35\3\35")
        buf.write("\7\35\u022b\n\35\f\35\16\35\u022e\13\35\3\36\7\36\u0231")
        buf.write("\n\36\f\36\16\36\u0234\13\36\3\36\3\36\3\36\3\37\3\37")
        buf.write("\3\37\7\37\u023c\n\37\f\37\16\37\u023f\13\37\3 \3 \3!")
        buf.write("\3!\3!\3!\3!\5!\u0248\n!\3!\5!\u024b\n!\3\"\3\"\5\"\u024f")
        buf.write("\n\"\3\"\7\"\u0252\n\"\f\"\16\"\u0255\13\"\3#\3#\3#\3")
        buf.write("#\3$\3$\3$\5$\u025e\n$\3%\3%\3%\3%\7%\u0264\n%\f%\16%")
        buf.write("\u0267\13%\5%\u0269\n%\3%\5%\u026c\n%\3%\3%\3&\3&\7&\u0272")
        buf.write("\n&\f&\16&\u0275\13&\3&\3&\3\'\3\'\3\'\3(\7(\u027d\n(")
        buf.write("\f(\16(\u0280\13(\3(\3(\3(\3)\3)\3)\3)\3)\3)\3)\3)\3)")
        buf.write("\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\5)\u0299\n)\3*\3*\3")
        buf.write("*\3*\3*\5*\u02a0\n*\3+\3+\3+\3+\3+\6+\u02a7\n+\r+\16+")
        buf.write("\u02a8\3+\3+\3,\3,\3,\3,\3-\3-\3-\3-\7-\u02b5\n-\f-\16")
        buf.write("-\u02b8\13-\3-\3-\3-\5-\u02bd\n-\3.\5.\u02c0\n.\3.\3.")
        buf.write("\3.\3.\3.\5.\u02c7\n.\3/\3/\3/\3/\3/\3/\3\60\3\60\3\60")
        buf.write("\3\60\3\61\3\61\3\61\3\61\3\61\3\61\3\62\3\62\3\62\6\62")
        buf.write("\u02dc\n\62\r\62\16\62\u02dd\3\62\5\62\u02e1\n\62\3\62")
        buf.write("\5\62\u02e4\n\62\3\63\3\63\5\63\u02e8\n\63\3\63\3\63\3")
        buf.write("\64\3\64\3\64\3\64\3\65\3\65\3\65\3\66\3\66\3\66\3\67")
        buf.write("\3\67\3\67\3\67\38\38\38\38\39\39\39\39\3:\3:\3:\3:\3")
        buf.write(";\3;\3;\5;\u0309\n;\3;\3;\3<\3<\3<\3<\3<\3=\3=\3=\5=\u0315")
        buf.write("\n=\3=\3=\3=\3>\3>\3>\3?\7?\u031e\n?\f?\16?\u0321\13?")
        buf.write("\3?\3?\5?\u0325\n?\3@\3@\3@\5@\u032a\n@\3A\3A\3A\5A\u032f")
        buf.write("\nA\3B\3B\3B\7B\u0334\nB\fB\16B\u0337\13B\3B\3B\3B\3B")
        buf.write("\3B\3C\3C\3C\3D\3D\5D\u0343\nD\3D\3D\5D\u0347\nD\3D\3")
        buf.write("D\5D\u034b\nD\5D\u034d\nD\3E\3E\5E\u0351\nE\3F\3F\3F\3")
        buf.write("F\3F\3G\3G\3H\3H\3H\3H\3I\3I\3I\7I\u0361\nI\fI\16I\u0364")
        buf.write("\13I\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3")
        buf.write("J\3J\5J\u0378\nJ\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3")
        buf.write("J\3J\5J\u0388\nJ\3J\3J\3J\3J\5J\u038e\nJ\3J\3J\3J\3J\3")
        buf.write("J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3")
        buf.write("J\3J\3J\3J\3J\3J\3J\3J\3J\3J\5J\u03b0\nJ\3J\3J\3J\3J\3")
        buf.write("J\3J\3J\3J\3J\3J\7J\u03bc\nJ\fJ\16J\u03bf\13J\3K\3K\3")
        buf.write("K\3K\3K\3K\3K\3K\3K\3K\5K\u03cb\nK\3L\3L\3L\5L\u03d0\n")
        buf.write("L\3L\3L\3L\3L\3L\5L\u03d7\nL\3L\3L\3L\3L\5L\u03dd\nL\3")
        buf.write("L\5L\u03e0\nL\3M\3M\3M\5M\u03e5\nM\3M\3M\3N\3N\3N\3N\3")
        buf.write("N\3N\5N\u03ef\nN\3O\3O\3O\7O\u03f4\nO\fO\16O\u03f7\13")
        buf.write("O\3P\3P\3P\3P\3P\5P\u03fe\nP\3Q\3Q\3Q\3R\3R\3S\3S\3S\3")
        buf.write("S\3S\3S\3S\5S\u040c\nS\5S\u040e\nS\3T\3T\3T\3T\7T\u0414")
        buf.write("\nT\fT\16T\u0417\13T\3T\3T\3U\3U\3U\3U\3V\3V\3V\3V\7V")
        buf.write("\u0423\nV\fV\16V\u0426\13V\3V\3V\3W\3W\5W\u042c\nW\3W")
        buf.write("\3W\3X\3X\3X\3X\3Y\3Y\3Y\3Y\3Y\5Y\u0439\nY\3Y\5Y\u043c")
        buf.write("\nY\3Y\5Y\u043f\nY\3Y\5Y\u0442\nY\3Y\5Y\u0445\nY\3Y\5")
        buf.write("Y\u0448\nY\3Y\5Y\u044b\nY\3Y\5Y\u044e\nY\3Y\3Y\3Y\5Y\u0453")
        buf.write("\nY\3Z\3Z\3Z\3Z\3Z\5Z\u045a\nZ\3Z\5Z\u045d\nZ\3Z\5Z\u0460")
        buf.write("\nZ\3Z\3Z\3Z\5Z\u0465\nZ\3[\3[\3[\7[\u046a\n[\f[\16[\u046d")
        buf.write("\13[\3\\\3\\\5\\\u0471\n\\\3\\\3\\\5\\\u0475\n\\\3\\\3")
        buf.write("\\\3\\\3\\\5\\\u047b\n\\\3\\\5\\\u047e\n\\\3]\3]\3]\7")
        buf.write("]\u0483\n]\f]\16]\u0486\13]\3^\3^\5^\u048a\n^\3^\3^\3")
        buf.write("^\5^\u048f\n^\7^\u0491\n^\f^\16^\u0494\13^\3_\3_\3_\7")
        buf.write("_\u0499\n_\f_\16_\u049c\13_\3`\3`\5`\u04a0\n`\3`\3`\5")
        buf.write("`\u04a4\n`\5`\u04a6\n`\3a\3a\3b\3b\3b\3b\3b\3b\3b\3b\3")
        buf.write("b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3")
        buf.write("b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3")
        buf.write("b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3")
        buf.write("b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3")
        buf.write("b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3")
        buf.write("b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\5b\u051b\n")
        buf.write("b\3c\3c\3c\3c\3c\3c\5c\u0523\nc\3d\3d\3d\6d\u0528\nd\r")
        buf.write("d\16d\u0529\3d\5d\u052d\nd\3d\3d\3e\3e\3e\3e\3e\3f\3f")
        buf.write("\3f\3g\3g\3g\7g\u053c\ng\fg\16g\u053f\13g\3h\3h\3h\3h")
        buf.write("\3i\3i\3i\3j\3j\3j\7j\u054b\nj\fj\16j\u054e\13j\3j\3j")
        buf.write("\3j\7j\u0553\nj\fj\16j\u0556\13j\3j\3j\5j\u055a\nj\3k")
        buf.write("\3k\3k\3k\3k\5k\u0561\nk\3l\3l\3l\3l\3l\3l\3l\3l\5l\u056b")
        buf.write("\nl\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\5m\u057c")
        buf.write("\nm\3n\3n\3n\3n\3n\3n\3n\3n\3n\3n\3n\3n\3n\3n\3n\3n\5")
        buf.write("n\u058e\nn\3o\3o\3o\3o\7o\u0594\no\fo\16o\u0597\13o\3")
        buf.write("o\3o\3p\3p\3p\3q\3q\3q\3q\3q\3q\3q\3q\5q\u05a6\nq\3r\3")
        buf.write("r\3r\7r\u05ab\nr\fr\16r\u05ae\13r\3s\3s\3s\3s\3t\3t\3")
        buf.write("t\3t\3t\7t\u05b9\nt\ft\16t\u05bc\13t\3t\3t\5t\u05c0\n")
        buf.write("t\3u\3u\3v\3v\3v\3v\3v\5v\u05c9\nv\3v\3v\3v\3v\3v\3v\3")
        buf.write("v\7v\u05d2\nv\fv\16v\u05d5\13v\3v\3v\3v\3v\3v\3v\3v\3")
        buf.write("v\3v\7v\u05e0\nv\fv\16v\u05e3\13v\3v\3v\5v\u05e7\nv\3")
        buf.write("w\3w\3w\3w\3x\3x\3x\7x\u05f0\nx\fx\16x\u05f3\13x\3y\3")
        buf.write("y\5y\u05f7\ny\3y\3y\5y\u05fb\ny\3y\3y\5y\u05ff\ny\3y\3")
        buf.write("y\5y\u0603\ny\5y\u0605\ny\3z\3z\3z\3z\5z\u060b\nz\3{\3")
        buf.write("{\3{\3{\5{\u0611\n{\3|\3|\3|\3}\3}\7}\u0618\n}\f}\16}")
        buf.write("\u061b\13}\3~\3~\3~\3\177\3\177\3\177\3\177\3\177\3\177")
        buf.write("\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177")
        buf.write("\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177")
        buf.write("\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177")
        buf.write("\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177")
        buf.write("\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177")
        buf.write("\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177")
        buf.write("\3\177\3\177\3\177\3\177\3\177\5\177\u0661\n\177\3\u0080")
        buf.write("\5\u0080\u0664\n\u0080\3\u0080\3\u0080\3\u0081\3\u0081")
        buf.write("\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write("\3\u0082\3\u0082\3\u0082\5\u0082\u0674\n\u0082\3\u0083")
        buf.write("\3\u0083\5\u0083\u0678\n\u0083\3\u0083\3\u0083\5\u0083")
        buf.write("\u067c\n\u0083\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083")
        buf.write("\u0682\n\u0083\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083")
        buf.write("\u0688\n\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\3\u0083\5\u0083\u0691\n\u0083\5\u0083\u0693\n")
        buf.write("\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\5\u0083\u069c\n\u0083\3\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\5\u0083\u06a2\n\u0083\3\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\5\u0083\u06a8\n\u0083\3\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\5\u0083\u06ae\n\u0083\3\u0083\5\u0083\u06b1\n")
        buf.write("\u0083\3\u0083\3\u0083\5\u0083\u06b5\n\u0083\3\u0084\3")
        buf.write("\u0084\3\u0084\3\u0085\3\u0085\3\u0085\7\u0085\u06bd\n")
        buf.write("\u0085\f\u0085\16\u0085\u06c0\13\u0085\3\u0086\3\u0086")
        buf.write("\3\u0086\3\u0086\3\u0086\5\u0086\u06c7\n\u0086\3\u0086")
        buf.write("\3\u0086\3\u0086\3\u0086\5\u0086\u06cd\n\u0086\3\u0086")
        buf.write("\3\u0086\3\u0086\5\u0086\u06d2\n\u0086\3\u0086\5\u0086")
        buf.write("\u06d5\n\u0086\3\u0086\5\u0086\u06d8\n\u0086\3\u0086\3")
        buf.write("\u0086\5\u0086\u06dc\n\u0086\3\u0087\3\u0087\3\u0087\7")
        buf.write("\u0087\u06e1\n\u0087\f\u0087\16\u0087\u06e4\13\u0087\3")
        buf.write("\u0088\3\u0088\3\u0088\5\u0088\u06e9\n\u0088\3\u0089\3")
        buf.write("\u0089\3\u008a\3\u008a\3\u008a\5\u008a\u06f0\n\u008a\3")
        buf.write("\u008b\3\u008b\3\u008b\7\u008b\u06f5\n\u008b\f\u008b\16")
        buf.write("\u008b\u06f8\13\u008b\3\u008c\3\u008c\3\u008d\3\u008d")
        buf.write("\3\u008d\2\3\u0092\u008e\2\4\6\b\n\f\16\20\22\24\26\30")
        buf.write("\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`b")
        buf.write("dfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e")
        buf.write("\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0")
        buf.write("\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2")
        buf.write("\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4")
        buf.write("\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6")
        buf.write("\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8")
        buf.write("\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a")
        buf.write("\u010c\u010e\u0110\u0112\u0114\u0116\u0118\2\27\3\2\4")
        buf.write("\5\5\2\n\n\27\27/\60\4\2\34\34\u00b3\u00b7\3\2\u00d1\u00d4")
        buf.write("\3\2\u00c5\u00c6\4\2\u00d5\u00d6\u00da\u00da\3\2\u00d3")
        buf.write("\u00d4\3\2\u00c3\u00c4\3\2\u00ca\u00ce\4\2\u00c2\u00c2")
        buf.write("\u00dc\u00e6\4\2\u00c1\u00c1\u00c7\u00c7\3\2\u00d1\u00d2")
        buf.write("\4\2ZZmn\3\2cf\3\2TU\3\2WX\5\2\60\60\\\\hh\4\2ZZ\u00a5")
        buf.write("\u00a8\3\2kl\16\2\4\5\22\22\26\26\30\30$%((,-\65\65\67")
        buf.write("8;\u00a1\u00a4\u00b1\u00e8\u00e8\7\2\3\"$\62\64\u00a1")
        buf.write("\u00a4\u00b1\u00e8\u00e8\2\u07be\2\u011a\3\2\2\2\4\u012b")
        buf.write("\3\2\2\2\6\u012e\3\2\2\2\b\u0146\3\2\2\2\n\u0148\3\2\2")
        buf.write("\2\f\u0154\3\2\2\2\16\u015c\3\2\2\2\20\u0164\3\2\2\2\22")
        buf.write("\u016c\3\2\2\2\24\u0174\3\2\2\2\26\u017d\3\2\2\2\30\u0192")
        buf.write("\3\2\2\2\32\u01a7\3\2\2\2\34\u01b0\3\2\2\2\36\u01b4\3")
        buf.write("\2\2\2 \u01bc\3\2\2\2\"\u01c0\3\2\2\2$\u01c4\3\2\2\2&")
        buf.write("\u01d2\3\2\2\2(\u01dd\3\2\2\2*\u01e5\3\2\2\2,\u01ea\3")
        buf.write("\2\2\2.\u01fa\3\2\2\2\60\u0208\3\2\2\2\62\u021b\3\2\2")
        buf.write("\2\64\u021d\3\2\2\2\66\u0221\3\2\2\28\u0227\3\2\2\2:\u0232")
        buf.write("\3\2\2\2<\u0238\3\2\2\2>\u0240\3\2\2\2@\u0242\3\2\2\2")
        buf.write("B\u024c\3\2\2\2D\u0256\3\2\2\2F\u025d\3\2\2\2H\u025f\3")
        buf.write("\2\2\2J\u026f\3\2\2\2L\u0278\3\2\2\2N\u027e\3\2\2\2P\u0298")
        buf.write("\3\2\2\2R\u029a\3\2\2\2T\u02a1\3\2\2\2V\u02ac\3\2\2\2")
        buf.write("X\u02bc\3\2\2\2Z\u02c6\3\2\2\2\\\u02c8\3\2\2\2^\u02ce")
        buf.write("\3\2\2\2`\u02d2\3\2\2\2b\u02d8\3\2\2\2d\u02e5\3\2\2\2")
        buf.write("f\u02eb\3\2\2\2h\u02ef\3\2\2\2j\u02f2\3\2\2\2l\u02f5\3")
        buf.write("\2\2\2n\u02f9\3\2\2\2p\u02fd\3\2\2\2r\u0301\3\2\2\2t\u0305")
        buf.write("\3\2\2\2v\u030c\3\2\2\2x\u0311\3\2\2\2z\u0319\3\2\2\2")
        buf.write("|\u031f\3\2\2\2~\u0326\3\2\2\2\u0080\u032b\3\2\2\2\u0082")
        buf.write("\u0330\3\2\2\2\u0084\u033d\3\2\2\2\u0086\u034c\3\2\2\2")
        buf.write("\u0088\u0350\3\2\2\2\u008a\u0352\3\2\2\2\u008c\u0357\3")
        buf.write("\2\2\2\u008e\u0359\3\2\2\2\u0090\u035d\3\2\2\2\u0092\u0377")
        buf.write("\3\2\2\2\u0094\u03ca\3\2\2\2\u0096\u03df\3\2\2\2\u0098")
        buf.write("\u03e1\3\2\2\2\u009a\u03e8\3\2\2\2\u009c\u03f0\3\2\2\2")
        buf.write("\u009e\u03f8\3\2\2\2\u00a0\u03ff\3\2\2\2\u00a2\u0402\3")
        buf.write("\2\2\2\u00a4\u040d\3\2\2\2\u00a6\u040f\3\2\2\2\u00a8\u041a")
        buf.write("\3\2\2\2\u00aa\u041e\3\2\2\2\u00ac\u0429\3\2\2\2\u00ae")
        buf.write("\u042f\3\2\2\2\u00b0\u0433\3\2\2\2\u00b2\u0454\3\2\2\2")
        buf.write("\u00b4\u0466\3\2\2\2\u00b6\u047d\3\2\2\2\u00b8\u047f\3")
        buf.write("\2\2\2\u00ba\u0487\3\2\2\2\u00bc\u0495\3\2\2\2\u00be\u04a5")
        buf.write("\3\2\2\2\u00c0\u04a7\3\2\2\2\u00c2\u051a\3\2\2\2\u00c4")
        buf.write("\u0522\3\2\2\2\u00c6\u0524\3\2\2\2\u00c8\u0530\3\2\2\2")
        buf.write("\u00ca\u0535\3\2\2\2\u00cc\u0538\3\2\2\2\u00ce\u0540\3")
        buf.write("\2\2\2\u00d0\u0544\3\2\2\2\u00d2\u0559\3\2\2\2\u00d4\u0560")
        buf.write("\3\2\2\2\u00d6\u056a\3\2\2\2\u00d8\u057b\3\2\2\2\u00da")
        buf.write("\u058d\3\2\2\2\u00dc\u058f\3\2\2\2\u00de\u059a\3\2\2\2")
        buf.write("\u00e0\u05a5\3\2\2\2\u00e2\u05a7\3\2\2\2\u00e4\u05af\3")
        buf.write("\2\2\2\u00e6\u05bf\3\2\2\2\u00e8\u05c1\3\2\2\2\u00ea\u05e6")
        buf.write("\3\2\2\2\u00ec\u05e8\3\2\2\2\u00ee\u05ec\3\2\2\2\u00f0")
        buf.write("\u0604\3\2\2\2\u00f2\u060a\3\2\2\2\u00f4\u0610\3\2\2\2")
        buf.write("\u00f6\u0612\3\2\2\2\u00f8\u0619\3\2\2\2\u00fa\u061c\3")
        buf.write("\2\2\2\u00fc\u0660\3\2\2\2\u00fe\u0663\3\2\2\2\u0100\u0667")
        buf.write("\3\2\2\2\u0102\u0673\3\2\2\2\u0104\u0677\3\2\2\2\u0106")
        buf.write("\u06b6\3\2\2\2\u0108\u06b9\3\2\2\2\u010a\u06c1\3\2\2\2")
        buf.write("\u010c\u06dd\3\2\2\2\u010e\u06e5\3\2\2\2\u0110\u06ea\3")
        buf.write("\2\2\2\u0112\u06ec\3\2\2\2\u0114\u06f1\3\2\2\2\u0116\u06f9")
        buf.write("\3\2\2\2\u0118\u06fb\3\2\2\2\u011a\u011b\7-\2\2\u011b")
        buf.write("\u011c\5\u0116\u008c\2\u011c\u011d\7\35\2\2\u011d\u011e")
        buf.write("\5\u0116\u008c\2\u011e\u011f\7\u00b9\2\2\u011f\u0124\5")
        buf.write("\4\3\2\u0120\u0121\7\u00c0\2\2\u0121\u0123\5\4\3\2\u0122")
        buf.write("\u0120\3\2\2\2\u0123\u0126\3\2\2\2\u0124\u0122\3\2\2\2")
        buf.write("\u0124\u0125\3\2\2\2\u0125\u0127\3\2\2\2\u0126\u0124\3")
        buf.write("\2\2\2\u0127\u0128\7\u00ba\2\2\u0128\u0129\5J&\2\u0129")
        buf.write("\u012a\7\2\2\3\u012a\3\3\2\2\2\u012b\u012c\t\2\2\2\u012c")
        buf.write("\u012d\t\3\2\2\u012d\5\3\2\2\2\u012e\u012f\5\b\5\2\u012f")
        buf.write("\u0130\7\2\2\3\u0130\7\3\2\2\2\u0131\u0133\5\32\16\2\u0132")
        buf.write("\u0131\3\2\2\2\u0133\u0136\3\2\2\2\u0134\u0132\3\2\2\2")
        buf.write("\u0134\u0135\3\2\2\2\u0135\u0137\3\2\2\2\u0136\u0134\3")
        buf.write("\2\2\2\u0137\u0147\5\n\6\2\u0138\u013a\5\32\16\2\u0139")
        buf.write("\u0138\3\2\2\2\u013a\u013d\3\2\2\2\u013b\u0139\3\2\2\2")
        buf.write("\u013b\u013c\3\2\2\2\u013c\u013e\3\2\2\2\u013d\u013b\3")
        buf.write("\2\2\2\u013e\u0147\5\f\7\2\u013f\u0141\5\32\16\2\u0140")
        buf.write("\u013f\3\2\2\2\u0141\u0144\3\2\2\2\u0142\u0140\3\2\2\2")
        buf.write("\u0142\u0143\3\2\2\2\u0143\u0145\3\2\2\2\u0144\u0142\3")
        buf.write("\2\2\2\u0145\u0147\5\20\t\2\u0146\u0134\3\2\2\2\u0146")
        buf.write("\u013b\3\2\2\2\u0146\u0142\3\2\2\2\u0147\t\3\2\2\2\u0148")
        buf.write("\u0149\7\b\2\2\u0149\u014c\5\u0116\u008c\2\u014a\u014b")
        buf.write("\7\16\2\2\u014b\u014d\5.\30\2\u014c\u014a\3\2\2\2\u014c")
        buf.write("\u014d\3\2\2\2\u014d\u0150\3\2\2\2\u014e\u014f\7\25\2")
        buf.write("\2\u014f\u0151\5\22\n\2\u0150\u014e\3\2\2\2\u0150\u0151")
        buf.write("\3\2\2\2\u0151\u0152\3\2\2\2\u0152\u0153\5\24\13\2\u0153")
        buf.write("\13\3\2\2\2\u0154\u0155\7\r\2\2\u0155\u0156\5\u0116\u008c")
        buf.write("\2\u0156\u0158\7\u00bb\2\2\u0157\u0159\5\16\b\2\u0158")
        buf.write("\u0157\3\2\2\2\u0158\u0159\3\2\2\2\u0159\u015a\3\2\2\2")
        buf.write("\u015a\u015b\7\u00bc\2\2\u015b\r\3\2\2\2\u015c\u0161\5")
        buf.write("\u0116\u008c\2\u015d\u015e\7\u00c0\2\2\u015e\u0160\5\u0116")
        buf.write("\u008c\2\u015f\u015d\3\2\2\2\u0160\u0163\3\2\2\2\u0161")
        buf.write("\u015f\3\2\2\2\u0161\u0162\3\2\2\2\u0162\17\3\2\2\2\u0163")
        buf.write("\u0161\3\2\2\2\u0164\u0165\7\31\2\2\u0165\u0168\5\u0116")
        buf.write("\u008c\2\u0166\u0167\7\16\2\2\u0167\u0169\5\22\n\2\u0168")
        buf.write("\u0166\3\2\2\2\u0168\u0169\3\2\2\2\u0169\u016a\3\2\2\2")
        buf.write("\u016a\u016b\5\26\f\2\u016b\21\3\2\2\2\u016c\u0171\5.")
        buf.write("\30\2\u016d\u016e\7\u00c0\2\2\u016e\u0170\5.\30\2\u016f")
        buf.write("\u016d\3\2\2\2\u0170\u0173\3\2\2\2\u0171\u016f\3\2\2\2")
        buf.write("\u0171\u0172\3\2\2\2\u0172\23\3\2\2\2\u0173\u0171\3\2")
        buf.write("\2\2\u0174\u0178\7\u00bb\2\2\u0175\u0177\5\30\r\2\u0176")
        buf.write("\u0175\3\2\2\2\u0177\u017a\3\2\2\2\u0178\u0176\3\2\2\2")
        buf.write("\u0178\u0179\3\2\2\2\u0179\u017b\3\2\2\2\u017a\u0178\3")
        buf.write("\2\2\2\u017b\u017c\7\u00bc\2\2\u017c\25\3\2\2\2\u017d")
        buf.write("\u0181\7\u00bb\2\2\u017e\u0180\5&\24\2\u017f\u017e\3\2")
        buf.write("\2\2\u0180\u0183\3\2\2\2\u0181\u017f\3\2\2\2\u0181\u0182")
        buf.write("\3\2\2\2\u0182\u0184\3\2\2\2\u0183\u0181\3\2\2\2\u0184")
        buf.write("\u0185\7\u00bc\2\2\u0185\27\3\2\2\2\u0186\u0193\7\u00bf")
        buf.write("\2\2\u0187\u0189\7&\2\2\u0188\u0187\3\2\2\2\u0188\u0189")
        buf.write("\3\2\2\2\u0189\u018a\3\2\2\2\u018a\u0193\5J&\2\u018b\u018d")
        buf.write("\5\32\16\2\u018c\u018b\3\2\2\2\u018d\u0190\3\2\2\2\u018e")
        buf.write("\u018c\3\2\2\2\u018e\u018f\3\2\2\2\u018f\u0191\3\2\2\2")
        buf.write("\u0190\u018e\3\2\2\2\u0191\u0193\5\34\17\2\u0192\u0186")
        buf.write("\3\2\2\2\u0192\u0188\3\2\2\2\u0192\u018e\3\2\2\2\u0193")
        buf.write("\31\3\2\2\2\u0194\u01a8\5@!\2\u0195\u01a8\7\23\2\2\u0196")
        buf.write("\u01a8\7!\2\2\u0197\u01a8\7 \2\2\u0198\u01a8\7\37\2\2")
        buf.write("\u0199\u01a8\7,\2\2\u019a\u01a8\7&\2\2\u019b\u01a8\7\3")
        buf.write("\2\2\u019c\u01a8\7\17\2\2\u019d\u01a8\7\64\2\2\u019e\u01a8")
        buf.write("\7\36\2\2\u019f\u01a8\7\62\2\2\u01a0\u01a8\7)\2\2\u01a1")
        buf.write("\u01a2\7\67\2\2\u01a2\u01a8\7%\2\2\u01a3\u01a4\78\2\2")
        buf.write("\u01a4\u01a8\7%\2\2\u01a5\u01a6\7\26\2\2\u01a6\u01a8\7")
        buf.write("%\2\2\u01a7\u0194\3\2\2\2\u01a7\u0195\3\2\2\2\u01a7\u0196")
        buf.write("\3\2\2\2\u01a7\u0197\3\2\2\2\u01a7\u0198\3\2\2\2\u01a7")
        buf.write("\u0199\3\2\2\2\u01a7\u019a\3\2\2\2\u01a7\u019b\3\2\2\2")
        buf.write("\u01a7\u019c\3\2\2\2\u01a7\u019d\3\2\2\2\u01a7\u019e\3")
        buf.write("\2\2\2\u01a7\u019f\3\2\2\2\u01a7\u01a0\3\2\2\2\u01a7\u01a1")
        buf.write("\3\2\2\2\u01a7\u01a3\3\2\2\2\u01a7\u01a5\3\2\2\2\u01a8")
        buf.write("\33\3\2\2\2\u01a9\u01b1\5\36\20\2\u01aa\u01b1\5\"\22\2")
        buf.write("\u01ab\u01b1\5 \21\2\u01ac\u01b1\5\20\t\2\u01ad\u01b1")
        buf.write("\5\n\6\2\u01ae\u01b1\5\f\7\2\u01af\u01b1\5$\23\2\u01b0")
        buf.write("\u01a9\3\2\2\2\u01b0\u01aa\3\2\2\2\u01b0\u01ab\3\2\2\2")
        buf.write("\u01b0\u01ac\3\2\2\2\u01b0\u01ad\3\2\2\2\u01b0\u01ae\3")
        buf.write("\2\2\2\u01b0\u01af\3\2\2\2\u01b1\35\3\2\2\2\u01b2\u01b5")
        buf.write("\5.\30\2\u01b3\u01b5\7\63\2\2\u01b4\u01b2\3\2\2\2\u01b4")
        buf.write("\u01b3\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01b7\5\u0116")
        buf.write("\u008c\2\u01b7\u01ba\5\66\34\2\u01b8\u01bb\5J&\2\u01b9")
        buf.write("\u01bb\7\u00bf\2\2\u01ba\u01b8\3\2\2\2\u01ba\u01b9\3\2")
        buf.write("\2\2\u01bb\37\3\2\2\2\u01bc\u01bd\5<\37\2\u01bd\u01be")
        buf.write("\5\66\34\2\u01be\u01bf\5J&\2\u01bf!\3\2\2\2\u01c0\u01c1")
        buf.write("\5.\30\2\u01c1\u01c2\5(\25\2\u01c2\u01c3\7\u00bf\2\2\u01c3")
        buf.write("#\3\2\2\2\u01c4\u01c5\5.\30\2\u01c5\u01c6\5\u0116\u008c")
        buf.write("\2\u01c6\u01ca\7\u00bb\2\2\u01c7\u01c9\5|?\2\u01c8\u01c7")
        buf.write("\3\2\2\2\u01c9\u01cc\3\2\2\2\u01ca\u01c8\3\2\2\2\u01ca")
        buf.write("\u01cb\3\2\2\2\u01cb\u01cd\3\2\2\2\u01cc\u01ca\3\2\2\2")
        buf.write("\u01cd\u01ce\7\u00bc\2\2\u01ce%\3\2\2\2\u01cf\u01d1\5")
        buf.write("\32\16\2\u01d0\u01cf\3\2\2\2\u01d1\u01d4\3\2\2\2\u01d2")
        buf.write("\u01d0\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3\u01d7\3\2\2\2")
        buf.write("\u01d4\u01d2\3\2\2\2\u01d5\u01d8\5.\30\2\u01d6\u01d8\7")
        buf.write("\63\2\2\u01d7\u01d5\3\2\2\2\u01d7\u01d6\3\2\2\2\u01d8")
        buf.write("\u01d9\3\2\2\2\u01d9\u01da\5\u0116\u008c\2\u01da\u01db")
        buf.write("\5\66\34\2\u01db\u01dc\7\u00bf\2\2\u01dc\'\3\2\2\2\u01dd")
        buf.write("\u01e2\5*\26\2\u01de\u01df\7\u00c0\2\2\u01df\u01e1\5*")
        buf.write("\26\2\u01e0\u01de\3\2\2\2\u01e1\u01e4\3\2\2\2\u01e2\u01e0")
        buf.write("\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3)\3\2\2\2\u01e4\u01e2")
        buf.write("\3\2\2\2\u01e5\u01e8\5\u0116\u008c\2\u01e6\u01e7\7\u00c2")
        buf.write("\2\2\u01e7\u01e9\5\u0092J\2\u01e8\u01e6\3\2\2\2\u01e8")
        buf.write("\u01e9\3\2\2\2\u01e9+\3\2\2\2\u01ea\u01f6\7\u00bb\2\2")
        buf.write("\u01eb\u01f0\5\u0092J\2\u01ec\u01ed\7\u00c0\2\2\u01ed")
        buf.write("\u01ef\5\u0092J\2\u01ee\u01ec\3\2\2\2\u01ef\u01f2\3\2")
        buf.write("\2\2\u01f0\u01ee\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f4")
        buf.write("\3\2\2\2\u01f2\u01f0\3\2\2\2\u01f3\u01f5\7\u00c0\2\2\u01f4")
        buf.write("\u01f3\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5\u01f7\3\2\2\2")
        buf.write("\u01f6\u01eb\3\2\2\2\u01f6\u01f7\3\2\2\2\u01f7\u01f8\3")
        buf.write("\2\2\2\u01f8\u01f9\7\u00bc\2\2\u01f9-\3\2\2\2\u01fa\u01ff")
        buf.write("\5\62\32\2\u01fb\u01fc\7\u00c1\2\2\u01fc\u01fe\5\62\32")
        buf.write("\2\u01fd\u01fb\3\2\2\2\u01fe\u0201\3\2\2\2\u01ff\u01fd")
        buf.write("\3\2\2\2\u01ff\u0200\3\2\2\2\u0200\u0202\3\2\2\2\u0201")
        buf.write("\u01ff\3\2\2\2\u0202\u0203\5\60\31\2\u0203/\3\2\2\2\u0204")
        buf.write("\u0205\7\u00bd\2\2\u0205\u0207\7\u00be\2\2\u0206\u0204")
        buf.write("\3\2\2\2\u0207\u020a\3\2\2\2\u0208\u0206\3\2\2\2\u0208")
        buf.write("\u0209\3\2\2\2\u0209\61\3\2\2\2\u020a\u0208\3\2\2\2\u020b")
        buf.write("\u020d\79\2\2\u020c\u020e\5\64\33\2\u020d\u020c\3\2\2")
        buf.write("\2\u020d\u020e\3\2\2\2\u020e\u021c\3\2\2\2\u020f\u0211")
        buf.write("\7$\2\2\u0210\u0212\5\64\33\2\u0211\u0210\3\2\2\2\u0211")
        buf.write("\u0212\3\2\2\2\u0212\u021c\3\2\2\2\u0213\u0215\7:\2\2")
        buf.write("\u0214\u0216\5\64\33\2\u0215\u0214\3\2\2\2\u0215\u0216")
        buf.write("\3\2\2\2\u0216\u021c\3\2\2\2\u0217\u0219\5\u0116\u008c")
        buf.write("\2\u0218\u021a\5\64\33\2\u0219\u0218\3\2\2\2\u0219\u021a")
        buf.write("\3\2\2\2\u021a\u021c\3\2\2\2\u021b\u020b\3\2\2\2\u021b")
        buf.write("\u020f\3\2\2\2\u021b\u0213\3\2\2\2\u021b\u0217\3\2\2\2")
        buf.write("\u021c\63\3\2\2\2\u021d\u021e\7\u00c4\2\2\u021e\u021f")
        buf.write("\5\22\n\2\u021f\u0220\7\u00c3\2\2\u0220\65\3\2\2\2\u0221")
        buf.write("\u0223\7\u00b9\2\2\u0222\u0224\58\35\2\u0223\u0222\3\2")
        buf.write("\2\2\u0223\u0224\3\2\2\2\u0224\u0225\3\2\2\2\u0225\u0226")
        buf.write("\7\u00ba\2\2\u0226\67\3\2\2\2\u0227\u022c\5:\36\2\u0228")
        buf.write("\u0229\7\u00c0\2\2\u0229\u022b\5:\36\2\u022a\u0228\3\2")
        buf.write("\2\2\u022b\u022e\3\2\2\2\u022c\u022a\3\2\2\2\u022c\u022d")
        buf.write("\3\2\2\2\u022d9\3\2\2\2\u022e\u022c\3\2\2\2\u022f\u0231")
        buf.write("\5\32\16\2\u0230\u022f\3\2\2\2\u0231\u0234\3\2\2\2\u0232")
        buf.write("\u0230\3\2\2\2\u0232\u0233\3\2\2\2\u0233\u0235\3\2\2\2")
        buf.write("\u0234\u0232\3\2\2\2\u0235\u0236\5.\30\2\u0236\u0237\5")
        buf.write("\u0116\u008c\2\u0237;\3\2\2\2\u0238\u023d\5\u0116\u008c")
        buf.write("\2\u0239\u023a\7\u00c1\2\2\u023a\u023c\5\u0116\u008c\2")
        buf.write("\u023b\u0239\3\2\2\2\u023c\u023f\3\2\2\2\u023d\u023b\3")
        buf.write("\2\2\2\u023d\u023e\3\2\2\2\u023e=\3\2\2\2\u023f\u023d")
        buf.write("\3\2\2\2\u0240\u0241\t\4\2\2\u0241?\3\2\2\2\u0242\u0243")
        buf.write("\7\u00e7\2\2\u0243\u024a\5<\37\2\u0244\u0247\7\u00b9\2")
        buf.write("\2\u0245\u0248\5B\"\2\u0246\u0248\5F$\2\u0247\u0245\3")
        buf.write("\2\2\2\u0247\u0246\3\2\2\2\u0247\u0248\3\2\2\2\u0248\u0249")
        buf.write("\3\2\2\2\u0249\u024b\7\u00ba\2\2\u024a\u0244\3\2\2\2\u024a")
        buf.write("\u024b\3\2\2\2\u024bA\3\2\2\2\u024c\u0253\5D#\2\u024d")
        buf.write("\u024f\7\u00c0\2\2\u024e\u024d\3\2\2\2\u024e\u024f\3\2")
        buf.write("\2\2\u024f\u0250\3\2\2\2\u0250\u0252\5D#\2\u0251\u024e")
        buf.write("\3\2\2\2\u0252\u0255\3\2\2\2\u0253\u0251\3\2\2\2\u0253")
        buf.write("\u0254\3\2\2\2\u0254C\3\2\2\2\u0255\u0253\3\2\2\2\u0256")
        buf.write("\u0257\5\u0116\u008c\2\u0257\u0258\7\u00c2\2\2\u0258\u0259")
        buf.write("\5F$\2\u0259E\3\2\2\2\u025a\u025e\5\u0092J\2\u025b\u025e")
        buf.write("\5@!\2\u025c\u025e\5H%\2\u025d\u025a\3\2\2\2\u025d\u025b")
        buf.write("\3\2\2\2\u025d\u025c\3\2\2\2\u025eG\3\2\2\2\u025f\u0268")
        buf.write("\7\u00bb\2\2\u0260\u0265\5F$\2\u0261\u0262\7\u00c0\2\2")
        buf.write("\u0262\u0264\5F$\2\u0263\u0261\3\2\2\2\u0264\u0267\3\2")
        buf.write("\2\2\u0265\u0263\3\2\2\2\u0265\u0266\3\2\2\2\u0266\u0269")
        buf.write("\3\2\2\2\u0267\u0265\3\2\2\2\u0268\u0260\3\2\2\2\u0268")
        buf.write("\u0269\3\2\2\2\u0269\u026b\3\2\2\2\u026a\u026c\7\u00c0")
        buf.write("\2\2\u026b\u026a\3\2\2\2\u026b\u026c\3\2\2\2\u026c\u026d")
        buf.write("\3\2\2\2\u026d\u026e\7\u00bc\2\2\u026eI\3\2\2\2\u026f")
        buf.write("\u0273\7\u00bb\2\2\u0270\u0272\5P)\2\u0271\u0270\3\2\2")
        buf.write("\2\u0272\u0275\3\2\2\2\u0273\u0271\3\2\2\2\u0273\u0274")
        buf.write("\3\2\2\2\u0274\u0276\3\2\2\2\u0275\u0273\3\2\2\2\u0276")
        buf.write("\u0277\7\u00bc\2\2\u0277K\3\2\2\2\u0278\u0279\5N(\2\u0279")
        buf.write("\u027a\7\u00bf\2\2\u027aM\3\2\2\2\u027b\u027d\5\32\16")
        buf.write("\2\u027c\u027b\3\2\2\2\u027d\u0280\3\2\2\2\u027e\u027c")
        buf.write("\3\2\2\2\u027e\u027f\3\2\2\2\u027f\u0281\3\2\2\2\u0280")
        buf.write("\u027e\3\2\2\2\u0281\u0282\5.\30\2\u0282\u0283\5(\25\2")
        buf.write("\u0283O\3\2\2\2\u0284\u0299\5J&\2\u0285\u0299\5R*\2\u0286")
        buf.write("\u0299\5T+\2\u0287\u0299\5\\/\2\u0288\u0299\5^\60\2\u0289")
        buf.write("\u0299\5`\61\2\u028a\u0299\5b\62\2\u028b\u0299\5d\63\2")
        buf.write("\u028c\u0299\5f\64\2\u028d\u0299\5h\65\2\u028e\u0299\5")
        buf.write("j\66\2\u028f\u0299\5l\67\2\u0290\u0299\5n8\2\u0291\u0299")
        buf.write("\5p9\2\u0292\u0299\5r:\2\u0293\u0299\5t;\2\u0294\u0299")
        buf.write("\5v<\2\u0295\u0299\5x=\2\u0296\u0299\5L\'\2\u0297\u0299")
        buf.write("\5z>\2\u0298\u0284\3\2\2\2\u0298\u0285\3\2\2\2\u0298\u0286")
        buf.write("\3\2\2\2\u0298\u0287\3\2\2\2\u0298\u0288\3\2\2\2\u0298")
        buf.write("\u0289\3\2\2\2\u0298\u028a\3\2\2\2\u0298\u028b\3\2\2\2")
        buf.write("\u0298\u028c\3\2\2\2\u0298\u028d\3\2\2\2\u0298\u028e\3")
        buf.write("\2\2\2\u0298\u028f\3\2\2\2\u0298\u0290\3\2\2\2\u0298\u0291")
        buf.write("\3\2\2\2\u0298\u0292\3\2\2\2\u0298\u0293\3\2\2\2\u0298")
        buf.write("\u0294\3\2\2\2\u0298\u0295\3\2\2\2\u0298\u0296\3\2\2\2")
        buf.write("\u0298\u0297\3\2\2\2\u0299Q\3\2\2\2\u029a\u029b\7\24\2")
        buf.write("\2\u029b\u029c\5\u008eH\2\u029c\u029f\5P)\2\u029d\u029e")
        buf.write("\7\f\2\2\u029e\u02a0\5P)\2\u029f\u029d\3\2\2\2\u029f\u02a0")
        buf.write("\3\2\2\2\u02a0S\3\2\2\2\u02a1\u02a2\7(\2\2\u02a2\u02a3")
        buf.write("\7\35\2\2\u02a3\u02a4\5\u0092J\2\u02a4\u02a6\7\u00bb\2")
        buf.write("\2\u02a5\u02a7\5V,\2\u02a6\u02a5\3\2\2\2\u02a7\u02a8\3")
        buf.write("\2\2\2\u02a8\u02a6\3\2\2\2\u02a8\u02a9\3\2\2\2\u02a9\u02aa")
        buf.write("\3\2\2\2\u02aa\u02ab\7\u00bc\2\2\u02abU\3\2\2\2\u02ac")
        buf.write("\u02ad\7\65\2\2\u02ad\u02ae\5X-\2\u02ae\u02af\5J&\2\u02af")
        buf.write("W\3\2\2\2\u02b0\u02bd\7\f\2\2\u02b1\u02b6\5Z.\2\u02b2")
        buf.write("\u02b3\7\u00c0\2\2\u02b3\u02b5\5Z.\2\u02b4\u02b2\3\2\2")
        buf.write("\2\u02b5\u02b8\3\2\2\2\u02b6\u02b4\3\2\2\2\u02b6\u02b7")
        buf.write("\3\2\2\2\u02b7\u02bd\3\2\2\2\u02b8\u02b6\3\2\2\2\u02b9")
        buf.write("\u02ba\5\u0116\u008c\2\u02ba\u02bb\5\u0116\u008c\2\u02bb")
        buf.write("\u02bd\3\2\2\2\u02bc\u02b0\3\2\2\2\u02bc\u02b1\3\2\2\2")
        buf.write("\u02bc\u02b9\3\2\2\2\u02bdY\3\2\2\2\u02be\u02c0\7\u00d4")
        buf.write("\2\2\u02bf\u02be\3\2\2\2\u02bf\u02c0\3\2\2\2\u02c0\u02c1")
        buf.write("\3\2\2\2\u02c1\u02c7\7\u00b3\2\2\u02c2\u02c7\7\u00b4\2")
        buf.write("\2\u02c3\u02c7\7\u00b7\2\2\u02c4\u02c7\7\34\2\2\u02c5")
        buf.write("\u02c7\5\u0116\u008c\2\u02c6\u02bf\3\2\2\2\u02c6\u02c2")
        buf.write("\3\2\2\2\u02c6\u02c3\3\2\2\2\u02c6\u02c4\3\2\2\2\u02c6")
        buf.write("\u02c5\3\2\2\2\u02c7[\3\2\2\2\u02c8\u02c9\7\21\2\2\u02c9")
        buf.write("\u02ca\7\u00b9\2\2\u02ca\u02cb\5\u0086D\2\u02cb\u02cc")
        buf.write("\7\u00ba\2\2\u02cc\u02cd\5P)\2\u02cd]\3\2\2\2\u02ce\u02cf")
        buf.write("\7\66\2\2\u02cf\u02d0\5\u008eH\2\u02d0\u02d1\5P)\2\u02d1")
        buf.write("_\3\2\2\2\u02d2\u02d3\7\13\2\2\u02d3\u02d4\5P)\2\u02d4")
        buf.write("\u02d5\7\66\2\2\u02d5\u02d6\5\u008eH\2\u02d6\u02d7\7\u00bf")
        buf.write("\2\2\u02d7a\3\2\2\2\u02d8\u02d9\7.\2\2\u02d9\u02e3\5J")
        buf.write("&\2\u02da\u02dc\5\u0082B\2\u02db\u02da\3\2\2\2\u02dc\u02dd")
        buf.write("\3\2\2\2\u02dd\u02db\3\2\2\2\u02dd\u02de\3\2\2\2\u02de")
        buf.write("\u02e0\3\2\2\2\u02df\u02e1\5\u0084C\2\u02e0\u02df\3\2")
        buf.write("\2\2\u02e0\u02e1\3\2\2\2\u02e1\u02e4\3\2\2\2\u02e2\u02e4")
        buf.write("\5\u0084C\2\u02e3\u02db\3\2\2\2\u02e3\u02e2\3\2\2\2\u02e4")
        buf.write("c\3\2\2\2\u02e5\u02e7\7\"\2\2\u02e6\u02e8\5\u0092J\2\u02e7")
        buf.write("\u02e6\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8\u02e9\3\2\2\2")
        buf.write("\u02e9\u02ea\7\u00bf\2\2\u02eae\3\2\2\2\u02eb\u02ec\7")
        buf.write("+\2\2\u02ec\u02ed\5\u0092J\2\u02ed\u02ee\7\u00bf\2\2\u02ee")
        buf.write("g\3\2\2\2\u02ef\u02f0\7\6\2\2\u02f0\u02f1\7\u00bf\2\2")
        buf.write("\u02f1i\3\2\2\2\u02f2\u02f3\7\t\2\2\u02f3\u02f4\7\u00bf")
        buf.write("\2\2\u02f4k\3\2\2\2\u02f5\u02f6\7\27\2\2\u02f6\u02f7\5")
        buf.write("\u0092J\2\u02f7\u02f8\7\u00bf\2\2\u02f8m\3\2\2\2\u02f9")
        buf.write("\u02fa\7\60\2\2\u02fa\u02fb\5\u0092J\2\u02fb\u02fc\7\u00bf")
        buf.write("\2\2\u02fco\3\2\2\2\u02fd\u02fe\7\n\2\2\u02fe\u02ff\5")
        buf.write("\u0092J\2\u02ff\u0300\7\u00bf\2\2\u0300q\3\2\2\2\u0301")
        buf.write("\u0302\7/\2\2\u0302\u0303\5\u0092J\2\u0303\u0304\7\u00bf")
        buf.write("\2\2\u0304s\3\2\2\2\u0305\u0306\7\61\2\2\u0306\u0308\5")
        buf.write("\u0092J\2\u0307\u0309\5<\37\2\u0308\u0307\3\2\2\2\u0308")
        buf.write("\u0309\3\2\2\2\u0309\u030a\3\2\2\2\u030a\u030b\7\u00bf")
        buf.write("\2\2\u030bu\3\2\2\2\u030c\u030d\7\32\2\2\u030d\u030e\5")
        buf.write("\u0092J\2\u030e\u030f\5\u0092J\2\u030f\u0310\7\u00bf\2")
        buf.write("\2\u0310w\3\2\2\2\u0311\u0312\7#\2\2\u0312\u0314\7\u00b9")
        buf.write("\2\2\u0313\u0315\5\u0090I\2\u0314\u0313\3\2\2\2\u0314")
        buf.write("\u0315\3\2\2\2\u0315\u0316\3\2\2\2\u0316\u0317\7\u00ba")
        buf.write("\2\2\u0317\u0318\5J&\2\u0318y\3\2\2\2\u0319\u031a\5\u0092")
        buf.write("J\2\u031a\u031b\7\u00bf\2\2\u031b{\3\2\2\2\u031c\u031e")
        buf.write("\5\32\16\2\u031d\u031c\3\2\2\2\u031e\u0321\3\2\2\2\u031f")
        buf.write("\u031d\3\2\2\2\u031f\u0320\3\2\2\2\u0320\u0324\3\2\2\2")
        buf.write("\u0321\u031f\3\2\2\2\u0322\u0325\5~@\2\u0323\u0325\5\u0080")
        buf.write("A\2\u0324\u0322\3\2\2\2\u0324\u0323\3\2\2\2\u0325}\3\2")
        buf.write("\2\2\u0326\u0329\7\22\2\2\u0327\u032a\7\u00bf\2\2\u0328")
        buf.write("\u032a\5J&\2\u0329\u0327\3\2\2\2\u0329\u0328\3\2\2\2\u032a")
        buf.write("\177\3\2\2\2\u032b\u032e\7$\2\2\u032c\u032f\7\u00bf\2")
        buf.write("\2\u032d\u032f\5J&\2\u032e\u032c\3\2\2\2\u032e\u032d\3")
        buf.write("\2\2\2\u032f\u0081\3\2\2\2\u0330\u0331\7\7\2\2\u0331\u0335")
        buf.write("\7\u00b9\2\2\u0332\u0334\5\32\16\2\u0333\u0332\3\2\2\2")
        buf.write("\u0334\u0337\3\2\2\2\u0335\u0333\3\2\2\2\u0335\u0336\3")
        buf.write("\2\2\2\u0336\u0338\3\2\2\2\u0337\u0335\3\2\2\2\u0338\u0339")
        buf.write("\5<\37\2\u0339\u033a\5\u0116\u008c\2\u033a\u033b\7\u00ba")
        buf.write("\2\2\u033b\u033c\5J&\2\u033c\u0083\3\2\2\2\u033d\u033e")
        buf.write("\7\20\2\2\u033e\u033f\5J&\2\u033f\u0085\3\2\2\2\u0340")
        buf.write("\u034d\5\u008aF\2\u0341\u0343\5\u0088E\2\u0342\u0341\3")
        buf.write("\2\2\2\u0342\u0343\3\2\2\2\u0343\u0344\3\2\2\2\u0344\u0346")
        buf.write("\7\u00bf\2\2\u0345\u0347\5\u0092J\2\u0346\u0345\3\2\2")
        buf.write("\2\u0346\u0347\3\2\2\2\u0347\u0348\3\2\2\2\u0348\u034a")
        buf.write("\7\u00bf\2\2\u0349\u034b\5\u008cG\2\u034a\u0349\3\2\2")
        buf.write("\2\u034a\u034b\3\2\2\2\u034b\u034d\3\2\2\2\u034c\u0340")
        buf.write("\3\2\2\2\u034c\u0342\3\2\2\2\u034d\u0087\3\2\2\2\u034e")
        buf.write("\u0351\5N(\2\u034f\u0351\5\u0090I\2\u0350\u034e\3\2\2")
        buf.write("\2\u0350\u034f\3\2\2\2\u0351\u0089\3\2\2\2\u0352\u0353")
        buf.write("\5.\30\2\u0353\u0354\5\u0116\u008c\2\u0354\u0355\7\u00c9")
        buf.write("\2\2\u0355\u0356\5\u0092J\2\u0356\u008b\3\2\2\2\u0357")
        buf.write("\u0358\5\u0090I\2\u0358\u008d\3\2\2\2\u0359\u035a\7\u00b9")
        buf.write("\2\2\u035a\u035b\5\u0092J\2\u035b\u035c\7\u00ba\2\2\u035c")
        buf.write("\u008f\3\2\2\2\u035d\u0362\5\u0092J\2\u035e\u035f\7\u00c0")
        buf.write("\2\2\u035f\u0361\5\u0092J\2\u0360\u035e\3\2\2\2\u0361")
        buf.write("\u0364\3\2\2\2\u0362\u0360\3\2\2\2\u0362\u0363\3\2\2\2")
        buf.write("\u0363\u0091\3\2\2\2\u0364\u0362\3\2\2\2\u0365\u0366\b")
        buf.write("J\1\2\u0366\u0378\5\u0094K\2\u0367\u0378\5\u0096L\2\u0368")
        buf.write("\u0369\7\33\2\2\u0369\u0378\5\u009aN\2\u036a\u036b\7\u00b9")
        buf.write("\2\2\u036b\u036c\5.\30\2\u036c\u036d\7\u00ba\2\2\u036d")
        buf.write("\u036e\5\u0092J\24\u036e\u0378\3\2\2\2\u036f\u0370\7\u00b9")
        buf.write("\2\2\u0370\u0371\5\u0092J\2\u0371\u0372\7\u00ba\2\2\u0372")
        buf.write("\u0378\3\2\2\2\u0373\u0374\t\5\2\2\u0374\u0378\5\u0092")
        buf.write("J\21\u0375\u0376\t\6\2\2\u0376\u0378\5\u0092J\20\u0377")
        buf.write("\u0365\3\2\2\2\u0377\u0367\3\2\2\2\u0377\u0368\3\2\2\2")
        buf.write("\u0377\u036a\3\2\2\2\u0377\u036f\3\2\2\2\u0377\u0373\3")
        buf.write("\2\2\2\u0377\u0375\3\2\2\2\u0378\u03bd\3\2\2\2\u0379\u037a")
        buf.write("\f\17\2\2\u037a\u037b\t\7\2\2\u037b\u03bc\5\u0092J\20")
        buf.write("\u037c\u037d\f\16\2\2\u037d\u037e\t\b\2\2\u037e\u03bc")
        buf.write("\5\u0092J\17\u037f\u0387\f\r\2\2\u0380\u0381\7\u00c4\2")
        buf.write("\2\u0381\u0388\7\u00c4\2\2\u0382\u0383\7\u00c3\2\2\u0383")
        buf.write("\u0384\7\u00c3\2\2\u0384\u0388\7\u00c3\2\2\u0385\u0386")
        buf.write("\7\u00c3\2\2\u0386\u0388\7\u00c3\2\2\u0387\u0380\3\2\2")
        buf.write("\2\u0387\u0382\3\2\2\2\u0387\u0385\3\2\2\2\u0388\u0389")
        buf.write("\3\2\2\2\u0389\u03bc\5\u0092J\16\u038a\u038b\f\f\2\2\u038b")
        buf.write("\u038d\t\t\2\2\u038c\u038e\7\u00c2\2\2\u038d\u038c\3\2")
        buf.write("\2\2\u038d\u038e\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u03bc")
        buf.write("\5\u0092J\r\u0390\u0391\f\n\2\2\u0391\u0392\t\n\2\2\u0392")
        buf.write("\u03bc\5\u0092J\13\u0393\u0394\f\t\2\2\u0394\u0395\7\u00d7")
        buf.write("\2\2\u0395\u03bc\5\u0092J\n\u0396\u0397\f\b\2\2\u0397")
        buf.write("\u0398\7\u00d9\2\2\u0398\u03bc\5\u0092J\t\u0399\u039a")
        buf.write("\f\7\2\2\u039a\u039b\7\u00d8\2\2\u039b\u03bc\5\u0092J")
        buf.write("\b\u039c\u039d\f\6\2\2\u039d\u039e\7\u00cf\2\2\u039e\u03bc")
        buf.write("\5\u0092J\7\u039f\u03a0\f\5\2\2\u03a0\u03a1\7\u00d0\2")
        buf.write("\2\u03a1\u03bc\5\u0092J\6\u03a2\u03a3\f\4\2\2\u03a3\u03a4")
        buf.write("\7\u00c8\2\2\u03a4\u03a5\5\u0092J\2\u03a5\u03a6\7\u00c9")
        buf.write("\2\2\u03a6\u03a7\5\u0092J\4\u03a7\u03bc\3\2\2\2\u03a8")
        buf.write("\u03a9\f\3\2\2\u03a9\u03aa\t\13\2\2\u03aa\u03bc\5\u0092")
        buf.write("J\3\u03ab\u03ac\f\30\2\2\u03ac\u03af\t\f\2\2\u03ad\u03b0")
        buf.write("\5\u0098M\2\u03ae\u03b0\5\u0118\u008d\2\u03af\u03ad\3")
        buf.write("\2\2\2\u03af\u03ae\3\2\2\2\u03b0\u03bc\3\2\2\2\u03b1\u03b2")
        buf.write("\f\27\2\2\u03b2\u03b3\7\u00bd\2\2\u03b3\u03b4\5\u0092")
        buf.write("J\2\u03b4\u03b5\7\u00be\2\2\u03b5\u03bc\3\2\2\2\u03b6")
        buf.write("\u03b7\f\22\2\2\u03b7\u03bc\t\r\2\2\u03b8\u03b9\f\13\2")
        buf.write("\2\u03b9\u03ba\7\30\2\2\u03ba\u03bc\5.\30\2\u03bb\u0379")
        buf.write("\3\2\2\2\u03bb\u037c\3\2\2\2\u03bb\u037f\3\2\2\2\u03bb")
        buf.write("\u038a\3\2\2\2\u03bb\u0390\3\2\2\2\u03bb\u0393\3\2\2\2")
        buf.write("\u03bb\u0396\3\2\2\2\u03bb\u0399\3\2\2\2\u03bb\u039c\3")
        buf.write("\2\2\2\u03bb\u039f\3\2\2\2\u03bb\u03a2\3\2\2\2\u03bb\u03a8")
        buf.write("\3\2\2\2\u03bb\u03ab\3\2\2\2\u03bb\u03b1\3\2\2\2\u03bb")
        buf.write("\u03b6\3\2\2\2\u03bb\u03b8\3\2\2\2\u03bc\u03bf\3\2\2\2")
        buf.write("\u03bd\u03bb\3\2\2\2\u03bd\u03be\3\2\2\2\u03be\u0093\3")
        buf.write("\2\2\2\u03bf\u03bd\3\2\2\2\u03c0\u03cb\7*\2\2\u03c1\u03cb")
        buf.write("\7\'\2\2\u03c2\u03cb\5> \2\u03c3\u03c4\5.\30\2\u03c4\u03c5")
        buf.write("\7\u00c1\2\2\u03c5\u03c6\7\b\2\2\u03c6\u03cb\3\2\2\2\u03c7")
        buf.write("\u03cb\5\u0116\u008c\2\u03c8\u03cb\5\u00aeX\2\u03c9\u03cb")
        buf.write("\5\u0102\u0082\2\u03ca\u03c0\3\2\2\2\u03ca\u03c1\3\2\2")
        buf.write("\2\u03ca\u03c2\3\2\2\2\u03ca\u03c3\3\2\2\2\u03ca\u03c7")
        buf.write("\3\2\2\2\u03ca\u03c8\3\2\2\2\u03ca\u03c9\3\2\2\2\u03cb")
        buf.write("\u0095\3\2\2\2\u03cc\u03cd\5\u0116\u008c\2\u03cd\u03cf")
        buf.write("\7\u00b9\2\2\u03ce\u03d0\5\u0090I\2\u03cf\u03ce\3\2\2")
        buf.write("\2\u03cf\u03d0\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03d2")
        buf.write("\7\u00ba\2\2\u03d2\u03e0\3\2\2\2\u03d3\u03d4\7*\2\2\u03d4")
        buf.write("\u03d6\7\u00b9\2\2\u03d5\u03d7\5\u0090I\2\u03d6\u03d5")
        buf.write("\3\2\2\2\u03d6\u03d7\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8")
        buf.write("\u03e0\7\u00ba\2\2\u03d9\u03da\7\'\2\2\u03da\u03dc\7\u00b9")
        buf.write("\2\2\u03db\u03dd\5\u0090I\2\u03dc\u03db\3\2\2\2\u03dc")
        buf.write("\u03dd\3\2\2\2\u03dd\u03de\3\2\2\2\u03de\u03e0\7\u00ba")
        buf.write("\2\2\u03df\u03cc\3\2\2\2\u03df\u03d3\3\2\2\2\u03df\u03d9")
        buf.write("\3\2\2\2\u03e0\u0097\3\2\2\2\u03e1\u03e2\5\u0118\u008d")
        buf.write("\2\u03e2\u03e4\7\u00b9\2\2\u03e3\u03e5\5\u0090I\2\u03e4")
        buf.write("\u03e3\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5\u03e6\3\2\2\2")
        buf.write("\u03e6\u03e7\7\u00ba\2\2\u03e7\u0099\3\2\2\2\u03e8\u03ee")
        buf.write("\5\u009cO\2\u03e9\u03ef\5\u00a0Q\2\u03ea\u03ef\5\u00a2")
        buf.write("R\2\u03eb\u03ef\5\u00a4S\2\u03ec\u03ef\5\u00a6T\2\u03ed")
        buf.write("\u03ef\5\u00aaV\2\u03ee\u03e9\3\2\2\2\u03ee\u03ea\3\2")
        buf.write("\2\2\u03ee\u03eb\3\2\2\2\u03ee\u03ec\3\2\2\2\u03ee\u03ed")
        buf.write("\3\2\2\2\u03ef\u009b\3\2\2\2\u03f0\u03f5\5\u009eP\2\u03f1")
        buf.write("\u03f2\7\u00c1\2\2\u03f2\u03f4\5\u009eP\2\u03f3\u03f1")
        buf.write("\3\2\2\2\u03f4\u03f7\3\2\2\2\u03f5\u03f3\3\2\2\2\u03f5")
        buf.write("\u03f6\3\2\2\2\u03f6\u009d\3\2\2\2\u03f7\u03f5\3\2\2\2")
        buf.write("\u03f8\u03fd\5\u0118\u008d\2\u03f9\u03fa\7\u00c4\2\2\u03fa")
        buf.write("\u03fb\5\22\n\2\u03fb\u03fc\7\u00c3\2\2\u03fc\u03fe\3")
        buf.write("\2\2\2\u03fd\u03f9\3\2\2\2\u03fd\u03fe\3\2\2\2\u03fe\u009f")
        buf.write("\3\2\2\2\u03ff\u0400\7\u00bb\2\2\u0400\u0401\7\u00bc\2")
        buf.write("\2\u0401\u00a1\3\2\2\2\u0402\u0403\5\u00acW\2\u0403\u00a3")
        buf.write("\3\2\2\2\u0404\u0405\7\u00bd\2\2\u0405\u0406\5\u0092J")
        buf.write("\2\u0406\u0407\7\u00be\2\2\u0407\u040e\3\2\2\2\u0408\u0409")
        buf.write("\7\u00bd\2\2\u0409\u040b\7\u00be\2\2\u040a\u040c\5,\27")
        buf.write("\2\u040b\u040a\3\2\2\2\u040b\u040c\3\2\2\2\u040c\u040e")
        buf.write("\3\2\2\2\u040d\u0404\3\2\2\2\u040d\u0408\3\2\2\2\u040e")
        buf.write("\u00a5\3\2\2\2\u040f\u0410\7\u00bb\2\2\u0410\u0415\5\u00a8")
        buf.write("U\2\u0411\u0412\7\u00c0\2\2\u0412\u0414\5\u00a8U\2\u0413")
        buf.write("\u0411\3\2\2\2\u0414\u0417\3\2\2\2\u0415\u0413\3\2\2\2")
        buf.write("\u0415\u0416\3\2\2\2\u0416\u0418\3\2\2\2\u0417\u0415\3")
        buf.write("\2\2\2\u0418\u0419\7\u00bc\2\2\u0419\u00a7\3\2\2\2\u041a")
        buf.write("\u041b\5\u0092J\2\u041b\u041c\7\u00db\2\2\u041c\u041d")
        buf.write("\5\u0092J\2\u041d\u00a9\3\2\2\2\u041e\u041f\7\u00bb\2")
        buf.write("\2\u041f\u0424\5\u0092J\2\u0420\u0421\7\u00c0\2\2\u0421")
        buf.write("\u0423\5\u0092J\2\u0422\u0420\3\2\2\2\u0423\u0426\3\2")
        buf.write("\2\2\u0424\u0422\3\2\2\2\u0424\u0425\3\2\2\2\u0425\u0427")
        buf.write("\3\2\2\2\u0426\u0424\3\2\2\2\u0427\u0428\7\u00bc\2\2\u0428")
        buf.write("\u00ab\3\2\2\2\u0429\u042b\7\u00b9\2\2\u042a\u042c\5\u0090")
        buf.write("I\2\u042b\u042a\3\2\2\2\u042b\u042c\3\2\2\2\u042c\u042d")
        buf.write("\3\2\2\2\u042d\u042e\7\u00ba\2\2\u042e\u00ad\3\2\2\2\u042f")
        buf.write("\u0430\7\u00bd\2\2\u0430\u0431\5\u00b0Y\2\u0431\u0432")
        buf.write("\7\u00be\2\2\u0432\u00af\3\2\2\2\u0433\u0434\7;\2\2\u0434")
        buf.write("\u0435\5\u00b4[\2\u0435\u0436\7=\2\2\u0436\u0438\5\u00ba")
        buf.write("^\2\u0437\u0439\5\u00ceh\2\u0438\u0437\3\2\2\2\u0438\u0439")
        buf.write("\3\2\2\2\u0439\u043b\3\2\2\2\u043a\u043c\5\u00d0i\2\u043b")
        buf.write("\u043a\3\2\2\2\u043b\u043c\3\2\2\2\u043c\u043e\3\2\2\2")
        buf.write("\u043d\u043f\5\u00e0q\2\u043e\u043d\3\2\2\2\u043e\u043f")
        buf.write("\3\2\2\2\u043f\u0441\3\2\2\2\u0440\u0442\5\u00eav\2\u0441")
        buf.write("\u0440\3\2\2\2\u0441\u0442\3\2\2\2\u0442\u0444\3\2\2\2")
        buf.write("\u0443\u0445\5\u00ecw\2\u0444\u0443\3\2\2\2\u0444\u0445")
        buf.write("\3\2\2\2\u0445\u0447\3\2\2\2\u0446\u0448\5\u00f2z\2\u0447")
        buf.write("\u0446\3\2\2\2\u0447\u0448\3\2\2\2\u0448\u044a\3\2\2\2")
        buf.write("\u0449\u044b\5\u00f4{\2\u044a\u0449\3\2\2\2\u044a\u044b")
        buf.write("\3\2\2\2\u044b\u044d\3\2\2\2\u044c\u044e\5\u00f6|\2\u044d")
        buf.write("\u044c\3\2\2\2\u044d\u044e\3\2\2\2\u044e\u044f\3\2\2\2")
        buf.write("\u044f\u0452\5\u00f8}\2\u0450\u0451\7\60\2\2\u0451\u0453")
        buf.write("\5\u010e\u0088\2\u0452\u0450\3\2\2\2\u0452\u0453\3\2\2")
        buf.write("\2\u0453\u00b1\3\2\2\2\u0454\u0455\7;\2\2\u0455\u0456")
        buf.write("\5\u00bc_\2\u0456\u0457\7=\2\2\u0457\u0459\5\u00ba^\2")
        buf.write("\u0458\u045a\5\u00d0i\2\u0459\u0458\3\2\2\2\u0459\u045a")
        buf.write("\3\2\2\2\u045a\u045c\3\2\2\2\u045b\u045d\5\u00ecw\2\u045c")
        buf.write("\u045b\3\2\2\2\u045c\u045d\3\2\2\2\u045d\u045f\3\2\2\2")
        buf.write("\u045e\u0460\5\u00f2z\2\u045f\u045e\3\2\2\2\u045f\u0460")
        buf.write("\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u0464\5\u00f8}\2\u0462")
        buf.write("\u0463\7\60\2\2\u0463\u0465\5\u010e\u0088\2\u0464\u0462")
        buf.write("\3\2\2\2\u0464\u0465\3\2\2\2\u0465\u00b3\3\2\2\2\u0466")
        buf.write("\u046b\5\u00b6\\\2\u0467\u0468\7\u00c0\2\2\u0468\u046a")
        buf.write("\5\u00b6\\\2\u0469\u0467\3\2\2\2\u046a\u046d\3\2\2\2\u046b")
        buf.write("\u0469\3\2\2\2\u046b\u046c\3\2\2\2\u046c\u00b5\3\2\2\2")
        buf.write("\u046d\u046b\3\2\2\2\u046e\u0470\5\u00b8]\2\u046f\u0471")
        buf.write("\5\u0100\u0081\2\u0470\u046f\3\2\2\2\u0470\u0471\3\2\2")
        buf.write("\2\u0471\u047e\3\2\2\2\u0472\u0474\5\u00c2b\2\u0473\u0475")
        buf.write("\5\u0100\u0081\2\u0474\u0473\3\2\2\2\u0474\u0475\3\2\2")
        buf.write("\2\u0475\u047e\3\2\2\2\u0476\u0477\7\u00b9\2\2\u0477\u0478")
        buf.write("\5\u00b2Z\2\u0478\u047a\7\u00ba\2\2\u0479\u047b\5\u0100")
        buf.write("\u0081\2\u047a\u0479\3\2\2\2\u047a\u047b\3\2\2\2\u047b")
        buf.write("\u047e\3\2\2\2\u047c\u047e\5\u00c6d\2\u047d\u046e\3\2")
        buf.write("\2\2\u047d\u0472\3\2\2\2\u047d\u0476\3\2\2\2\u047d\u047c")
        buf.write("\3\2\2\2\u047e\u00b7\3\2\2\2\u047f\u0484\5\u0100\u0081")
        buf.write("\2\u0480\u0481\7\u00c1\2\2\u0481\u0483\5\u0100\u0081\2")
        buf.write("\u0482\u0480\3\2\2\2\u0483\u0486\3\2\2\2\u0484\u0482\3")
        buf.write("\2\2\2\u0484\u0485\3\2\2\2\u0485\u00b9\3\2\2\2\u0486\u0484")
        buf.write("\3\2\2\2\u0487\u0489\5\u00b8]\2\u0488\u048a\5\u0100\u0081")
        buf.write("\2\u0489\u0488\3\2\2\2\u0489\u048a\3\2\2\2\u048a\u0492")
        buf.write("\3\2\2\2\u048b\u048c\7\u00c0\2\2\u048c\u048e\5\u00b8]")
        buf.write("\2\u048d\u048f\5\u0100\u0081\2\u048e\u048d\3\2\2\2\u048e")
        buf.write("\u048f\3\2\2\2\u048f\u0491\3\2\2\2\u0490\u048b\3\2\2\2")
        buf.write("\u0491\u0494\3\2\2\2\u0492\u0490\3\2\2\2\u0492\u0493\3")
        buf.write("\2\2\2\u0493\u00bb\3\2\2\2\u0494\u0492\3\2\2\2\u0495\u049a")
        buf.write("\5\u00be`\2\u0496\u0497\7\u00c0\2\2\u0497\u0499\5\u00be")
        buf.write("`\2\u0498\u0496\3\2\2\2\u0499\u049c\3\2\2\2\u049a\u0498")
        buf.write("\3\2\2\2\u049a\u049b\3\2\2\2\u049b\u00bd\3\2\2\2\u049c")
        buf.write("\u049a\3\2\2\2\u049d\u049f\5\u00b8]\2\u049e\u04a0\5\u0100")
        buf.write("\u0081\2\u049f\u049e\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0")
        buf.write("\u04a6\3\2\2\2\u04a1\u04a3\5\u00c2b\2\u04a2\u04a4\5\u0100")
        buf.write("\u0081\2\u04a3\u04a2\3\2\2\2\u04a3\u04a4\3\2\2\2\u04a4")
        buf.write("\u04a6\3\2\2\2\u04a5\u049d\3\2\2\2\u04a5\u04a1\3\2\2\2")
        buf.write("\u04a6\u00bf\3\2\2\2\u04a7\u04a8\t\16\2\2\u04a8\u00c1")
        buf.write("\3\2\2\2\u04a9\u04aa\7H\2\2\u04aa\u04ab\7\u00b9\2\2\u04ab")
        buf.write("\u04ac\5\u00b8]\2\u04ac\u04ad\7\u00ba\2\2\u04ad\u051b")
        buf.write("\3\2\2\2\u04ae\u04af\7<\2\2\u04af\u04b0\7\u00b9\2\2\u04b0")
        buf.write("\u051b\7\u00ba\2\2\u04b1\u04b2\7<\2\2\u04b2\u04b3\7\u00b9")
        buf.write("\2\2\u04b3\u04b4\5\u00b8]\2\u04b4\u04b5\7\u00ba\2\2\u04b5")
        buf.write("\u051b\3\2\2\2\u04b6\u04b7\7I\2\2\u04b7\u04b8\7\u00b9")
        buf.write("\2\2\u04b8\u04b9\5\u00b8]\2\u04b9\u04ba\7\u00ba\2\2\u04ba")
        buf.write("\u051b\3\2\2\2\u04bb\u04bc\7J\2\2\u04bc\u04bd\7\u00b9")
        buf.write("\2\2\u04bd\u04be\5\u00b8]\2\u04be\u04bf\7\u00ba\2\2\u04bf")
        buf.write("\u051b\3\2\2\2\u04c0\u04c1\7K\2\2\u04c1\u04c2\7\u00b9")
        buf.write("\2\2\u04c2\u04c3\5\u00b8]\2\u04c3\u04c4\7\u00ba\2\2\u04c4")
        buf.write("\u051b\3\2\2\2\u04c5\u04c6\7L\2\2\u04c6\u04c7\7\u00b9")
        buf.write("\2\2\u04c7\u04c8\5\u00b8]\2\u04c8\u04c9\7\u00ba\2\2\u04c9")
        buf.write("\u051b\3\2\2\2\u04ca\u04cb\7_\2\2\u04cb\u04cc\7\u00b9")
        buf.write("\2\2\u04cc\u04cd\5\u00b8]\2\u04cd\u04ce\7\u00ba\2\2\u04ce")
        buf.write("\u051b\3\2\2\2\u04cf\u04d0\7j\2\2\u04d0\u04d1\7\u00b9")
        buf.write("\2\2\u04d1\u04d2\5\u00b8]\2\u04d2\u04d3\7\u00ba\2\2\u04d3")
        buf.write("\u051b\3\2\2\2\u04d4\u04d5\7o\2\2\u04d5\u04d6\7\u00b9")
        buf.write("\2\2\u04d6\u04d7\5\u00c4c\2\u04d7\u04d8\7\u00ba\2\2\u04d8")
        buf.write("\u051b\3\2\2\2\u04d9\u04da\7p\2\2\u04da\u04db\7\u00b9")
        buf.write("\2\2\u04db\u04dc\5\u00c4c\2\u04dc\u04dd\7\u00ba\2\2\u04dd")
        buf.write("\u051b\3\2\2\2\u04de\u04df\7q\2\2\u04df\u04e0\7\u00b9")
        buf.write("\2\2\u04e0\u04e1\5\u00c4c\2\u04e1\u04e2\7\u00ba\2\2\u04e2")
        buf.write("\u051b\3\2\2\2\u04e3\u04e4\7r\2\2\u04e4\u04e5\7\u00b9")
        buf.write("\2\2\u04e5\u04e6\5\u00c4c\2\u04e6\u04e7\7\u00ba\2\2\u04e7")
        buf.write("\u051b\3\2\2\2\u04e8\u04e9\7s\2\2\u04e9\u04ea\7\u00b9")
        buf.write("\2\2\u04ea\u04eb\5\u00c4c\2\u04eb\u04ec\7\u00ba\2\2\u04ec")
        buf.write("\u051b\3\2\2\2\u04ed\u04ee\7t\2\2\u04ee\u04ef\7\u00b9")
        buf.write("\2\2\u04ef\u04f0\5\u00c4c\2\u04f0\u04f1\7\u00ba\2\2\u04f1")
        buf.write("\u051b\3\2\2\2\u04f2\u04f3\7u\2\2\u04f3\u04f4\7\u00b9")
        buf.write("\2\2\u04f4\u04f5\5\u00c4c\2\u04f5\u04f6\7\u00ba\2\2\u04f6")
        buf.write("\u051b\3\2\2\2\u04f7\u04f8\7v\2\2\u04f8\u04f9\7\u00b9")
        buf.write("\2\2\u04f9\u04fa\5\u00c4c\2\u04fa\u04fb\7\u00ba\2\2\u04fb")
        buf.write("\u051b\3\2\2\2\u04fc\u04fd\7w\2\2\u04fd\u04fe\7\u00b9")
        buf.write("\2\2\u04fe\u04ff\5\u00c4c\2\u04ff\u0500\7\u00ba\2\2\u0500")
        buf.write("\u051b\3\2\2\2\u0501\u0502\7x\2\2\u0502\u0503\7\u00b9")
        buf.write("\2\2\u0503\u0504\5\u00c4c\2\u0504\u0505\7\u00ba\2\2\u0505")
        buf.write("\u051b\3\2\2\2\u0506\u0507\7y\2\2\u0507\u0508\7\u00b9")
        buf.write("\2\2\u0508\u0509\5\u00c4c\2\u0509\u050a\7\u00ba\2\2\u050a")
        buf.write("\u051b\3\2\2\2\u050b\u050c\7z\2\2\u050c\u050d\7\u00b9")
        buf.write("\2\2\u050d\u050e\5\u00c4c\2\u050e\u050f\7\u00ba\2\2\u050f")
        buf.write("\u051b\3\2\2\2\u0510\u0511\7{\2\2\u0511\u0512\7\u00b9")
        buf.write("\2\2\u0512\u0513\5\u00c4c\2\u0513\u0514\7\u00ba\2\2\u0514")
        buf.write("\u051b\3\2\2\2\u0515\u0516\7\u00a9\2\2\u0516\u0517\7\u00b9")
        buf.write("\2\2\u0517\u0518\5\u00c0a\2\u0518\u0519\7\u00ba\2\2\u0519")
        buf.write("\u051b\3\2\2\2\u051a\u04a9\3\2\2\2\u051a\u04ae\3\2\2\2")
        buf.write("\u051a\u04b1\3\2\2\2\u051a\u04b6\3\2\2\2\u051a\u04bb\3")
        buf.write("\2\2\2\u051a\u04c0\3\2\2\2\u051a\u04c5\3\2\2\2\u051a\u04ca")
        buf.write("\3\2\2\2\u051a\u04cf\3\2\2\2\u051a\u04d4\3\2\2\2\u051a")
        buf.write("\u04d9\3\2\2\2\u051a\u04de\3\2\2\2\u051a\u04e3\3\2\2\2")
        buf.write("\u051a\u04e8\3\2\2\2\u051a\u04ed\3\2\2\2\u051a\u04f2\3")
        buf.write("\2\2\2\u051a\u04f7\3\2\2\2\u051a\u04fc\3\2\2\2\u051a\u0501")
        buf.write("\3\2\2\2\u051a\u0506\3\2\2\2\u051a\u050b\3\2\2\2\u051a")
        buf.write("\u0510\3\2\2\2\u051a\u0515\3\2\2\2\u051b\u00c3\3\2\2\2")
        buf.write("\u051c\u051d\7|\2\2\u051d\u051e\7\u00b9\2\2\u051e\u051f")
        buf.write("\5\u00b8]\2\u051f\u0520\7\u00ba\2\2\u0520\u0523\3\2\2")
        buf.write("\2\u0521\u0523\5\u00b8]\2\u0522\u051c\3\2\2\2\u0522\u0521")
        buf.write("\3\2\2\2\u0523\u00c5\3\2\2\2\u0524\u0525\7M\2\2\u0525")
        buf.write("\u0527\5\u00b8]\2\u0526\u0528\5\u00c8e\2\u0527\u0526\3")
        buf.write("\2\2\2\u0528\u0529\3\2\2\2\u0529\u0527\3\2\2\2\u0529\u052a")
        buf.write("\3\2\2\2\u052a\u052c\3\2\2\2\u052b\u052d\5\u00caf\2\u052c")
        buf.write("\u052b\3\2\2\2\u052c\u052d\3\2\2\2\u052d\u052e\3\2\2\2")
        buf.write("\u052e\u052f\7N\2\2\u052f\u00c7\3\2\2\2\u0530\u0531\7")
        buf.write("\65\2\2\u0531\u0532\5\u00b8]\2\u0532\u0533\7O\2\2\u0533")
        buf.write("\u0534\5\u00ccg\2\u0534\u00c9\3\2\2\2\u0535\u0536\7\f")
        buf.write("\2\2\u0536\u0537\5\u00ccg\2\u0537\u00cb\3\2\2\2\u0538")
        buf.write("\u053d\5\u00b8]\2\u0539\u053a\7\u00c0\2\2\u053a\u053c")
        buf.write("\5\u00b8]\2\u053b\u0539\3\2\2\2\u053c\u053f\3\2\2\2\u053d")
        buf.write("\u053b\3\2\2\2\u053d\u053e\3\2\2\2\u053e\u00cd\3\2\2\2")
        buf.write("\u053f\u053d\3\2\2\2\u0540\u0541\7?\2\2\u0541\u0542\7")
        buf.write("@\2\2\u0542\u0543\5\u0100\u0081\2\u0543\u00cf\3\2\2\2")
        buf.write("\u0544\u0545\7A\2\2\u0545\u0546\5\u00d2j\2\u0546\u00d1")
        buf.write("\3\2\2\2\u0547\u054c\5\u00d4k\2\u0548\u0549\7E\2\2\u0549")
        buf.write("\u054b\5\u00d4k\2\u054a\u0548\3\2\2\2\u054b\u054e\3\2")
        buf.write("\2\2\u054c\u054a\3\2\2\2\u054c\u054d\3\2\2\2\u054d\u055a")
        buf.write("\3\2\2\2\u054e\u054c\3\2\2\2\u054f\u0554\5\u00d4k\2\u0550")
        buf.write("\u0551\7F\2\2\u0551\u0553\5\u00d4k\2\u0552\u0550\3\2\2")
        buf.write("\2\u0553\u0556\3\2\2\2\u0554\u0552\3\2\2\2\u0554\u0555")
        buf.write("\3\2\2\2\u0555\u055a\3\2\2\2\u0556\u0554\3\2\2\2\u0557")
        buf.write("\u0558\7G\2\2\u0558\u055a\5\u00d4k\2\u0559\u0547\3\2\2")
        buf.write("\2\u0559\u054f\3\2\2\2\u0559\u0557\3\2\2\2\u055a\u00d3")
        buf.write("\3\2\2\2\u055b\u055c\7\u00b9\2\2\u055c\u055d\5\u00d2j")
        buf.write("\2\u055d\u055e\7\u00ba\2\2\u055e\u0561\3\2\2\2\u055f\u0561")
        buf.write("\5\u00d6l\2\u0560\u055b\3\2\2\2\u0560\u055f\3\2\2\2\u0561")
        buf.write("\u00d5\3\2\2\2\u0562\u0563\5\u00b8]\2\u0563\u0564\5\u00d8")
        buf.write("m\2\u0564\u0565\5\u00dan\2\u0565\u056b\3\2\2\2\u0566\u0567")
        buf.write("\5\u00c2b\2\u0567\u0568\5\u00d8m\2\u0568\u0569\5\u00da")
        buf.write("n\2\u0569\u056b\3\2\2\2\u056a\u0562\3\2\2\2\u056a\u0566")
        buf.write("\3\2\2\2\u056b\u00d7\3\2\2\2\u056c\u057c\7\u00c2\2\2\u056d")
        buf.write("\u057c\7\u00cc\2\2\u056e\u057c\7\u00c4\2\2\u056f\u057c")
        buf.write("\7\u00c3\2\2\u0570\u0571\7\u00c4\2\2\u0571\u057c\7\u00c2")
        buf.write("\2\2\u0572\u0573\7\u00c3\2\2\u0573\u057c\7\u00c2\2\2\u0574")
        buf.write("\u057c\7\u00cd\2\2\u0575\u057c\7P\2\2\u0576\u057c\7Q\2")
        buf.write("\2\u0577\u0578\7G\2\2\u0578\u057c\7Q\2\2\u0579\u057c\7")
        buf.write("R\2\2\u057a\u057c\7S\2\2\u057b\u056c\3\2\2\2\u057b\u056d")
        buf.write("\3\2\2\2\u057b\u056e\3\2\2\2\u057b\u056f\3\2\2\2\u057b")
        buf.write("\u0570\3\2\2\2\u057b\u0572\3\2\2\2\u057b\u0574\3\2\2\2")
        buf.write("\u057b\u0575\3\2\2\2\u057b\u0576\3\2\2\2\u057b\u0577\3")
        buf.write("\2\2\2\u057b\u0579\3\2\2\2\u057b\u057a\3\2\2\2\u057c\u00d9")
        buf.write("\3\2\2\2\u057d\u058e\7\34\2\2\u057e\u058e\7\u00b6\2\2")
        buf.write("\u057f\u058e\7\u00b3\2\2\u0580\u058e\7\u00b4\2\2\u0581")
        buf.write("\u058e\7\u00b5\2\2\u0582\u058e\7\u00b7\2\2\u0583\u058e")
        buf.write("\7\u00a2\2\2\u0584\u058e\7\u00a3\2\2\u0585\u058e\5\u00fc")
        buf.write("\177\2\u0586\u058e\5\u00dep\2\u0587\u0588\7\u00b9\2\2")
        buf.write("\u0588\u0589\5\u00b2Z\2\u0589\u058a\7\u00ba\2\2\u058a")
        buf.write("\u058e\3\2\2\2\u058b\u058e\5\u00dco\2\u058c\u058e\5\u00fa")
        buf.write("~\2\u058d\u057d\3\2\2\2\u058d\u057e\3\2\2\2\u058d\u057f")
        buf.write("\3\2\2\2\u058d\u0580\3\2\2\2\u058d\u0581\3\2\2\2\u058d")
        buf.write("\u0582\3\2\2\2\u058d\u0583\3\2\2\2\u058d\u0584\3\2\2\2")
        buf.write("\u058d\u0585\3\2\2\2\u058d\u0586\3\2\2\2\u058d\u0587\3")
        buf.write("\2\2\2\u058d\u058b\3\2\2\2\u058d\u058c\3\2\2\2\u058e\u00db")
        buf.write("\3\2\2\2\u058f\u0590\7\u00b9\2\2\u0590\u0595\5\u00dan")
        buf.write("\2\u0591\u0592\7\u00c0\2\2\u0592\u0594\5\u00dan\2\u0593")
        buf.write("\u0591\3\2\2\2\u0594\u0597\3\2\2\2\u0595\u0593\3\2\2\2")
        buf.write("\u0595\u0596\3\2\2\2\u0596\u0598\3\2\2\2\u0597\u0595\3")
        buf.write("\2\2\2\u0598\u0599\7\u00ba\2\2\u0599\u00dd\3\2\2\2\u059a")
        buf.write("\u059b\5\u0100\u0081\2\u059b\u059c\5\u00fe\u0080\2\u059c")
        buf.write("\u00df\3\2\2\2\u059d\u059e\7\67\2\2\u059e\u059f\7a\2\2")
        buf.write("\u059f\u05a0\7b\2\2\u05a0\u05a6\5\u00e2r\2\u05a1\u05a2")
        buf.write("\7\67\2\2\u05a2\u05a6\7g\2\2\u05a3\u05a4\7\67\2\2\u05a4")
        buf.write("\u05a6\5\u00d2j\2\u05a5\u059d\3\2\2\2\u05a5\u05a1\3\2")
        buf.write("\2\2\u05a5\u05a3\3\2\2\2\u05a6\u00e1\3\2\2\2\u05a7\u05ac")
        buf.write("\5\u00e4s\2\u05a8\u05a9\7\u00cf\2\2\u05a9\u05ab\5\u00e4")
        buf.write("s\2\u05aa\u05a8\3\2\2\2\u05ab\u05ae\3\2\2\2\u05ac\u05aa")
        buf.write("\3\2\2\2\u05ac\u05ad\3\2\2\2\u05ad\u00e3\3\2\2\2\u05ae")
        buf.write("\u05ac\3\2\2\2\u05af\u05b0\5\u0100\u0081\2\u05b0\u05b1")
        buf.write("\5\u00e8u\2\u05b1\u05b2\5\u00e6t\2\u05b2\u00e5\3\2\2\2")
        buf.write("\u05b3\u05c0\5\u0100\u0081\2\u05b4\u05b5\7\u00b9\2\2\u05b5")
        buf.write("\u05ba\5\u0100\u0081\2\u05b6\u05b7\7\u00c0\2\2\u05b7\u05b9")
        buf.write("\5\u0100\u0081\2\u05b8\u05b6\3\2\2\2\u05b9\u05bc\3\2\2")
        buf.write("\2\u05ba\u05b8\3\2\2\2\u05ba\u05bb\3\2\2\2\u05bb\u05bd")
        buf.write("\3\2\2\2\u05bc\u05ba\3\2\2\2\u05bd\u05be\7\u00b9\2\2\u05be")
        buf.write("\u05c0\3\2\2\2\u05bf\u05b3\3\2\2\2\u05bf\u05b4\3\2\2\2")
        buf.write("\u05c0\u00e7\3\2\2\2\u05c1\u05c2\t\17\2\2\u05c2\u00e9")
        buf.write("\3\2\2\2\u05c3\u05c4\7Y\2\2\u05c4\u05c5\7C\2\2\u05c5\u05c8")
        buf.write("\5\u00b4[\2\u05c6\u05c7\7]\2\2\u05c7\u05c9\5\u00d2j\2")
        buf.write("\u05c8\u05c6\3\2\2\2\u05c8\u05c9\3\2\2\2\u05c9\u05e7\3")
        buf.write("\2\2\2\u05ca\u05cb\7Y\2\2\u05cb\u05cc\7C\2\2\u05cc\u05cd")
        buf.write("\7^\2\2\u05cd\u05ce\7\u00b9\2\2\u05ce\u05d3\5\u00b8]\2")
        buf.write("\u05cf\u05d0\7\u00c0\2\2\u05d0\u05d2\5\u00b8]\2\u05d1")
        buf.write("\u05cf\3\2\2\2\u05d2\u05d5\3\2\2\2\u05d3\u05d1\3\2\2\2")
        buf.write("\u05d3\u05d4\3\2\2\2\u05d4\u05d6\3\2\2\2\u05d5\u05d3\3")
        buf.write("\2\2\2\u05d6\u05d7\7\u00ba\2\2\u05d7\u05e7\3\2\2\2\u05d8")
        buf.write("\u05d9\7Y\2\2\u05d9\u05da\7C\2\2\u05da\u05db\7i\2\2\u05db")
        buf.write("\u05dc\7\u00b9\2\2\u05dc\u05e1\5\u00b8]\2\u05dd\u05de")
        buf.write("\7\u00c0\2\2\u05de\u05e0\5\u00b8]\2\u05df\u05dd\3\2\2")
        buf.write("\2\u05e0\u05e3\3\2\2\2\u05e1\u05df\3\2\2\2\u05e1\u05e2")
        buf.write("\3\2\2\2\u05e2\u05e4\3\2\2\2\u05e3\u05e1\3\2\2\2\u05e4")
        buf.write("\u05e5\7\u00ba\2\2\u05e5\u05e7\3\2\2\2\u05e6\u05c3\3\2")
        buf.write("\2\2\u05e6\u05ca\3\2\2\2\u05e6\u05d8\3\2\2\2\u05e7\u00eb")
        buf.write("\3\2\2\2\u05e8\u05e9\7B\2\2\u05e9\u05ea\7C\2\2\u05ea\u05eb")
        buf.write("\5\u00eex\2\u05eb\u00ed\3\2\2\2\u05ec\u05f1\5\u00f0y\2")
        buf.write("\u05ed\u05ee\7\u00c0\2\2\u05ee\u05f0\5\u00f0y\2\u05ef")
        buf.write("\u05ed\3\2\2\2\u05f0\u05f3\3\2\2\2\u05f1\u05ef\3\2\2\2")
        buf.write("\u05f1\u05f2\3\2\2\2\u05f2\u00ef\3\2\2\2\u05f3\u05f1\3")
        buf.write("\2\2\2\u05f4\u05f6\5\u00b8]\2\u05f5\u05f7\t\20\2\2\u05f6")
        buf.write("\u05f5\3\2\2\2\u05f6\u05f7\3\2\2\2\u05f7\u05fa\3\2\2\2")
        buf.write("\u05f8\u05f9\7V\2\2\u05f9\u05fb\t\21\2\2\u05fa\u05f8\3")
        buf.write("\2\2\2\u05fa\u05fb\3\2\2\2\u05fb\u0605\3\2\2\2\u05fc\u05fe")
        buf.write("\5\u00c2b\2\u05fd\u05ff\t\20\2\2\u05fe\u05fd\3\2\2\2\u05fe")
        buf.write("\u05ff\3\2\2\2\u05ff\u0602\3\2\2\2\u0600\u0601\7V\2\2")
        buf.write("\u0601\u0603\t\21\2\2\u0602\u0600\3\2\2\2\u0602\u0603")
        buf.write("\3\2\2\2\u0603\u0605\3\2\2\2\u0604\u05f4\3\2\2\2\u0604")
        buf.write("\u05fc\3\2\2\2\u0605\u00f1\3\2\2\2\u0606\u0607\7D\2\2")
        buf.write("\u0607\u060b\7\u00b3\2\2\u0608\u0609\7D\2\2\u0609\u060b")
        buf.write("\5\u00fa~\2\u060a\u0606\3\2\2\2\u060a\u0608\3\2\2\2\u060b")
        buf.write("\u00f3\3\2\2\2\u060c\u060d\7`\2\2\u060d\u0611\7\u00b3")
        buf.write("\2\2\u060e\u060f\7`\2\2\u060f\u0611\5\u00fa~\2\u0610\u060c")
        buf.write("\3\2\2\2\u0610\u060e\3\2\2\2\u0611\u00f5\3\2\2\2\u0612")
        buf.write("\u0613\7Z\2\2\u0613\u0614\7[\2\2\u0614\u00f7\3\2\2\2\u0615")
        buf.write("\u0616\7\21\2\2\u0616\u0618\t\22\2\2\u0617\u0615\3\2\2")
        buf.write("\2\u0618\u061b\3\2\2\2\u0619\u0617\3\2\2\2\u0619\u061a")
        buf.write("\3\2\2\2\u061a\u00f9\3\2\2\2\u061b\u0619\3\2\2\2\u061c")
        buf.write("\u061d\7\u00c9\2\2\u061d\u061e\5\u0092J\2\u061e\u00fb")
        buf.write("\3\2\2\2\u061f\u0661\7}\2\2\u0620\u0661\7~\2\2\u0621\u0661")
        buf.write("\7\177\2\2\u0622\u0661\7\u0080\2\2\u0623\u0661\7\u0081")
        buf.write("\2\2\u0624\u0661\7\u0082\2\2\u0625\u0661\7\u0083\2\2\u0626")
        buf.write("\u0661\7\u0084\2\2\u0627\u0661\7\u0085\2\2\u0628\u0661")
        buf.write("\7\u0086\2\2\u0629\u0661\7\u0087\2\2\u062a\u062b\7\u0088")
        buf.write("\2\2\u062b\u062c\7\u00c9\2\2\u062c\u0661\5\u00fe\u0080")
        buf.write("\2\u062d\u062e\7\u0089\2\2\u062e\u062f\7\u00c9\2\2\u062f")
        buf.write("\u0661\5\u00fe\u0080\2\u0630\u0631\7\u008a\2\2\u0631\u0632")
        buf.write("\7\u00c9\2\2\u0632\u0661\5\u00fe\u0080\2\u0633\u0634\7")
        buf.write("\u008b\2\2\u0634\u0635\7\u00c9\2\2\u0635\u0661\5\u00fe")
        buf.write("\u0080\2\u0636\u0637\7\u008c\2\2\u0637\u0638\7\u00c9\2")
        buf.write("\2\u0638\u0661\5\u00fe\u0080\2\u0639\u063a\7\u008d\2\2")
        buf.write("\u063a\u063b\7\u00c9\2\2\u063b\u0661\5\u00fe\u0080\2\u063c")
        buf.write("\u0661\7\u008e\2\2\u063d\u0661\7\u008f\2\2\u063e\u0661")
        buf.write("\7\u0090\2\2\u063f\u0640\7\u0091\2\2\u0640\u0641\7\u00c9")
        buf.write("\2\2\u0641\u0661\5\u00fe\u0080\2\u0642\u0643\7\u0092\2")
        buf.write("\2\u0643\u0644\7\u00c9\2\2\u0644\u0661\5\u00fe\u0080\2")
        buf.write("\u0645\u0661\7\u0093\2\2\u0646\u0661\7\u0094\2\2\u0647")
        buf.write("\u0661\7\u0095\2\2\u0648\u0649\7\u0096\2\2\u0649\u064a")
        buf.write("\7\u00c9\2\2\u064a\u0661\5\u00fe\u0080\2\u064b\u064c\7")
        buf.write("\u0097\2\2\u064c\u064d\7\u00c9\2\2\u064d\u0661\5\u00fe")
        buf.write("\u0080\2\u064e\u0661\7\u0098\2\2\u064f\u0661\7\u0099\2")
        buf.write("\2\u0650\u0661\7\u009a\2\2\u0651\u0652\7\u009b\2\2\u0652")
        buf.write("\u0653\7\u00c9\2\2\u0653\u0661\5\u00fe\u0080\2\u0654\u0655")
        buf.write("\7\u009c\2\2\u0655\u0656\7\u00c9\2\2\u0656\u0661\5\u00fe")
        buf.write("\u0080\2\u0657\u0661\7\u009d\2\2\u0658\u0661\7\u009e\2")
        buf.write("\2\u0659\u0661\7\u009f\2\2\u065a\u065b\7\u00a0\2\2\u065b")
        buf.write("\u065c\7\u00c9\2\2\u065c\u0661\5\u00fe\u0080\2\u065d\u065e")
        buf.write("\7\u00a1\2\2\u065e\u065f\7\u00c9\2\2\u065f\u0661\5\u00fe")
        buf.write("\u0080\2\u0660\u061f\3\2\2\2\u0660\u0620\3\2\2\2\u0660")
        buf.write("\u0621\3\2\2\2\u0660\u0622\3\2\2\2\u0660\u0623\3\2\2\2")
        buf.write("\u0660\u0624\3\2\2\2\u0660\u0625\3\2\2\2\u0660\u0626\3")
        buf.write("\2\2\2\u0660\u0627\3\2\2\2\u0660\u0628\3\2\2\2\u0660\u0629")
        buf.write("\3\2\2\2\u0660\u062a\3\2\2\2\u0660\u062d\3\2\2\2\u0660")
        buf.write("\u0630\3\2\2\2\u0660\u0633\3\2\2\2\u0660\u0636\3\2\2\2")
        buf.write("\u0660\u0639\3\2\2\2\u0660\u063c\3\2\2\2\u0660\u063d\3")
        buf.write("\2\2\2\u0660\u063e\3\2\2\2\u0660\u063f\3\2\2\2\u0660\u0642")
        buf.write("\3\2\2\2\u0660\u0645\3\2\2\2\u0660\u0646\3\2\2\2\u0660")
        buf.write("\u0647\3\2\2\2\u0660\u0648\3\2\2\2\u0660\u064b\3\2\2\2")
        buf.write("\u0660\u064e\3\2\2\2\u0660\u064f\3\2\2\2\u0660\u0650\3")
        buf.write("\2\2\2\u0660\u0651\3\2\2\2\u0660\u0654\3\2\2\2\u0660\u0657")
        buf.write("\3\2\2\2\u0660\u0658\3\2\2\2\u0660\u0659\3\2\2\2\u0660")
        buf.write("\u065a\3\2\2\2\u0660\u065d\3\2\2\2\u0661\u00fd\3\2\2\2")
        buf.write("\u0662\u0664\t\b\2\2\u0663\u0662\3\2\2\2\u0663\u0664\3")
        buf.write("\2\2\2\u0664\u0665\3\2\2\2\u0665\u0666\7\u00b3\2\2\u0666")
        buf.write("\u00ff\3\2\2\2\u0667\u0668\5\u0116\u008c\2\u0668\u0101")
        buf.write("\3\2\2\2\u0669\u066a\7\u00b2\2\2\u066a\u066b\5\u0104\u0083")
        buf.write("\2\u066b\u066c\7\u00be\2\2\u066c\u0674\3\2\2\2\u066d\u066e")
        buf.write("\7\u00bd\2\2\u066e\u066f\7\u00a4\2\2\u066f\u0670\5\u00fa")
        buf.write("~\2\u0670\u0671\5\u0104\u0083\2\u0671\u0672\7\u00be\2")
        buf.write("\2\u0672\u0674\3\2\2\2\u0673\u0669\3\2\2\2\u0673\u066d")
        buf.write("\3\2\2\2\u0674\u0103\3\2\2\2\u0675\u0676\7Q\2\2\u0676")
        buf.write("\u0678\5\u0106\u0084\2\u0677\u0675\3\2\2\2\u0677\u0678")
        buf.write("\3\2\2\2\u0678\u067b\3\2\2\2\u0679\u067a\7\u00b0\2\2\u067a")
        buf.write("\u067c\5\u0108\u0085\2\u067b\u0679\3\2\2\2\u067b\u067c")
        buf.write("\3\2\2\2\u067c\u0681\3\2\2\2\u067d\u067e\7\67\2\2\u067e")
        buf.write("\u067f\7\u00af\2\2\u067f\u0680\7\u00c2\2\2\u0680\u0682")
        buf.write("\7\u00b7\2\2\u0681\u067d\3\2\2\2\u0681\u0682\3\2\2\2\u0682")
        buf.write("\u0687\3\2\2\2\u0683\u0684\7\67\2\2\u0684\u0685\7a\2\2")
        buf.write("\u0685\u0686\7b\2\2\u0686\u0688\5\u00e2r\2\u0687\u0683")
        buf.write("\3\2\2\2\u0687\u0688\3\2\2\2\u0688\u0692\3\2\2\2\u0689")
        buf.write("\u068a\7\67\2\2\u068a\u0690\7\u00ad\2\2\u068b\u068c\7")
        buf.write("\u00b9\2\2\u068c\u068d\7\u00ae\2\2\u068d\u068e\7\u00c2")
        buf.write("\2\2\u068e\u068f\7\u00b3\2\2\u068f\u0691\7\u00ba\2\2\u0690")
        buf.write("\u068b\3\2\2\2\u0690\u0691\3\2\2\2\u0691\u0693\3\2\2\2")
        buf.write("\u0692\u0689\3\2\2\2\u0692\u0693\3\2\2\2\u0693\u069b\3")
        buf.write("\2\2\2\u0694\u0695\7\67\2\2\u0695\u0696\7\u00ac\2\2\u0696")
        buf.write("\u0697\7Q\2\2\u0697\u0698\7\u00b9\2\2\u0698\u0699\5\u0112")
        buf.write("\u008a\2\u0699\u069a\7\u00ba\2\2\u069a\u069c\3\2\2\2\u069b")
        buf.write("\u0694\3\2\2\2\u069b\u069c\3\2\2\2\u069c\u06a1\3\2\2\2")
        buf.write("\u069d\u069e\7\67\2\2\u069e\u069f\7\u00ac\2\2\u069f\u06a0")
        buf.write("\7\u00c2\2\2\u06a0\u06a2\7\u00b7\2\2\u06a1\u069d\3\2\2")
        buf.write("\2\u06a1\u06a2\3\2\2\2\u06a2\u06a7\3\2\2\2\u06a3\u06a4")
        buf.write("\7\67\2\2\u06a4\u06a5\7\u00ab\2\2\u06a5\u06a6\7\u00c2")
        buf.write("\2\2\u06a6\u06a8\7\u00b7\2\2\u06a7\u06a3\3\2\2\2\u06a7")
        buf.write("\u06a8\3\2\2\2\u06a8\u06ad\3\2\2\2\u06a9\u06aa\7\67\2")
        buf.write("\2\u06aa\u06ab\7\u00aa\2\2\u06ab\u06ac\7\u00c2\2\2\u06ac")
        buf.write("\u06ae\7\u00b7\2\2\u06ad\u06a9\3\2\2\2\u06ad\u06ae\3\2")
        buf.write("\2\2\u06ae\u06b0\3\2\2\2\u06af\u06b1\5\u00f2z\2\u06b0")
        buf.write("\u06af\3\2\2\2\u06b0\u06b1\3\2\2\2\u06b1\u06b4\3\2\2\2")
        buf.write("\u06b2\u06b3\7\60\2\2\u06b3\u06b5\5\u010e\u0088\2\u06b4")
        buf.write("\u06b2\3\2\2\2\u06b4\u06b5\3\2\2\2\u06b5\u0105\3\2\2\2")
        buf.write("\u06b6\u06b7\t\23\2\2\u06b7\u06b8\7\u00a9\2\2\u06b8\u0107")
        buf.write("\3\2\2\2\u06b9\u06be\5\u010a\u0086\2\u06ba\u06bb\7\u00c0")
        buf.write("\2\2\u06bb\u06bd\5\u0108\u0085\2\u06bc\u06ba\3\2\2\2\u06bd")
        buf.write("\u06c0\3\2\2\2\u06be\u06bc\3\2\2\2\u06be\u06bf\3\2\2\2")
        buf.write("\u06bf\u0109\3\2\2\2\u06c0\u06be\3\2\2\2\u06c1\u06db\5")
        buf.write("\u0114\u008b\2\u06c2\u06c3\7\u00b9\2\2\u06c3\u06c6\5\u010c")
        buf.write("\u0087\2\u06c4\u06c5\7A\2\2\u06c5\u06c7\5\u00d2j\2\u06c6")
        buf.write("\u06c4\3\2\2\2\u06c6\u06c7\3\2\2\2\u06c7\u06cc\3\2\2\2")
        buf.write("\u06c8\u06c9\7?\2\2\u06c9\u06ca\7\u00b1\2\2\u06ca\u06cb")
        buf.write("\7\u00c2\2\2\u06cb\u06cd\5\u0114\u008b\2\u06cc\u06c8\3")
        buf.write("\2\2\2\u06cc\u06cd\3\2\2\2\u06cd\u06d1\3\2\2\2\u06ce\u06cf")
        buf.write("\7B\2\2\u06cf\u06d0\7C\2\2\u06d0\u06d2\5\u00eex\2\u06d1")
        buf.write("\u06ce\3\2\2\2\u06d1\u06d2\3\2\2\2\u06d2\u06d4\3\2\2\2")
        buf.write("\u06d3\u06d5\5\u00f2z\2\u06d4\u06d3\3\2\2\2\u06d4\u06d5")
        buf.write("\3\2\2\2\u06d5\u06d7\3\2\2\2\u06d6\u06d8\5\u00f4{\2\u06d7")
        buf.write("\u06d6\3\2\2\2\u06d7\u06d8\3\2\2\2\u06d8\u06d9\3\2\2\2")
        buf.write("\u06d9\u06da\7\u00ba\2\2\u06da\u06dc\3\2\2\2\u06db\u06c2")
        buf.write("\3\2\2\2\u06db\u06dc\3\2\2\2\u06dc\u010b\3\2\2\2\u06dd")
        buf.write("\u06e2\5\u0114\u008b\2\u06de\u06df\7\u00c0\2\2\u06df\u06e1")
        buf.write("\5\u010c\u0087\2\u06e0\u06de\3\2\2\2\u06e1\u06e4\3\2\2")
        buf.write("\2\u06e2\u06e0\3\2\2\2\u06e2\u06e3\3\2\2\2\u06e3\u010d")
        buf.write("\3\2\2\2\u06e4\u06e2\3\2\2\2\u06e5\u06e8\5\u0110\u0089")
        buf.write("\2\u06e6\u06e7\7\u00c0\2\2\u06e7\u06e9\5\u010e\u0088\2")
        buf.write("\u06e8\u06e6\3\2\2\2\u06e8\u06e9\3\2\2\2\u06e9\u010f\3")
        buf.write("\2\2\2\u06ea\u06eb\t\24\2\2\u06eb\u0111\3\2\2\2\u06ec")
        buf.write("\u06ef\7\u00b7\2\2\u06ed\u06ee\7\u00c0\2\2\u06ee\u06f0")
        buf.write("\5\u0112\u008a\2\u06ef\u06ed\3\2\2\2\u06ef\u06f0\3\2\2")
        buf.write("\2\u06f0\u0113\3\2\2\2\u06f1\u06f6\5\u0116\u008c\2\u06f2")
        buf.write("\u06f3\7\u00c1\2\2\u06f3\u06f5\5\u0114\u008b\2\u06f4\u06f2")
        buf.write("\3\2\2\2\u06f5\u06f8\3\2\2\2\u06f6\u06f4\3\2\2\2\u06f6")
        buf.write("\u06f7\3\2\2\2\u06f7\u0115\3\2\2\2\u06f8\u06f6\3\2\2\2")
        buf.write("\u06f9\u06fa\t\25\2\2\u06fa\u0117\3\2\2\2\u06fb\u06fc")
        buf.write("\t\26\2\2\u06fc\u0119\3\2\2\2\u00b1\u0124\u0134\u013b")
        buf.write("\u0142\u0146\u014c\u0150\u0158\u0161\u0168\u0171\u0178")
        buf.write("\u0181\u0188\u018e\u0192\u01a7\u01b0\u01b4\u01ba\u01ca")
        buf.write("\u01d2\u01d7\u01e2\u01e8\u01f0\u01f4\u01f6\u01ff\u0208")
        buf.write("\u020d\u0211\u0215\u0219\u021b\u0223\u022c\u0232\u023d")
        buf.write("\u0247\u024a\u024e\u0253\u025d\u0265\u0268\u026b\u0273")
        buf.write("\u027e\u0298\u029f\u02a8\u02b6\u02bc\u02bf\u02c6\u02dd")
        buf.write("\u02e0\u02e3\u02e7\u0308\u0314\u031f\u0324\u0329\u032e")
        buf.write("\u0335\u0342\u0346\u034a\u034c\u0350\u0362\u0377\u0387")
        buf.write("\u038d\u03af\u03bb\u03bd\u03ca\u03cf\u03d6\u03dc\u03df")
        buf.write("\u03e4\u03ee\u03f5\u03fd\u040b\u040d\u0415\u0424\u042b")
        buf.write("\u0438\u043b\u043e\u0441\u0444\u0447\u044a\u044d\u0452")
        buf.write("\u0459\u045c\u045f\u0464\u046b\u0470\u0474\u047a\u047d")
        buf.write("\u0484\u0489\u048e\u0492\u049a\u049f\u04a3\u04a5\u051a")
        buf.write("\u0522\u0529\u052c\u053d\u054c\u0554\u0559\u0560\u056a")
        buf.write("\u057b\u058d\u0595\u05a5\u05ac\u05ba\u05bf\u05c8\u05d3")
        buf.write("\u05e1\u05e6\u05f1\u05f6\u05fa\u05fe\u0602\u0604\u060a")
        buf.write("\u0610\u0619\u0660\u0663\u0673\u0677\u067b\u0681\u0687")
        buf.write("\u0690\u0692\u069b\u06a1\u06a7\u06ad\u06b0\u06b4\u06be")
        buf.write("\u06c6\u06cc\u06d1\u06d4\u06d7\u06db\u06e2\u06e8\u06ef")
        buf.write("\u06f6")
        return buf.getvalue()


class ApexParser ( Parser ):

    grammarFileName = "ApexParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'abstract'", "'after'", "'before'", "'break'", 
                     "'catch'", "'class'", "'continue'", "'delete'", "'do'", 
                     "'else'", "'enum'", "'extends'", "'final'", "'finally'", 
                     "'for'", "'get'", "'global'", "'if'", "'implements'", 
                     "'inherited'", "'insert'", "'instanceof'", "'interface'", 
                     "'merge'", "'new'", "'null'", "'on'", "'override'", 
                     "'private'", "'protected'", "'public'", "'return'", 
                     "'system.runas'", "'set'", "'sharing'", "'static'", 
                     "'super'", "'switch'", "'testmethod'", "'this'", "'throw'", 
                     "'transient'", "'trigger'", "'try'", "'undelete'", 
                     "'update'", "'upsert'", "'virtual'", "'void'", "'webservice'", 
                     "'when'", "'while'", "'with'", "'without'", "'list'", 
                     "'map'", "'select'", "'count'", "'from'", "'as'", "'using'", 
                     "'scope'", "'where'", "'order'", "'by'", "'limit'", 
                     "'and'", "'or'", "'not'", "'avg'", "'count_distinct'", 
                     "'min'", "'max'", "'sum'", "'typeof'", "'end'", "'then'", 
                     "'like'", "'in'", "'includes'", "'excludes'", "'asc'", 
                     "'desc'", "'nulls'", "'first'", "'last'", "'group'", 
                     "'all'", "'rows'", "'view'", "'having'", "'rollup'", 
                     "'tolabel'", "'offset'", "'data'", "'category'", "'at'", 
                     "'above'", "'below'", "'above_or_below'", "'security_enforced'", 
                     "'reference'", "'cube'", "'format'", "'tracking'", 
                     "'viewstat'", "'custom'", "'standard'", "'calendar_month'", 
                     "'calendar_quarter'", "'calendar_year'", "'day_in_month'", 
                     "'day_in_week'", "'day_in_year'", "'day_only'", "'fiscal_month'", 
                     "'fiscal_quarter'", "'fiscal_year'", "'hour_in_day'", 
                     "'week_in_month'", "'week_in_year'", "'converttimezone'", 
                     "'yesterday'", "'today'", "'tomorrow'", "'last_week'", 
                     "'this_week'", "'next_week'", "'last_month'", "'this_month'", 
                     "'next_month'", "'last_90_days'", "'next_90_days'", 
                     "'last_n_days'", "'next_n_days'", "'next_n_weeks'", 
                     "'last_n_weeks'", "'next_n_months'", "'last_n_months'", 
                     "'this_quarter'", "'last_quarted'", "'next_quarter'", 
                     "'next_n_quarters'", "'last_n_quarters'", "'this_year'", 
                     "'last_year'", "'next_year'", "'next_n_years'", "'last_n_years'", 
                     "'this_fiscal_quarter'", "'last_fiscal_quarter'", "'next_fiscal_quarter'", 
                     "'next_n_fiscal_quarters'", "'last_n_fiscal_quarters'", 
                     "'this_fiscal_year'", "'last_fiscal_year'", "'next_fiscal_year'", 
                     "'next_n_fiscal_years'", "'last_n_fiscal_years'", "<INVALID>", 
                     "<INVALID>", "'find'", "'email'", "'name'", "'phone'", 
                     "'sidebar'", "'fields'", "'metadata'", "'pricebookid'", 
                     "'network'", "'snippet'", "'target_length'", "'division'", 
                     "'returning'", "'listview'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'('", "')'", "'{'", "'}'", "'['", "']'", 
                     "';'", "','", "'.'", "'='", "'>'", "'<'", "'!'", "'~'", 
                     "'?.'", "'?'", "':'", "'=='", "'==='", "'!='", "'<>'", 
                     "'!=='", "'&&'", "'||'", "'++'", "'--'", "'+'", "'-'", 
                     "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'=>'", "'+='", 
                     "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", 
                     "'<<='", "'>>='", "'>>>='", "'@'" ]

    symbolicNames = [ "<INVALID>", "ABSTRACT", "AFTER", "BEFORE", "BREAK", 
                      "CATCH", "CLASS", "CONTINUE", "DELETE", "DO", "ELSE", 
                      "ENUM", "EXTENDS", "FINAL", "FINALLY", "FOR", "GET", 
                      "GLOBAL", "IF", "IMPLEMENTS", "INHERITED", "INSERT", 
                      "INSTANCEOF", "INTERFACE", "MERGE", "NEW", "NULL", 
                      "ON", "OVERRIDE", "PRIVATE", "PROTECTED", "PUBLIC", 
                      "RETURN", "SYSTEMRUNAS", "SET", "SHARING", "STATIC", 
                      "SUPER", "SWITCH", "TESTMETHOD", "THIS", "THROW", 
                      "TRANSIENT", "TRIGGER", "TRY", "UNDELETE", "UPDATE", 
                      "UPSERT", "VIRTUAL", "VOID", "WEBSERVICE", "WHEN", 
                      "WHILE", "WITH", "WITHOUT", "LIST", "MAP", "SELECT", 
                      "COUNT", "FROM", "AS", "USING", "SCOPE", "WHERE", 
                      "ORDER", "BY", "LIMIT", "SOQLAND", "SOQLOR", "NOT", 
                      "AVG", "COUNT_DISTINCT", "MIN", "MAX", "SUM", "TYPEOF", 
                      "END", "THEN", "LIKE", "IN", "INCLUDES", "EXCLUDES", 
                      "ASC", "DESC", "NULLS", "FIRST", "LAST", "GROUP", 
                      "ALL", "ROWS", "VIEW", "HAVING", "ROLLUP", "TOLABEL", 
                      "OFFSET", "DATA", "CATEGORY", "AT", "ABOVE", "BELOW", 
                      "ABOVE_OR_BELOW", "SECURITY_ENFORCED", "REFERENCE", 
                      "CUBE", "FORMAT", "TRACKING", "VIEWSTAT", "CUSTOM", 
                      "STANDARD", "CALENDAR_MONTH", "CALENDAR_QUARTER", 
                      "CALENDAR_YEAR", "DAY_IN_MONTH", "DAY_IN_WEEK", "DAY_IN_YEAR", 
                      "DAY_ONLY", "FISCAL_MONTH", "FISCAL_QUARTER", "FISCAL_YEAR", 
                      "HOUR_IN_DAY", "WEEK_IN_MONTH", "WEEK_IN_YEAR", "CONVERT_TIMEZONE", 
                      "YESTERDAY", "TODAY", "TOMORROW", "LAST_WEEK", "THIS_WEEK", 
                      "NEXT_WEEK", "LAST_MONTH", "THIS_MONTH", "NEXT_MONTH", 
                      "LAST_90_DAYS", "NEXT_90_DAYS", "LAST_N_DAYS_N", "NEXT_N_DAYS_N", 
                      "NEXT_N_WEEKS_N", "LAST_N_WEEKS_N", "NEXT_N_MONTHS_N", 
                      "LAST_N_MONTHS_N", "THIS_QUARTER", "LAST_QUARTER", 
                      "NEXT_QUARTER", "NEXT_N_QUARTERS_N", "LAST_N_QUARTERS_N", 
                      "THIS_YEAR", "LAST_YEAR", "NEXT_YEAR", "NEXT_N_YEARS_N", 
                      "LAST_N_YEARS_N", "THIS_FISCAL_QUARTER", "LAST_FISCAL_QUARTER", 
                      "NEXT_FISCAL_QUARTER", "NEXT_N_FISCAL_QUARTERS_N", 
                      "LAST_N_FISCAL_QUARTERS_N", "THIS_FISCAL_YEAR", "LAST_FISCAL_YEAR", 
                      "NEXT_FISCAL_YEAR", "NEXT_N_FISCAL_YEARS_N", "LAST_N_FISCAL_YEARS_N", 
                      "DateLiteral", "DateTimeLiteral", "FIND", "EMAIL", 
                      "NAME", "PHONE", "SIDEBAR", "FIELDS", "METADATA", 
                      "PRICEBOOKID", "NETWORK", "SNIPPET", "TARGET_LENGTH", 
                      "DIVISION", "RETURNING", "LISTVIEW", "FindLiteral", 
                      "IntegerLiteral", "LongLiteral", "NumberLiteral", 
                      "BooleanLiteral", "StringLiteral", "NullLiteral", 
                      "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
                      "RBRACK", "SEMI", "COMMA", "DOT", "ASSIGN", "GT", 
                      "LT", "BANG", "TILDE", "QUESTIONDOT", "QUESTION", 
                      "COLON", "EQUAL", "TRIPLEEQUAL", "NOTEQUAL", "LESSANDGREATER", 
                      "TRIPLENOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", 
                      "SUB", "MUL", "DIV", "BITAND", "BITOR", "CARET", "MOD", 
                      "MAPTO", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", 
                      "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                      "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", 
                      "ATSIGN", "Identifier", "WS", "DOC_COMMENT", "COMMENT", 
                      "LINE_COMMENT" ]

    RULE_triggerUnit = 0
    RULE_triggerCase = 1
    RULE_compilationUnit = 2
    RULE_typeDeclaration = 3
    RULE_classDeclaration = 4
    RULE_enumDeclaration = 5
    RULE_enumConstants = 6
    RULE_interfaceDeclaration = 7
    RULE_typeList = 8
    RULE_classBody = 9
    RULE_interfaceBody = 10
    RULE_classBodyDeclaration = 11
    RULE_modifier = 12
    RULE_memberDeclaration = 13
    RULE_methodDeclaration = 14
    RULE_constructorDeclaration = 15
    RULE_fieldDeclaration = 16
    RULE_propertyDeclaration = 17
    RULE_interfaceMethodDeclaration = 18
    RULE_variableDeclarators = 19
    RULE_variableDeclarator = 20
    RULE_arrayInitializer = 21
    RULE_typeRef = 22
    RULE_arraySubscripts = 23
    RULE_typeName = 24
    RULE_typeArguments = 25
    RULE_formalParameters = 26
    RULE_formalParameterList = 27
    RULE_formalParameter = 28
    RULE_qualifiedName = 29
    RULE_literal = 30
    RULE_annotation = 31
    RULE_elementValuePairs = 32
    RULE_elementValuePair = 33
    RULE_elementValue = 34
    RULE_elementValueArrayInitializer = 35
    RULE_block = 36
    RULE_localVariableDeclarationStatement = 37
    RULE_localVariableDeclaration = 38
    RULE_statement = 39
    RULE_ifStatement = 40
    RULE_switchStatement = 41
    RULE_whenControl = 42
    RULE_whenValue = 43
    RULE_whenLiteral = 44
    RULE_forStatement = 45
    RULE_whileStatement = 46
    RULE_doWhileStatement = 47
    RULE_tryStatement = 48
    RULE_returnStatement = 49
    RULE_throwStatement = 50
    RULE_breakStatement = 51
    RULE_continueStatement = 52
    RULE_insertStatement = 53
    RULE_updateStatement = 54
    RULE_deleteStatement = 55
    RULE_undeleteStatement = 56
    RULE_upsertStatement = 57
    RULE_mergeStatement = 58
    RULE_runAsStatement = 59
    RULE_expressionStatement = 60
    RULE_propertyBlock = 61
    RULE_getter = 62
    RULE_setter = 63
    RULE_catchClause = 64
    RULE_finallyBlock = 65
    RULE_forControl = 66
    RULE_forInit = 67
    RULE_enhancedForControl = 68
    RULE_forUpdate = 69
    RULE_parExpression = 70
    RULE_expressionList = 71
    RULE_expression = 72
    RULE_primary = 73
    RULE_methodCall = 74
    RULE_dotMethodCall = 75
    RULE_creator = 76
    RULE_createdName = 77
    RULE_idCreatedNamePair = 78
    RULE_noRest = 79
    RULE_classCreatorRest = 80
    RULE_arrayCreatorRest = 81
    RULE_mapCreatorRest = 82
    RULE_mapCreatorRestPair = 83
    RULE_setCreatorRest = 84
    RULE_arguments = 85
    RULE_soqlLiteral = 86
    RULE_query = 87
    RULE_subQuery = 88
    RULE_selectList = 89
    RULE_selectEntry = 90
    RULE_fieldName = 91
    RULE_fromNameList = 92
    RULE_subFieldList = 93
    RULE_subFieldEntry = 94
    RULE_soqlFieldsParameter = 95
    RULE_soqlFunction = 96
    RULE_dateFieldName = 97
    RULE_typeOf = 98
    RULE_whenClause = 99
    RULE_elseClause = 100
    RULE_fieldNameList = 101
    RULE_usingScope = 102
    RULE_whereClause = 103
    RULE_logicalExpression = 104
    RULE_conditionalExpression = 105
    RULE_fieldExpression = 106
    RULE_comparisonOperator = 107
    RULE_value = 108
    RULE_valueList = 109
    RULE_currencyValue = 110
    RULE_withClause = 111
    RULE_filteringExpression = 112
    RULE_dataCategorySelection = 113
    RULE_dataCategoryName = 114
    RULE_filteringSelector = 115
    RULE_groupByClause = 116
    RULE_orderByClause = 117
    RULE_fieldOrderList = 118
    RULE_fieldOrder = 119
    RULE_limitClause = 120
    RULE_offsetClause = 121
    RULE_allRowsClause = 122
    RULE_forClauses = 123
    RULE_boundExpression = 124
    RULE_dateFormula = 125
    RULE_signedInteger = 126
    RULE_soqlId = 127
    RULE_soslLiteral = 128
    RULE_soslClauses = 129
    RULE_searchGroup = 130
    RULE_fieldSpecList = 131
    RULE_fieldSpec = 132
    RULE_fieldList = 133
    RULE_updateList = 134
    RULE_updateType = 135
    RULE_networkList = 136
    RULE_soslId = 137
    RULE_id = 138
    RULE_anyId = 139

    ruleNames =  [ "triggerUnit", "triggerCase", "compilationUnit", "typeDeclaration", 
                   "classDeclaration", "enumDeclaration", "enumConstants", 
                   "interfaceDeclaration", "typeList", "classBody", "interfaceBody", 
                   "classBodyDeclaration", "modifier", "memberDeclaration", 
                   "methodDeclaration", "constructorDeclaration", "fieldDeclaration", 
                   "propertyDeclaration", "interfaceMethodDeclaration", 
                   "variableDeclarators", "variableDeclarator", "arrayInitializer", 
                   "typeRef", "arraySubscripts", "typeName", "typeArguments", 
                   "formalParameters", "formalParameterList", "formalParameter", 
                   "qualifiedName", "literal", "annotation", "elementValuePairs", 
                   "elementValuePair", "elementValue", "elementValueArrayInitializer", 
                   "block", "localVariableDeclarationStatement", "localVariableDeclaration", 
                   "statement", "ifStatement", "switchStatement", "whenControl", 
                   "whenValue", "whenLiteral", "forStatement", "whileStatement", 
                   "doWhileStatement", "tryStatement", "returnStatement", 
                   "throwStatement", "breakStatement", "continueStatement", 
                   "insertStatement", "updateStatement", "deleteStatement", 
                   "undeleteStatement", "upsertStatement", "mergeStatement", 
                   "runAsStatement", "expressionStatement", "propertyBlock", 
                   "getter", "setter", "catchClause", "finallyBlock", "forControl", 
                   "forInit", "enhancedForControl", "forUpdate", "parExpression", 
                   "expressionList", "expression", "primary", "methodCall", 
                   "dotMethodCall", "creator", "createdName", "idCreatedNamePair", 
                   "noRest", "classCreatorRest", "arrayCreatorRest", "mapCreatorRest", 
                   "mapCreatorRestPair", "setCreatorRest", "arguments", 
                   "soqlLiteral", "query", "subQuery", "selectList", "selectEntry", 
                   "fieldName", "fromNameList", "subFieldList", "subFieldEntry", 
                   "soqlFieldsParameter", "soqlFunction", "dateFieldName", 
                   "typeOf", "whenClause", "elseClause", "fieldNameList", 
                   "usingScope", "whereClause", "logicalExpression", "conditionalExpression", 
                   "fieldExpression", "comparisonOperator", "value", "valueList", 
                   "currencyValue", "withClause", "filteringExpression", 
                   "dataCategorySelection", "dataCategoryName", "filteringSelector", 
                   "groupByClause", "orderByClause", "fieldOrderList", "fieldOrder", 
                   "limitClause", "offsetClause", "allRowsClause", "forClauses", 
                   "boundExpression", "dateFormula", "signedInteger", "soqlId", 
                   "soslLiteral", "soslClauses", "searchGroup", "fieldSpecList", 
                   "fieldSpec", "fieldList", "updateList", "updateType", 
                   "networkList", "soslId", "id", "anyId" ]

    EOF = Token.EOF
    ABSTRACT=1
    AFTER=2
    BEFORE=3
    BREAK=4
    CATCH=5
    CLASS=6
    CONTINUE=7
    DELETE=8
    DO=9
    ELSE=10
    ENUM=11
    EXTENDS=12
    FINAL=13
    FINALLY=14
    FOR=15
    GET=16
    GLOBAL=17
    IF=18
    IMPLEMENTS=19
    INHERITED=20
    INSERT=21
    INSTANCEOF=22
    INTERFACE=23
    MERGE=24
    NEW=25
    NULL=26
    ON=27
    OVERRIDE=28
    PRIVATE=29
    PROTECTED=30
    PUBLIC=31
    RETURN=32
    SYSTEMRUNAS=33
    SET=34
    SHARING=35
    STATIC=36
    SUPER=37
    SWITCH=38
    TESTMETHOD=39
    THIS=40
    THROW=41
    TRANSIENT=42
    TRIGGER=43
    TRY=44
    UNDELETE=45
    UPDATE=46
    UPSERT=47
    VIRTUAL=48
    VOID=49
    WEBSERVICE=50
    WHEN=51
    WHILE=52
    WITH=53
    WITHOUT=54
    LIST=55
    MAP=56
    SELECT=57
    COUNT=58
    FROM=59
    AS=60
    USING=61
    SCOPE=62
    WHERE=63
    ORDER=64
    BY=65
    LIMIT=66
    SOQLAND=67
    SOQLOR=68
    NOT=69
    AVG=70
    COUNT_DISTINCT=71
    MIN=72
    MAX=73
    SUM=74
    TYPEOF=75
    END=76
    THEN=77
    LIKE=78
    IN=79
    INCLUDES=80
    EXCLUDES=81
    ASC=82
    DESC=83
    NULLS=84
    FIRST=85
    LAST=86
    GROUP=87
    ALL=88
    ROWS=89
    VIEW=90
    HAVING=91
    ROLLUP=92
    TOLABEL=93
    OFFSET=94
    DATA=95
    CATEGORY=96
    AT=97
    ABOVE=98
    BELOW=99
    ABOVE_OR_BELOW=100
    SECURITY_ENFORCED=101
    REFERENCE=102
    CUBE=103
    FORMAT=104
    TRACKING=105
    VIEWSTAT=106
    CUSTOM=107
    STANDARD=108
    CALENDAR_MONTH=109
    CALENDAR_QUARTER=110
    CALENDAR_YEAR=111
    DAY_IN_MONTH=112
    DAY_IN_WEEK=113
    DAY_IN_YEAR=114
    DAY_ONLY=115
    FISCAL_MONTH=116
    FISCAL_QUARTER=117
    FISCAL_YEAR=118
    HOUR_IN_DAY=119
    WEEK_IN_MONTH=120
    WEEK_IN_YEAR=121
    CONVERT_TIMEZONE=122
    YESTERDAY=123
    TODAY=124
    TOMORROW=125
    LAST_WEEK=126
    THIS_WEEK=127
    NEXT_WEEK=128
    LAST_MONTH=129
    THIS_MONTH=130
    NEXT_MONTH=131
    LAST_90_DAYS=132
    NEXT_90_DAYS=133
    LAST_N_DAYS_N=134
    NEXT_N_DAYS_N=135
    NEXT_N_WEEKS_N=136
    LAST_N_WEEKS_N=137
    NEXT_N_MONTHS_N=138
    LAST_N_MONTHS_N=139
    THIS_QUARTER=140
    LAST_QUARTER=141
    NEXT_QUARTER=142
    NEXT_N_QUARTERS_N=143
    LAST_N_QUARTERS_N=144
    THIS_YEAR=145
    LAST_YEAR=146
    NEXT_YEAR=147
    NEXT_N_YEARS_N=148
    LAST_N_YEARS_N=149
    THIS_FISCAL_QUARTER=150
    LAST_FISCAL_QUARTER=151
    NEXT_FISCAL_QUARTER=152
    NEXT_N_FISCAL_QUARTERS_N=153
    LAST_N_FISCAL_QUARTERS_N=154
    THIS_FISCAL_YEAR=155
    LAST_FISCAL_YEAR=156
    NEXT_FISCAL_YEAR=157
    NEXT_N_FISCAL_YEARS_N=158
    LAST_N_FISCAL_YEARS_N=159
    DateLiteral=160
    DateTimeLiteral=161
    FIND=162
    EMAIL=163
    NAME=164
    PHONE=165
    SIDEBAR=166
    FIELDS=167
    METADATA=168
    PRICEBOOKID=169
    NETWORK=170
    SNIPPET=171
    TARGET_LENGTH=172
    DIVISION=173
    RETURNING=174
    LISTVIEW=175
    FindLiteral=176
    IntegerLiteral=177
    LongLiteral=178
    NumberLiteral=179
    BooleanLiteral=180
    StringLiteral=181
    NullLiteral=182
    LPAREN=183
    RPAREN=184
    LBRACE=185
    RBRACE=186
    LBRACK=187
    RBRACK=188
    SEMI=189
    COMMA=190
    DOT=191
    ASSIGN=192
    GT=193
    LT=194
    BANG=195
    TILDE=196
    QUESTIONDOT=197
    QUESTION=198
    COLON=199
    EQUAL=200
    TRIPLEEQUAL=201
    NOTEQUAL=202
    LESSANDGREATER=203
    TRIPLENOTEQUAL=204
    AND=205
    OR=206
    INC=207
    DEC=208
    ADD=209
    SUB=210
    MUL=211
    DIV=212
    BITAND=213
    BITOR=214
    CARET=215
    MOD=216
    MAPTO=217
    ADD_ASSIGN=218
    SUB_ASSIGN=219
    MUL_ASSIGN=220
    DIV_ASSIGN=221
    AND_ASSIGN=222
    OR_ASSIGN=223
    XOR_ASSIGN=224
    MOD_ASSIGN=225
    LSHIFT_ASSIGN=226
    RSHIFT_ASSIGN=227
    URSHIFT_ASSIGN=228
    ATSIGN=229
    Identifier=230
    WS=231
    DOC_COMMENT=232
    COMMENT=233
    LINE_COMMENT=234

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.3")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



        # public void clearCache() {_interp.clearDFA();}



    class TriggerUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRIGGER(self):
            return self.getToken(ApexParser.TRIGGER, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.IdContext)
            else:
                return self.getTypedRuleContext(ApexParser.IdContext,i)


        def ON(self):
            return self.getToken(ApexParser.ON, 0)

        def LPAREN(self):
            return self.getToken(ApexParser.LPAREN, 0)

        def triggerCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.TriggerCaseContext)
            else:
                return self.getTypedRuleContext(ApexParser.TriggerCaseContext,i)


        def RPAREN(self):
            return self.getToken(ApexParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(ApexParser.BlockContext,0)


        def EOF(self):
            return self.getToken(ApexParser.EOF, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.COMMA)
            else:
                return self.getToken(ApexParser.COMMA, i)

        def getRuleIndex(self):
            return ApexParser.RULE_triggerUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerUnit" ):
                listener.enterTriggerUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerUnit" ):
                listener.exitTriggerUnit(self)




    def triggerUnit(self):

        localctx = ApexParser.TriggerUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_triggerUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self.match(ApexParser.TRIGGER)
            self.state = 281
            self.id()
            self.state = 282
            self.match(ApexParser.ON)
            self.state = 283
            self.id()
            self.state = 284
            self.match(ApexParser.LPAREN)
            self.state = 285
            self.triggerCase()
            self.state = 290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ApexParser.COMMA:
                self.state = 286
                self.match(ApexParser.COMMA)
                self.state = 287
                self.triggerCase()
                self.state = 292
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 293
            self.match(ApexParser.RPAREN)
            self.state = 294
            self.block()
            self.state = 295
            self.match(ApexParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEFORE(self):
            return self.getToken(ApexParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(ApexParser.AFTER, 0)

        def INSERT(self):
            return self.getToken(ApexParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(ApexParser.UPDATE, 0)

        def DELETE(self):
            return self.getToken(ApexParser.DELETE, 0)

        def UNDELETE(self):
            return self.getToken(ApexParser.UNDELETE, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_triggerCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerCase" ):
                listener.enterTriggerCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerCase" ):
                listener.exitTriggerCase(self)




    def triggerCase(self):

        localctx = ApexParser.TriggerCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_triggerCase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            _la = self._input.LA(1)
            if not(_la==ApexParser.AFTER or _la==ApexParser.BEFORE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 298
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.DELETE) | (1 << ApexParser.INSERT) | (1 << ApexParser.UNDELETE) | (1 << ApexParser.UPDATE))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeDeclaration(self):
            return self.getTypedRuleContext(ApexParser.TypeDeclarationContext,0)


        def EOF(self):
            return self.getToken(ApexParser.EOF, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)




    def compilationUnit(self):

        localctx = ApexParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_compilationUnit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.typeDeclaration()
            self.state = 301
            self.match(ApexParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(ApexParser.ClassDeclarationContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ModifierContext)
            else:
                return self.getTypedRuleContext(ApexParser.ModifierContext,i)


        def enumDeclaration(self):
            return self.getTypedRuleContext(ApexParser.EnumDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(ApexParser.InterfaceDeclarationContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_typeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDeclaration" ):
                listener.enterTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDeclaration" ):
                listener.exitTypeDeclaration(self)




    def typeDeclaration(self):

        localctx = ApexParser.TypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_typeDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 306
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.FINAL) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.INHERITED) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE) | (1 << ApexParser.PROTECTED) | (1 << ApexParser.PUBLIC) | (1 << ApexParser.STATIC) | (1 << ApexParser.TESTMETHOD) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.VIRTUAL) | (1 << ApexParser.WEBSERVICE) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT))) != 0) or _la==ApexParser.ATSIGN:
                    self.state = 303
                    self.modifier()
                    self.state = 308
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 309
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.FINAL) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.INHERITED) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE) | (1 << ApexParser.PROTECTED) | (1 << ApexParser.PUBLIC) | (1 << ApexParser.STATIC) | (1 << ApexParser.TESTMETHOD) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.VIRTUAL) | (1 << ApexParser.WEBSERVICE) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT))) != 0) or _la==ApexParser.ATSIGN:
                    self.state = 310
                    self.modifier()
                    self.state = 315
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 316
                self.enumDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.FINAL) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.INHERITED) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE) | (1 << ApexParser.PROTECTED) | (1 << ApexParser.PUBLIC) | (1 << ApexParser.STATIC) | (1 << ApexParser.TESTMETHOD) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.VIRTUAL) | (1 << ApexParser.WEBSERVICE) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT))) != 0) or _la==ApexParser.ATSIGN:
                    self.state = 317
                    self.modifier()
                    self.state = 322
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 323
                self.interfaceDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(ApexParser.CLASS, 0)

        def id(self):
            return self.getTypedRuleContext(ApexParser.IdContext,0)


        def classBody(self):
            return self.getTypedRuleContext(ApexParser.ClassBodyContext,0)


        def EXTENDS(self):
            return self.getToken(ApexParser.EXTENDS, 0)

        def typeRef(self):
            return self.getTypedRuleContext(ApexParser.TypeRefContext,0)


        def IMPLEMENTS(self):
            return self.getToken(ApexParser.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(ApexParser.TypeListContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)




    def classDeclaration(self):

        localctx = ApexParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.match(ApexParser.CLASS)
            self.state = 327
            self.id()
            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.EXTENDS:
                self.state = 328
                self.match(ApexParser.EXTENDS)
                self.state = 329
                self.typeRef()


            self.state = 334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.IMPLEMENTS:
                self.state = 332
                self.match(ApexParser.IMPLEMENTS)
                self.state = 333
                self.typeList()


            self.state = 336
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(ApexParser.ENUM, 0)

        def id(self):
            return self.getTypedRuleContext(ApexParser.IdContext,0)


        def LBRACE(self):
            return self.getToken(ApexParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(ApexParser.RBRACE, 0)

        def enumConstants(self):
            return self.getTypedRuleContext(ApexParser.EnumConstantsContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_enumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDeclaration" ):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDeclaration" ):
                listener.exitEnumDeclaration(self)




    def enumDeclaration(self):

        localctx = ApexParser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_enumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.match(ApexParser.ENUM)
            self.state = 339
            self.id()
            self.state = 340
            self.match(ApexParser.LBRACE)
            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.SET) | (1 << ApexParser.SHARING) | (1 << ApexParser.SWITCH) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.TRIGGER) | (1 << ApexParser.WHEN) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT) | (1 << ApexParser.SELECT) | (1 << ApexParser.COUNT) | (1 << ApexParser.FROM) | (1 << ApexParser.AS) | (1 << ApexParser.USING) | (1 << ApexParser.SCOPE) | (1 << ApexParser.WHERE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ApexParser.ORDER - 64)) | (1 << (ApexParser.BY - 64)) | (1 << (ApexParser.LIMIT - 64)) | (1 << (ApexParser.SOQLAND - 64)) | (1 << (ApexParser.SOQLOR - 64)) | (1 << (ApexParser.NOT - 64)) | (1 << (ApexParser.AVG - 64)) | (1 << (ApexParser.COUNT_DISTINCT - 64)) | (1 << (ApexParser.MIN - 64)) | (1 << (ApexParser.MAX - 64)) | (1 << (ApexParser.SUM - 64)) | (1 << (ApexParser.TYPEOF - 64)) | (1 << (ApexParser.END - 64)) | (1 << (ApexParser.THEN - 64)) | (1 << (ApexParser.LIKE - 64)) | (1 << (ApexParser.IN - 64)) | (1 << (ApexParser.INCLUDES - 64)) | (1 << (ApexParser.EXCLUDES - 64)) | (1 << (ApexParser.ASC - 64)) | (1 << (ApexParser.DESC - 64)) | (1 << (ApexParser.NULLS - 64)) | (1 << (ApexParser.FIRST - 64)) | (1 << (ApexParser.LAST - 64)) | (1 << (ApexParser.GROUP - 64)) | (1 << (ApexParser.ALL - 64)) | (1 << (ApexParser.ROWS - 64)) | (1 << (ApexParser.VIEW - 64)) | (1 << (ApexParser.HAVING - 64)) | (1 << (ApexParser.ROLLUP - 64)) | (1 << (ApexParser.TOLABEL - 64)) | (1 << (ApexParser.OFFSET - 64)) | (1 << (ApexParser.DATA - 64)) | (1 << (ApexParser.CATEGORY - 64)) | (1 << (ApexParser.AT - 64)) | (1 << (ApexParser.ABOVE - 64)) | (1 << (ApexParser.BELOW - 64)) | (1 << (ApexParser.ABOVE_OR_BELOW - 64)) | (1 << (ApexParser.SECURITY_ENFORCED - 64)) | (1 << (ApexParser.REFERENCE - 64)) | (1 << (ApexParser.CUBE - 64)) | (1 << (ApexParser.FORMAT - 64)) | (1 << (ApexParser.TRACKING - 64)) | (1 << (ApexParser.VIEWSTAT - 64)) | (1 << (ApexParser.CUSTOM - 64)) | (1 << (ApexParser.STANDARD - 64)) | (1 << (ApexParser.CALENDAR_MONTH - 64)) | (1 << (ApexParser.CALENDAR_QUARTER - 64)) | (1 << (ApexParser.CALENDAR_YEAR - 64)) | (1 << (ApexParser.DAY_IN_MONTH - 64)) | (1 << (ApexParser.DAY_IN_WEEK - 64)) | (1 << (ApexParser.DAY_IN_YEAR - 64)) | (1 << (ApexParser.DAY_ONLY - 64)) | (1 << (ApexParser.FISCAL_MONTH - 64)) | (1 << (ApexParser.FISCAL_QUARTER - 64)) | (1 << (ApexParser.FISCAL_YEAR - 64)) | (1 << (ApexParser.HOUR_IN_DAY - 64)) | (1 << (ApexParser.WEEK_IN_MONTH - 64)) | (1 << (ApexParser.WEEK_IN_YEAR - 64)) | (1 << (ApexParser.CONVERT_TIMEZONE - 64)) | (1 << (ApexParser.YESTERDAY - 64)) | (1 << (ApexParser.TODAY - 64)) | (1 << (ApexParser.TOMORROW - 64)) | (1 << (ApexParser.LAST_WEEK - 64)) | (1 << (ApexParser.THIS_WEEK - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ApexParser.NEXT_WEEK - 128)) | (1 << (ApexParser.LAST_MONTH - 128)) | (1 << (ApexParser.THIS_MONTH - 128)) | (1 << (ApexParser.NEXT_MONTH - 128)) | (1 << (ApexParser.LAST_90_DAYS - 128)) | (1 << (ApexParser.NEXT_90_DAYS - 128)) | (1 << (ApexParser.LAST_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 128)) | (1 << (ApexParser.LAST_N_WEEKS_N - 128)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 128)) | (1 << (ApexParser.LAST_N_MONTHS_N - 128)) | (1 << (ApexParser.THIS_QUARTER - 128)) | (1 << (ApexParser.LAST_QUARTER - 128)) | (1 << (ApexParser.NEXT_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_YEAR - 128)) | (1 << (ApexParser.LAST_YEAR - 128)) | (1 << (ApexParser.NEXT_YEAR - 128)) | (1 << (ApexParser.NEXT_N_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_YEARS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_QUARTER - 128)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 128)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.FIND - 128)) | (1 << (ApexParser.EMAIL - 128)) | (1 << (ApexParser.NAME - 128)) | (1 << (ApexParser.PHONE - 128)) | (1 << (ApexParser.SIDEBAR - 128)) | (1 << (ApexParser.FIELDS - 128)) | (1 << (ApexParser.METADATA - 128)) | (1 << (ApexParser.PRICEBOOKID - 128)) | (1 << (ApexParser.NETWORK - 128)) | (1 << (ApexParser.SNIPPET - 128)) | (1 << (ApexParser.TARGET_LENGTH - 128)) | (1 << (ApexParser.DIVISION - 128)) | (1 << (ApexParser.RETURNING - 128)) | (1 << (ApexParser.LISTVIEW - 128)))) != 0) or _la==ApexParser.Identifier:
                self.state = 341
                self.enumConstants()


            self.state = 344
            self.match(ApexParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.IdContext)
            else:
                return self.getTypedRuleContext(ApexParser.IdContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.COMMA)
            else:
                return self.getToken(ApexParser.COMMA, i)

        def getRuleIndex(self):
            return ApexParser.RULE_enumConstants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstants" ):
                listener.enterEnumConstants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstants" ):
                listener.exitEnumConstants(self)




    def enumConstants(self):

        localctx = ApexParser.EnumConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_enumConstants)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.id()
            self.state = 351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ApexParser.COMMA:
                self.state = 347
                self.match(ApexParser.COMMA)
                self.state = 348
                self.id()
                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(ApexParser.INTERFACE, 0)

        def id(self):
            return self.getTypedRuleContext(ApexParser.IdContext,0)


        def interfaceBody(self):
            return self.getTypedRuleContext(ApexParser.InterfaceBodyContext,0)


        def EXTENDS(self):
            return self.getToken(ApexParser.EXTENDS, 0)

        def typeList(self):
            return self.getTypedRuleContext(ApexParser.TypeListContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_interfaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDeclaration" ):
                listener.enterInterfaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDeclaration" ):
                listener.exitInterfaceDeclaration(self)




    def interfaceDeclaration(self):

        localctx = ApexParser.InterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_interfaceDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(ApexParser.INTERFACE)
            self.state = 355
            self.id()
            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.EXTENDS:
                self.state = 356
                self.match(ApexParser.EXTENDS)
                self.state = 357
                self.typeList()


            self.state = 360
            self.interfaceBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.TypeRefContext)
            else:
                return self.getTypedRuleContext(ApexParser.TypeRefContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.COMMA)
            else:
                return self.getToken(ApexParser.COMMA, i)

        def getRuleIndex(self):
            return ApexParser.RULE_typeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeList" ):
                listener.enterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeList" ):
                listener.exitTypeList(self)




    def typeList(self):

        localctx = ApexParser.TypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_typeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.typeRef()
            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ApexParser.COMMA:
                self.state = 363
                self.match(ApexParser.COMMA)
                self.state = 364
                self.typeRef()
                self.state = 369
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(ApexParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(ApexParser.RBRACE, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(ApexParser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return ApexParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)




    def classBody(self):

        localctx = ApexParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self.match(ApexParser.LBRACE)
            self.state = 374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.CLASS) | (1 << ApexParser.ENUM) | (1 << ApexParser.FINAL) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.INTERFACE) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE) | (1 << ApexParser.PROTECTED) | (1 << ApexParser.PUBLIC) | (1 << ApexParser.SET) | (1 << ApexParser.SHARING) | (1 << ApexParser.STATIC) | (1 << ApexParser.SWITCH) | (1 << ApexParser.TESTMETHOD) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.TRIGGER) | (1 << ApexParser.VIRTUAL) | (1 << ApexParser.VOID) | (1 << ApexParser.WEBSERVICE) | (1 << ApexParser.WHEN) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT) | (1 << ApexParser.LIST) | (1 << ApexParser.MAP) | (1 << ApexParser.SELECT) | (1 << ApexParser.COUNT) | (1 << ApexParser.FROM) | (1 << ApexParser.AS) | (1 << ApexParser.USING) | (1 << ApexParser.SCOPE) | (1 << ApexParser.WHERE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ApexParser.ORDER - 64)) | (1 << (ApexParser.BY - 64)) | (1 << (ApexParser.LIMIT - 64)) | (1 << (ApexParser.SOQLAND - 64)) | (1 << (ApexParser.SOQLOR - 64)) | (1 << (ApexParser.NOT - 64)) | (1 << (ApexParser.AVG - 64)) | (1 << (ApexParser.COUNT_DISTINCT - 64)) | (1 << (ApexParser.MIN - 64)) | (1 << (ApexParser.MAX - 64)) | (1 << (ApexParser.SUM - 64)) | (1 << (ApexParser.TYPEOF - 64)) | (1 << (ApexParser.END - 64)) | (1 << (ApexParser.THEN - 64)) | (1 << (ApexParser.LIKE - 64)) | (1 << (ApexParser.IN - 64)) | (1 << (ApexParser.INCLUDES - 64)) | (1 << (ApexParser.EXCLUDES - 64)) | (1 << (ApexParser.ASC - 64)) | (1 << (ApexParser.DESC - 64)) | (1 << (ApexParser.NULLS - 64)) | (1 << (ApexParser.FIRST - 64)) | (1 << (ApexParser.LAST - 64)) | (1 << (ApexParser.GROUP - 64)) | (1 << (ApexParser.ALL - 64)) | (1 << (ApexParser.ROWS - 64)) | (1 << (ApexParser.VIEW - 64)) | (1 << (ApexParser.HAVING - 64)) | (1 << (ApexParser.ROLLUP - 64)) | (1 << (ApexParser.TOLABEL - 64)) | (1 << (ApexParser.OFFSET - 64)) | (1 << (ApexParser.DATA - 64)) | (1 << (ApexParser.CATEGORY - 64)) | (1 << (ApexParser.AT - 64)) | (1 << (ApexParser.ABOVE - 64)) | (1 << (ApexParser.BELOW - 64)) | (1 << (ApexParser.ABOVE_OR_BELOW - 64)) | (1 << (ApexParser.SECURITY_ENFORCED - 64)) | (1 << (ApexParser.REFERENCE - 64)) | (1 << (ApexParser.CUBE - 64)) | (1 << (ApexParser.FORMAT - 64)) | (1 << (ApexParser.TRACKING - 64)) | (1 << (ApexParser.VIEWSTAT - 64)) | (1 << (ApexParser.CUSTOM - 64)) | (1 << (ApexParser.STANDARD - 64)) | (1 << (ApexParser.CALENDAR_MONTH - 64)) | (1 << (ApexParser.CALENDAR_QUARTER - 64)) | (1 << (ApexParser.CALENDAR_YEAR - 64)) | (1 << (ApexParser.DAY_IN_MONTH - 64)) | (1 << (ApexParser.DAY_IN_WEEK - 64)) | (1 << (ApexParser.DAY_IN_YEAR - 64)) | (1 << (ApexParser.DAY_ONLY - 64)) | (1 << (ApexParser.FISCAL_MONTH - 64)) | (1 << (ApexParser.FISCAL_QUARTER - 64)) | (1 << (ApexParser.FISCAL_YEAR - 64)) | (1 << (ApexParser.HOUR_IN_DAY - 64)) | (1 << (ApexParser.WEEK_IN_MONTH - 64)) | (1 << (ApexParser.WEEK_IN_YEAR - 64)) | (1 << (ApexParser.CONVERT_TIMEZONE - 64)) | (1 << (ApexParser.YESTERDAY - 64)) | (1 << (ApexParser.TODAY - 64)) | (1 << (ApexParser.TOMORROW - 64)) | (1 << (ApexParser.LAST_WEEK - 64)) | (1 << (ApexParser.THIS_WEEK - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ApexParser.NEXT_WEEK - 128)) | (1 << (ApexParser.LAST_MONTH - 128)) | (1 << (ApexParser.THIS_MONTH - 128)) | (1 << (ApexParser.NEXT_MONTH - 128)) | (1 << (ApexParser.LAST_90_DAYS - 128)) | (1 << (ApexParser.NEXT_90_DAYS - 128)) | (1 << (ApexParser.LAST_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 128)) | (1 << (ApexParser.LAST_N_WEEKS_N - 128)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 128)) | (1 << (ApexParser.LAST_N_MONTHS_N - 128)) | (1 << (ApexParser.THIS_QUARTER - 128)) | (1 << (ApexParser.LAST_QUARTER - 128)) | (1 << (ApexParser.NEXT_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_YEAR - 128)) | (1 << (ApexParser.LAST_YEAR - 128)) | (1 << (ApexParser.NEXT_YEAR - 128)) | (1 << (ApexParser.NEXT_N_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_YEARS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_QUARTER - 128)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 128)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.FIND - 128)) | (1 << (ApexParser.EMAIL - 128)) | (1 << (ApexParser.NAME - 128)) | (1 << (ApexParser.PHONE - 128)) | (1 << (ApexParser.SIDEBAR - 128)) | (1 << (ApexParser.FIELDS - 128)) | (1 << (ApexParser.METADATA - 128)) | (1 << (ApexParser.PRICEBOOKID - 128)) | (1 << (ApexParser.NETWORK - 128)) | (1 << (ApexParser.SNIPPET - 128)) | (1 << (ApexParser.TARGET_LENGTH - 128)) | (1 << (ApexParser.DIVISION - 128)) | (1 << (ApexParser.RETURNING - 128)) | (1 << (ApexParser.LISTVIEW - 128)) | (1 << (ApexParser.LBRACE - 128)) | (1 << (ApexParser.SEMI - 128)))) != 0) or _la==ApexParser.ATSIGN or _la==ApexParser.Identifier:
                self.state = 371
                self.classBodyDeclaration()
                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 377
            self.match(ApexParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(ApexParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(ApexParser.RBRACE, 0)

        def interfaceMethodDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.InterfaceMethodDeclarationContext)
            else:
                return self.getTypedRuleContext(ApexParser.InterfaceMethodDeclarationContext,i)


        def getRuleIndex(self):
            return ApexParser.RULE_interfaceBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceBody" ):
                listener.enterInterfaceBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceBody" ):
                listener.exitInterfaceBody(self)




    def interfaceBody(self):

        localctx = ApexParser.InterfaceBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_interfaceBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.match(ApexParser.LBRACE)
            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.FINAL) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE) | (1 << ApexParser.PROTECTED) | (1 << ApexParser.PUBLIC) | (1 << ApexParser.SET) | (1 << ApexParser.SHARING) | (1 << ApexParser.STATIC) | (1 << ApexParser.SWITCH) | (1 << ApexParser.TESTMETHOD) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.TRIGGER) | (1 << ApexParser.VIRTUAL) | (1 << ApexParser.VOID) | (1 << ApexParser.WEBSERVICE) | (1 << ApexParser.WHEN) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT) | (1 << ApexParser.LIST) | (1 << ApexParser.MAP) | (1 << ApexParser.SELECT) | (1 << ApexParser.COUNT) | (1 << ApexParser.FROM) | (1 << ApexParser.AS) | (1 << ApexParser.USING) | (1 << ApexParser.SCOPE) | (1 << ApexParser.WHERE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ApexParser.ORDER - 64)) | (1 << (ApexParser.BY - 64)) | (1 << (ApexParser.LIMIT - 64)) | (1 << (ApexParser.SOQLAND - 64)) | (1 << (ApexParser.SOQLOR - 64)) | (1 << (ApexParser.NOT - 64)) | (1 << (ApexParser.AVG - 64)) | (1 << (ApexParser.COUNT_DISTINCT - 64)) | (1 << (ApexParser.MIN - 64)) | (1 << (ApexParser.MAX - 64)) | (1 << (ApexParser.SUM - 64)) | (1 << (ApexParser.TYPEOF - 64)) | (1 << (ApexParser.END - 64)) | (1 << (ApexParser.THEN - 64)) | (1 << (ApexParser.LIKE - 64)) | (1 << (ApexParser.IN - 64)) | (1 << (ApexParser.INCLUDES - 64)) | (1 << (ApexParser.EXCLUDES - 64)) | (1 << (ApexParser.ASC - 64)) | (1 << (ApexParser.DESC - 64)) | (1 << (ApexParser.NULLS - 64)) | (1 << (ApexParser.FIRST - 64)) | (1 << (ApexParser.LAST - 64)) | (1 << (ApexParser.GROUP - 64)) | (1 << (ApexParser.ALL - 64)) | (1 << (ApexParser.ROWS - 64)) | (1 << (ApexParser.VIEW - 64)) | (1 << (ApexParser.HAVING - 64)) | (1 << (ApexParser.ROLLUP - 64)) | (1 << (ApexParser.TOLABEL - 64)) | (1 << (ApexParser.OFFSET - 64)) | (1 << (ApexParser.DATA - 64)) | (1 << (ApexParser.CATEGORY - 64)) | (1 << (ApexParser.AT - 64)) | (1 << (ApexParser.ABOVE - 64)) | (1 << (ApexParser.BELOW - 64)) | (1 << (ApexParser.ABOVE_OR_BELOW - 64)) | (1 << (ApexParser.SECURITY_ENFORCED - 64)) | (1 << (ApexParser.REFERENCE - 64)) | (1 << (ApexParser.CUBE - 64)) | (1 << (ApexParser.FORMAT - 64)) | (1 << (ApexParser.TRACKING - 64)) | (1 << (ApexParser.VIEWSTAT - 64)) | (1 << (ApexParser.CUSTOM - 64)) | (1 << (ApexParser.STANDARD - 64)) | (1 << (ApexParser.CALENDAR_MONTH - 64)) | (1 << (ApexParser.CALENDAR_QUARTER - 64)) | (1 << (ApexParser.CALENDAR_YEAR - 64)) | (1 << (ApexParser.DAY_IN_MONTH - 64)) | (1 << (ApexParser.DAY_IN_WEEK - 64)) | (1 << (ApexParser.DAY_IN_YEAR - 64)) | (1 << (ApexParser.DAY_ONLY - 64)) | (1 << (ApexParser.FISCAL_MONTH - 64)) | (1 << (ApexParser.FISCAL_QUARTER - 64)) | (1 << (ApexParser.FISCAL_YEAR - 64)) | (1 << (ApexParser.HOUR_IN_DAY - 64)) | (1 << (ApexParser.WEEK_IN_MONTH - 64)) | (1 << (ApexParser.WEEK_IN_YEAR - 64)) | (1 << (ApexParser.CONVERT_TIMEZONE - 64)) | (1 << (ApexParser.YESTERDAY - 64)) | (1 << (ApexParser.TODAY - 64)) | (1 << (ApexParser.TOMORROW - 64)) | (1 << (ApexParser.LAST_WEEK - 64)) | (1 << (ApexParser.THIS_WEEK - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ApexParser.NEXT_WEEK - 128)) | (1 << (ApexParser.LAST_MONTH - 128)) | (1 << (ApexParser.THIS_MONTH - 128)) | (1 << (ApexParser.NEXT_MONTH - 128)) | (1 << (ApexParser.LAST_90_DAYS - 128)) | (1 << (ApexParser.NEXT_90_DAYS - 128)) | (1 << (ApexParser.LAST_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 128)) | (1 << (ApexParser.LAST_N_WEEKS_N - 128)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 128)) | (1 << (ApexParser.LAST_N_MONTHS_N - 128)) | (1 << (ApexParser.THIS_QUARTER - 128)) | (1 << (ApexParser.LAST_QUARTER - 128)) | (1 << (ApexParser.NEXT_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_YEAR - 128)) | (1 << (ApexParser.LAST_YEAR - 128)) | (1 << (ApexParser.NEXT_YEAR - 128)) | (1 << (ApexParser.NEXT_N_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_YEARS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_QUARTER - 128)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 128)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.FIND - 128)) | (1 << (ApexParser.EMAIL - 128)) | (1 << (ApexParser.NAME - 128)) | (1 << (ApexParser.PHONE - 128)) | (1 << (ApexParser.SIDEBAR - 128)) | (1 << (ApexParser.FIELDS - 128)) | (1 << (ApexParser.METADATA - 128)) | (1 << (ApexParser.PRICEBOOKID - 128)) | (1 << (ApexParser.NETWORK - 128)) | (1 << (ApexParser.SNIPPET - 128)) | (1 << (ApexParser.TARGET_LENGTH - 128)) | (1 << (ApexParser.DIVISION - 128)) | (1 << (ApexParser.RETURNING - 128)) | (1 << (ApexParser.LISTVIEW - 128)))) != 0) or _la==ApexParser.ATSIGN or _la==ApexParser.Identifier:
                self.state = 380
                self.interfaceMethodDeclaration()
                self.state = 385
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 386
            self.match(ApexParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(ApexParser.SEMI, 0)

        def block(self):
            return self.getTypedRuleContext(ApexParser.BlockContext,0)


        def STATIC(self):
            return self.getToken(ApexParser.STATIC, 0)

        def memberDeclaration(self):
            return self.getTypedRuleContext(ApexParser.MemberDeclarationContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ModifierContext)
            else:
                return self.getTypedRuleContext(ApexParser.ModifierContext,i)


        def getRuleIndex(self):
            return ApexParser.RULE_classBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBodyDeclaration" ):
                listener.enterClassBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBodyDeclaration" ):
                listener.exitClassBodyDeclaration(self)




    def classBodyDeclaration(self):

        localctx = ApexParser.ClassBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_classBodyDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 388
                self.match(ApexParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ApexParser.STATIC:
                    self.state = 389
                    self.match(ApexParser.STATIC)


                self.state = 392
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 396
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 393
                        self.modifier() 
                    self.state = 398
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

                self.state = 399
                self.memberDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(ApexParser.AnnotationContext,0)


        def GLOBAL(self):
            return self.getToken(ApexParser.GLOBAL, 0)

        def PUBLIC(self):
            return self.getToken(ApexParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(ApexParser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(ApexParser.PRIVATE, 0)

        def TRANSIENT(self):
            return self.getToken(ApexParser.TRANSIENT, 0)

        def STATIC(self):
            return self.getToken(ApexParser.STATIC, 0)

        def ABSTRACT(self):
            return self.getToken(ApexParser.ABSTRACT, 0)

        def FINAL(self):
            return self.getToken(ApexParser.FINAL, 0)

        def WEBSERVICE(self):
            return self.getToken(ApexParser.WEBSERVICE, 0)

        def OVERRIDE(self):
            return self.getToken(ApexParser.OVERRIDE, 0)

        def VIRTUAL(self):
            return self.getToken(ApexParser.VIRTUAL, 0)

        def TESTMETHOD(self):
            return self.getToken(ApexParser.TESTMETHOD, 0)

        def WITH(self):
            return self.getToken(ApexParser.WITH, 0)

        def SHARING(self):
            return self.getToken(ApexParser.SHARING, 0)

        def WITHOUT(self):
            return self.getToken(ApexParser.WITHOUT, 0)

        def INHERITED(self):
            return self.getToken(ApexParser.INHERITED, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)




    def modifier(self):

        localctx = ApexParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_modifier)
        try:
            self.state = 421
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ApexParser.ATSIGN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 402
                self.annotation()
                pass
            elif token in [ApexParser.GLOBAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 403
                self.match(ApexParser.GLOBAL)
                pass
            elif token in [ApexParser.PUBLIC]:
                self.enterOuterAlt(localctx, 3)
                self.state = 404
                self.match(ApexParser.PUBLIC)
                pass
            elif token in [ApexParser.PROTECTED]:
                self.enterOuterAlt(localctx, 4)
                self.state = 405
                self.match(ApexParser.PROTECTED)
                pass
            elif token in [ApexParser.PRIVATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 406
                self.match(ApexParser.PRIVATE)
                pass
            elif token in [ApexParser.TRANSIENT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 407
                self.match(ApexParser.TRANSIENT)
                pass
            elif token in [ApexParser.STATIC]:
                self.enterOuterAlt(localctx, 7)
                self.state = 408
                self.match(ApexParser.STATIC)
                pass
            elif token in [ApexParser.ABSTRACT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 409
                self.match(ApexParser.ABSTRACT)
                pass
            elif token in [ApexParser.FINAL]:
                self.enterOuterAlt(localctx, 9)
                self.state = 410
                self.match(ApexParser.FINAL)
                pass
            elif token in [ApexParser.WEBSERVICE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 411
                self.match(ApexParser.WEBSERVICE)
                pass
            elif token in [ApexParser.OVERRIDE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 412
                self.match(ApexParser.OVERRIDE)
                pass
            elif token in [ApexParser.VIRTUAL]:
                self.enterOuterAlt(localctx, 12)
                self.state = 413
                self.match(ApexParser.VIRTUAL)
                pass
            elif token in [ApexParser.TESTMETHOD]:
                self.enterOuterAlt(localctx, 13)
                self.state = 414
                self.match(ApexParser.TESTMETHOD)
                pass
            elif token in [ApexParser.WITH]:
                self.enterOuterAlt(localctx, 14)
                self.state = 415
                self.match(ApexParser.WITH)
                self.state = 416
                self.match(ApexParser.SHARING)
                pass
            elif token in [ApexParser.WITHOUT]:
                self.enterOuterAlt(localctx, 15)
                self.state = 417
                self.match(ApexParser.WITHOUT)
                self.state = 418
                self.match(ApexParser.SHARING)
                pass
            elif token in [ApexParser.INHERITED]:
                self.enterOuterAlt(localctx, 16)
                self.state = 419
                self.match(ApexParser.INHERITED)
                self.state = 420
                self.match(ApexParser.SHARING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodDeclaration(self):
            return self.getTypedRuleContext(ApexParser.MethodDeclarationContext,0)


        def fieldDeclaration(self):
            return self.getTypedRuleContext(ApexParser.FieldDeclarationContext,0)


        def constructorDeclaration(self):
            return self.getTypedRuleContext(ApexParser.ConstructorDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(ApexParser.InterfaceDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(ApexParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(ApexParser.EnumDeclarationContext,0)


        def propertyDeclaration(self):
            return self.getTypedRuleContext(ApexParser.PropertyDeclarationContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_memberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclaration" ):
                listener.enterMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclaration" ):
                listener.exitMemberDeclaration(self)




    def memberDeclaration(self):

        localctx = ApexParser.MemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_memberDeclaration)
        try:
            self.state = 430
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 423
                self.methodDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 424
                self.fieldDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 425
                self.constructorDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 426
                self.interfaceDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 427
                self.classDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 428
                self.enumDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 429
                self.propertyDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id(self):
            return self.getTypedRuleContext(ApexParser.IdContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(ApexParser.FormalParametersContext,0)


        def typeRef(self):
            return self.getTypedRuleContext(ApexParser.TypeRefContext,0)


        def VOID(self):
            return self.getToken(ApexParser.VOID, 0)

        def block(self):
            return self.getTypedRuleContext(ApexParser.BlockContext,0)


        def SEMI(self):
            return self.getToken(ApexParser.SEMI, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_methodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclaration" ):
                listener.enterMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclaration" ):
                listener.exitMethodDeclaration(self)




    def methodDeclaration(self):

        localctx = ApexParser.MethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_methodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ApexParser.AFTER, ApexParser.BEFORE, ApexParser.GET, ApexParser.INHERITED, ApexParser.INSTANCEOF, ApexParser.SET, ApexParser.SHARING, ApexParser.SWITCH, ApexParser.TRANSIENT, ApexParser.TRIGGER, ApexParser.WHEN, ApexParser.WITH, ApexParser.WITHOUT, ApexParser.LIST, ApexParser.MAP, ApexParser.SELECT, ApexParser.COUNT, ApexParser.FROM, ApexParser.AS, ApexParser.USING, ApexParser.SCOPE, ApexParser.WHERE, ApexParser.ORDER, ApexParser.BY, ApexParser.LIMIT, ApexParser.SOQLAND, ApexParser.SOQLOR, ApexParser.NOT, ApexParser.AVG, ApexParser.COUNT_DISTINCT, ApexParser.MIN, ApexParser.MAX, ApexParser.SUM, ApexParser.TYPEOF, ApexParser.END, ApexParser.THEN, ApexParser.LIKE, ApexParser.IN, ApexParser.INCLUDES, ApexParser.EXCLUDES, ApexParser.ASC, ApexParser.DESC, ApexParser.NULLS, ApexParser.FIRST, ApexParser.LAST, ApexParser.GROUP, ApexParser.ALL, ApexParser.ROWS, ApexParser.VIEW, ApexParser.HAVING, ApexParser.ROLLUP, ApexParser.TOLABEL, ApexParser.OFFSET, ApexParser.DATA, ApexParser.CATEGORY, ApexParser.AT, ApexParser.ABOVE, ApexParser.BELOW, ApexParser.ABOVE_OR_BELOW, ApexParser.SECURITY_ENFORCED, ApexParser.REFERENCE, ApexParser.CUBE, ApexParser.FORMAT, ApexParser.TRACKING, ApexParser.VIEWSTAT, ApexParser.CUSTOM, ApexParser.STANDARD, ApexParser.CALENDAR_MONTH, ApexParser.CALENDAR_QUARTER, ApexParser.CALENDAR_YEAR, ApexParser.DAY_IN_MONTH, ApexParser.DAY_IN_WEEK, ApexParser.DAY_IN_YEAR, ApexParser.DAY_ONLY, ApexParser.FISCAL_MONTH, ApexParser.FISCAL_QUARTER, ApexParser.FISCAL_YEAR, ApexParser.HOUR_IN_DAY, ApexParser.WEEK_IN_MONTH, ApexParser.WEEK_IN_YEAR, ApexParser.CONVERT_TIMEZONE, ApexParser.YESTERDAY, ApexParser.TODAY, ApexParser.TOMORROW, ApexParser.LAST_WEEK, ApexParser.THIS_WEEK, ApexParser.NEXT_WEEK, ApexParser.LAST_MONTH, ApexParser.THIS_MONTH, ApexParser.NEXT_MONTH, ApexParser.LAST_90_DAYS, ApexParser.NEXT_90_DAYS, ApexParser.LAST_N_DAYS_N, ApexParser.NEXT_N_DAYS_N, ApexParser.NEXT_N_WEEKS_N, ApexParser.LAST_N_WEEKS_N, ApexParser.NEXT_N_MONTHS_N, ApexParser.LAST_N_MONTHS_N, ApexParser.THIS_QUARTER, ApexParser.LAST_QUARTER, ApexParser.NEXT_QUARTER, ApexParser.NEXT_N_QUARTERS_N, ApexParser.LAST_N_QUARTERS_N, ApexParser.THIS_YEAR, ApexParser.LAST_YEAR, ApexParser.NEXT_YEAR, ApexParser.NEXT_N_YEARS_N, ApexParser.LAST_N_YEARS_N, ApexParser.THIS_FISCAL_QUARTER, ApexParser.LAST_FISCAL_QUARTER, ApexParser.NEXT_FISCAL_QUARTER, ApexParser.NEXT_N_FISCAL_QUARTERS_N, ApexParser.LAST_N_FISCAL_QUARTERS_N, ApexParser.THIS_FISCAL_YEAR, ApexParser.LAST_FISCAL_YEAR, ApexParser.NEXT_FISCAL_YEAR, ApexParser.NEXT_N_FISCAL_YEARS_N, ApexParser.LAST_N_FISCAL_YEARS_N, ApexParser.FIND, ApexParser.EMAIL, ApexParser.NAME, ApexParser.PHONE, ApexParser.SIDEBAR, ApexParser.FIELDS, ApexParser.METADATA, ApexParser.PRICEBOOKID, ApexParser.NETWORK, ApexParser.SNIPPET, ApexParser.TARGET_LENGTH, ApexParser.DIVISION, ApexParser.RETURNING, ApexParser.LISTVIEW, ApexParser.Identifier]:
                self.state = 432
                self.typeRef()
                pass
            elif token in [ApexParser.VOID]:
                self.state = 433
                self.match(ApexParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 436
            self.id()
            self.state = 437
            self.formalParameters()
            self.state = 440
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ApexParser.LBRACE]:
                self.state = 438
                self.block()
                pass
            elif token in [ApexParser.SEMI]:
                self.state = 439
                self.match(ApexParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(ApexParser.QualifiedNameContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(ApexParser.FormalParametersContext,0)


        def block(self):
            return self.getTypedRuleContext(ApexParser.BlockContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_constructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDeclaration" ):
                listener.enterConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDeclaration" ):
                listener.exitConstructorDeclaration(self)




    def constructorDeclaration(self):

        localctx = ApexParser.ConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_constructorDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.qualifiedName()
            self.state = 443
            self.formalParameters()
            self.state = 444
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeRef(self):
            return self.getTypedRuleContext(ApexParser.TypeRefContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(ApexParser.VariableDeclaratorsContext,0)


        def SEMI(self):
            return self.getToken(ApexParser.SEMI, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_fieldDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclaration" ):
                listener.enterFieldDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclaration" ):
                listener.exitFieldDeclaration(self)




    def fieldDeclaration(self):

        localctx = ApexParser.FieldDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_fieldDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.typeRef()
            self.state = 447
            self.variableDeclarators()
            self.state = 448
            self.match(ApexParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeRef(self):
            return self.getTypedRuleContext(ApexParser.TypeRefContext,0)


        def id(self):
            return self.getTypedRuleContext(ApexParser.IdContext,0)


        def LBRACE(self):
            return self.getToken(ApexParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(ApexParser.RBRACE, 0)

        def propertyBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.PropertyBlockContext)
            else:
                return self.getTypedRuleContext(ApexParser.PropertyBlockContext,i)


        def getRuleIndex(self):
            return ApexParser.RULE_propertyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyDeclaration" ):
                listener.enterPropertyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyDeclaration" ):
                listener.exitPropertyDeclaration(self)




    def propertyDeclaration(self):

        localctx = ApexParser.PropertyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_propertyDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.typeRef()
            self.state = 451
            self.id()
            self.state = 452
            self.match(ApexParser.LBRACE)
            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.FINAL) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.INHERITED) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE) | (1 << ApexParser.PROTECTED) | (1 << ApexParser.PUBLIC) | (1 << ApexParser.SET) | (1 << ApexParser.STATIC) | (1 << ApexParser.TESTMETHOD) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.VIRTUAL) | (1 << ApexParser.WEBSERVICE) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT))) != 0) or _la==ApexParser.ATSIGN:
                self.state = 453
                self.propertyBlock()
                self.state = 458
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 459
            self.match(ApexParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id(self):
            return self.getTypedRuleContext(ApexParser.IdContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(ApexParser.FormalParametersContext,0)


        def SEMI(self):
            return self.getToken(ApexParser.SEMI, 0)

        def typeRef(self):
            return self.getTypedRuleContext(ApexParser.TypeRefContext,0)


        def VOID(self):
            return self.getToken(ApexParser.VOID, 0)

        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ModifierContext)
            else:
                return self.getTypedRuleContext(ApexParser.ModifierContext,i)


        def getRuleIndex(self):
            return ApexParser.RULE_interfaceMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMethodDeclaration" ):
                listener.enterInterfaceMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMethodDeclaration" ):
                listener.exitInterfaceMethodDeclaration(self)




    def interfaceMethodDeclaration(self):

        localctx = ApexParser.InterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_interfaceMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 461
                    self.modifier() 
                self.state = 466
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

            self.state = 469
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ApexParser.AFTER, ApexParser.BEFORE, ApexParser.GET, ApexParser.INHERITED, ApexParser.INSTANCEOF, ApexParser.SET, ApexParser.SHARING, ApexParser.SWITCH, ApexParser.TRANSIENT, ApexParser.TRIGGER, ApexParser.WHEN, ApexParser.WITH, ApexParser.WITHOUT, ApexParser.LIST, ApexParser.MAP, ApexParser.SELECT, ApexParser.COUNT, ApexParser.FROM, ApexParser.AS, ApexParser.USING, ApexParser.SCOPE, ApexParser.WHERE, ApexParser.ORDER, ApexParser.BY, ApexParser.LIMIT, ApexParser.SOQLAND, ApexParser.SOQLOR, ApexParser.NOT, ApexParser.AVG, ApexParser.COUNT_DISTINCT, ApexParser.MIN, ApexParser.MAX, ApexParser.SUM, ApexParser.TYPEOF, ApexParser.END, ApexParser.THEN, ApexParser.LIKE, ApexParser.IN, ApexParser.INCLUDES, ApexParser.EXCLUDES, ApexParser.ASC, ApexParser.DESC, ApexParser.NULLS, ApexParser.FIRST, ApexParser.LAST, ApexParser.GROUP, ApexParser.ALL, ApexParser.ROWS, ApexParser.VIEW, ApexParser.HAVING, ApexParser.ROLLUP, ApexParser.TOLABEL, ApexParser.OFFSET, ApexParser.DATA, ApexParser.CATEGORY, ApexParser.AT, ApexParser.ABOVE, ApexParser.BELOW, ApexParser.ABOVE_OR_BELOW, ApexParser.SECURITY_ENFORCED, ApexParser.REFERENCE, ApexParser.CUBE, ApexParser.FORMAT, ApexParser.TRACKING, ApexParser.VIEWSTAT, ApexParser.CUSTOM, ApexParser.STANDARD, ApexParser.CALENDAR_MONTH, ApexParser.CALENDAR_QUARTER, ApexParser.CALENDAR_YEAR, ApexParser.DAY_IN_MONTH, ApexParser.DAY_IN_WEEK, ApexParser.DAY_IN_YEAR, ApexParser.DAY_ONLY, ApexParser.FISCAL_MONTH, ApexParser.FISCAL_QUARTER, ApexParser.FISCAL_YEAR, ApexParser.HOUR_IN_DAY, ApexParser.WEEK_IN_MONTH, ApexParser.WEEK_IN_YEAR, ApexParser.CONVERT_TIMEZONE, ApexParser.YESTERDAY, ApexParser.TODAY, ApexParser.TOMORROW, ApexParser.LAST_WEEK, ApexParser.THIS_WEEK, ApexParser.NEXT_WEEK, ApexParser.LAST_MONTH, ApexParser.THIS_MONTH, ApexParser.NEXT_MONTH, ApexParser.LAST_90_DAYS, ApexParser.NEXT_90_DAYS, ApexParser.LAST_N_DAYS_N, ApexParser.NEXT_N_DAYS_N, ApexParser.NEXT_N_WEEKS_N, ApexParser.LAST_N_WEEKS_N, ApexParser.NEXT_N_MONTHS_N, ApexParser.LAST_N_MONTHS_N, ApexParser.THIS_QUARTER, ApexParser.LAST_QUARTER, ApexParser.NEXT_QUARTER, ApexParser.NEXT_N_QUARTERS_N, ApexParser.LAST_N_QUARTERS_N, ApexParser.THIS_YEAR, ApexParser.LAST_YEAR, ApexParser.NEXT_YEAR, ApexParser.NEXT_N_YEARS_N, ApexParser.LAST_N_YEARS_N, ApexParser.THIS_FISCAL_QUARTER, ApexParser.LAST_FISCAL_QUARTER, ApexParser.NEXT_FISCAL_QUARTER, ApexParser.NEXT_N_FISCAL_QUARTERS_N, ApexParser.LAST_N_FISCAL_QUARTERS_N, ApexParser.THIS_FISCAL_YEAR, ApexParser.LAST_FISCAL_YEAR, ApexParser.NEXT_FISCAL_YEAR, ApexParser.NEXT_N_FISCAL_YEARS_N, ApexParser.LAST_N_FISCAL_YEARS_N, ApexParser.FIND, ApexParser.EMAIL, ApexParser.NAME, ApexParser.PHONE, ApexParser.SIDEBAR, ApexParser.FIELDS, ApexParser.METADATA, ApexParser.PRICEBOOKID, ApexParser.NETWORK, ApexParser.SNIPPET, ApexParser.TARGET_LENGTH, ApexParser.DIVISION, ApexParser.RETURNING, ApexParser.LISTVIEW, ApexParser.Identifier]:
                self.state = 467
                self.typeRef()
                pass
            elif token in [ApexParser.VOID]:
                self.state = 468
                self.match(ApexParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 471
            self.id()
            self.state = 472
            self.formalParameters()
            self.state = 473
            self.match(ApexParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.VariableDeclaratorContext)
            else:
                return self.getTypedRuleContext(ApexParser.VariableDeclaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.COMMA)
            else:
                return self.getToken(ApexParser.COMMA, i)

        def getRuleIndex(self):
            return ApexParser.RULE_variableDeclarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarators" ):
                listener.enterVariableDeclarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarators" ):
                listener.exitVariableDeclarators(self)




    def variableDeclarators(self):

        localctx = ApexParser.VariableDeclaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_variableDeclarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.variableDeclarator()
            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ApexParser.COMMA:
                self.state = 476
                self.match(ApexParser.COMMA)
                self.state = 477
                self.variableDeclarator()
                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id(self):
            return self.getTypedRuleContext(ApexParser.IdContext,0)


        def ASSIGN(self):
            return self.getToken(ApexParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(ApexParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_variableDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarator" ):
                listener.enterVariableDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarator" ):
                listener.exitVariableDeclarator(self)




    def variableDeclarator(self):

        localctx = ApexParser.VariableDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_variableDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.id()
            self.state = 486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.ASSIGN:
                self.state = 484
                self.match(ApexParser.ASSIGN)
                self.state = 485
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(ApexParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(ApexParser.RBRACE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ApexParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.COMMA)
            else:
                return self.getToken(ApexParser.COMMA, i)

        def getRuleIndex(self):
            return ApexParser.RULE_arrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayInitializer" ):
                listener.enterArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayInitializer" ):
                listener.exitArrayInitializer(self)




    def arrayInitializer(self):

        localctx = ApexParser.ArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_arrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.match(ApexParser.LBRACE)
            self.state = 500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.SET) | (1 << ApexParser.SHARING) | (1 << ApexParser.SUPER) | (1 << ApexParser.SWITCH) | (1 << ApexParser.THIS) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.TRIGGER) | (1 << ApexParser.WHEN) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT) | (1 << ApexParser.LIST) | (1 << ApexParser.MAP) | (1 << ApexParser.SELECT) | (1 << ApexParser.COUNT) | (1 << ApexParser.FROM) | (1 << ApexParser.AS) | (1 << ApexParser.USING) | (1 << ApexParser.SCOPE) | (1 << ApexParser.WHERE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ApexParser.ORDER - 64)) | (1 << (ApexParser.BY - 64)) | (1 << (ApexParser.LIMIT - 64)) | (1 << (ApexParser.SOQLAND - 64)) | (1 << (ApexParser.SOQLOR - 64)) | (1 << (ApexParser.NOT - 64)) | (1 << (ApexParser.AVG - 64)) | (1 << (ApexParser.COUNT_DISTINCT - 64)) | (1 << (ApexParser.MIN - 64)) | (1 << (ApexParser.MAX - 64)) | (1 << (ApexParser.SUM - 64)) | (1 << (ApexParser.TYPEOF - 64)) | (1 << (ApexParser.END - 64)) | (1 << (ApexParser.THEN - 64)) | (1 << (ApexParser.LIKE - 64)) | (1 << (ApexParser.IN - 64)) | (1 << (ApexParser.INCLUDES - 64)) | (1 << (ApexParser.EXCLUDES - 64)) | (1 << (ApexParser.ASC - 64)) | (1 << (ApexParser.DESC - 64)) | (1 << (ApexParser.NULLS - 64)) | (1 << (ApexParser.FIRST - 64)) | (1 << (ApexParser.LAST - 64)) | (1 << (ApexParser.GROUP - 64)) | (1 << (ApexParser.ALL - 64)) | (1 << (ApexParser.ROWS - 64)) | (1 << (ApexParser.VIEW - 64)) | (1 << (ApexParser.HAVING - 64)) | (1 << (ApexParser.ROLLUP - 64)) | (1 << (ApexParser.TOLABEL - 64)) | (1 << (ApexParser.OFFSET - 64)) | (1 << (ApexParser.DATA - 64)) | (1 << (ApexParser.CATEGORY - 64)) | (1 << (ApexParser.AT - 64)) | (1 << (ApexParser.ABOVE - 64)) | (1 << (ApexParser.BELOW - 64)) | (1 << (ApexParser.ABOVE_OR_BELOW - 64)) | (1 << (ApexParser.SECURITY_ENFORCED - 64)) | (1 << (ApexParser.REFERENCE - 64)) | (1 << (ApexParser.CUBE - 64)) | (1 << (ApexParser.FORMAT - 64)) | (1 << (ApexParser.TRACKING - 64)) | (1 << (ApexParser.VIEWSTAT - 64)) | (1 << (ApexParser.CUSTOM - 64)) | (1 << (ApexParser.STANDARD - 64)) | (1 << (ApexParser.CALENDAR_MONTH - 64)) | (1 << (ApexParser.CALENDAR_QUARTER - 64)) | (1 << (ApexParser.CALENDAR_YEAR - 64)) | (1 << (ApexParser.DAY_IN_MONTH - 64)) | (1 << (ApexParser.DAY_IN_WEEK - 64)) | (1 << (ApexParser.DAY_IN_YEAR - 64)) | (1 << (ApexParser.DAY_ONLY - 64)) | (1 << (ApexParser.FISCAL_MONTH - 64)) | (1 << (ApexParser.FISCAL_QUARTER - 64)) | (1 << (ApexParser.FISCAL_YEAR - 64)) | (1 << (ApexParser.HOUR_IN_DAY - 64)) | (1 << (ApexParser.WEEK_IN_MONTH - 64)) | (1 << (ApexParser.WEEK_IN_YEAR - 64)) | (1 << (ApexParser.CONVERT_TIMEZONE - 64)) | (1 << (ApexParser.YESTERDAY - 64)) | (1 << (ApexParser.TODAY - 64)) | (1 << (ApexParser.TOMORROW - 64)) | (1 << (ApexParser.LAST_WEEK - 64)) | (1 << (ApexParser.THIS_WEEK - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ApexParser.NEXT_WEEK - 128)) | (1 << (ApexParser.LAST_MONTH - 128)) | (1 << (ApexParser.THIS_MONTH - 128)) | (1 << (ApexParser.NEXT_MONTH - 128)) | (1 << (ApexParser.LAST_90_DAYS - 128)) | (1 << (ApexParser.NEXT_90_DAYS - 128)) | (1 << (ApexParser.LAST_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 128)) | (1 << (ApexParser.LAST_N_WEEKS_N - 128)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 128)) | (1 << (ApexParser.LAST_N_MONTHS_N - 128)) | (1 << (ApexParser.THIS_QUARTER - 128)) | (1 << (ApexParser.LAST_QUARTER - 128)) | (1 << (ApexParser.NEXT_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_YEAR - 128)) | (1 << (ApexParser.LAST_YEAR - 128)) | (1 << (ApexParser.NEXT_YEAR - 128)) | (1 << (ApexParser.NEXT_N_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_YEARS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_QUARTER - 128)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 128)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.FIND - 128)) | (1 << (ApexParser.EMAIL - 128)) | (1 << (ApexParser.NAME - 128)) | (1 << (ApexParser.PHONE - 128)) | (1 << (ApexParser.SIDEBAR - 128)) | (1 << (ApexParser.FIELDS - 128)) | (1 << (ApexParser.METADATA - 128)) | (1 << (ApexParser.PRICEBOOKID - 128)) | (1 << (ApexParser.NETWORK - 128)) | (1 << (ApexParser.SNIPPET - 128)) | (1 << (ApexParser.TARGET_LENGTH - 128)) | (1 << (ApexParser.DIVISION - 128)) | (1 << (ApexParser.RETURNING - 128)) | (1 << (ApexParser.LISTVIEW - 128)) | (1 << (ApexParser.FindLiteral - 128)) | (1 << (ApexParser.IntegerLiteral - 128)) | (1 << (ApexParser.LongLiteral - 128)) | (1 << (ApexParser.NumberLiteral - 128)) | (1 << (ApexParser.BooleanLiteral - 128)) | (1 << (ApexParser.StringLiteral - 128)) | (1 << (ApexParser.LPAREN - 128)) | (1 << (ApexParser.LBRACK - 128)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (ApexParser.BANG - 195)) | (1 << (ApexParser.TILDE - 195)) | (1 << (ApexParser.INC - 195)) | (1 << (ApexParser.DEC - 195)) | (1 << (ApexParser.ADD - 195)) | (1 << (ApexParser.SUB - 195)) | (1 << (ApexParser.Identifier - 195)))) != 0):
                self.state = 489
                self.expression(0)
                self.state = 494
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 490
                        self.match(ApexParser.COMMA)
                        self.state = 491
                        self.expression(0) 
                    self.state = 496
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

                self.state = 498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ApexParser.COMMA:
                    self.state = 497
                    self.match(ApexParser.COMMA)




            self.state = 502
            self.match(ApexParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.TypeNameContext)
            else:
                return self.getTypedRuleContext(ApexParser.TypeNameContext,i)


        def arraySubscripts(self):
            return self.getTypedRuleContext(ApexParser.ArraySubscriptsContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.DOT)
            else:
                return self.getToken(ApexParser.DOT, i)

        def getRuleIndex(self):
            return ApexParser.RULE_typeRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeRef" ):
                listener.enterTypeRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeRef" ):
                listener.exitTypeRef(self)




    def typeRef(self):

        localctx = ApexParser.TypeRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_typeRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.typeName()
            self.state = 509
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 505
                    self.match(ApexParser.DOT)
                    self.state = 506
                    self.typeName() 
                self.state = 511
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

            self.state = 512
            self.arraySubscripts()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArraySubscriptsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.LBRACK)
            else:
                return self.getToken(ApexParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.RBRACK)
            else:
                return self.getToken(ApexParser.RBRACK, i)

        def getRuleIndex(self):
            return ApexParser.RULE_arraySubscripts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArraySubscripts" ):
                listener.enterArraySubscripts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArraySubscripts" ):
                listener.exitArraySubscripts(self)




    def arraySubscripts(self):

        localctx = ApexParser.ArraySubscriptsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_arraySubscripts)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 514
                    self.match(ApexParser.LBRACK)
                    self.state = 515
                    self.match(ApexParser.RBRACK) 
                self.state = 520
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIST(self):
            return self.getToken(ApexParser.LIST, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(ApexParser.TypeArgumentsContext,0)


        def SET(self):
            return self.getToken(ApexParser.SET, 0)

        def MAP(self):
            return self.getToken(ApexParser.MAP, 0)

        def id(self):
            return self.getTypedRuleContext(ApexParser.IdContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)




    def typeName(self):

        localctx = ApexParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_typeName)
        try:
            self.state = 537
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 521
                self.match(ApexParser.LIST)
                self.state = 523
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 522
                    self.typeArguments()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 525
                self.match(ApexParser.SET)
                self.state = 527
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 526
                    self.typeArguments()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 529
                self.match(ApexParser.MAP)
                self.state = 531
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 530
                    self.typeArguments()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 533
                self.id()
                self.state = 535
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                if la_ == 1:
                    self.state = 534
                    self.typeArguments()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(ApexParser.LT, 0)

        def typeList(self):
            return self.getTypedRuleContext(ApexParser.TypeListContext,0)


        def GT(self):
            return self.getToken(ApexParser.GT, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)




    def typeArguments(self):

        localctx = ApexParser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_typeArguments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(ApexParser.LT)
            self.state = 540
            self.typeList()
            self.state = 541
            self.match(ApexParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ApexParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ApexParser.RPAREN, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(ApexParser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_formalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameters" ):
                listener.enterFormalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameters" ):
                listener.exitFormalParameters(self)




    def formalParameters(self):

        localctx = ApexParser.FormalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_formalParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            self.match(ApexParser.LPAREN)
            self.state = 545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.FINAL) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE) | (1 << ApexParser.PROTECTED) | (1 << ApexParser.PUBLIC) | (1 << ApexParser.SET) | (1 << ApexParser.SHARING) | (1 << ApexParser.STATIC) | (1 << ApexParser.SWITCH) | (1 << ApexParser.TESTMETHOD) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.TRIGGER) | (1 << ApexParser.VIRTUAL) | (1 << ApexParser.WEBSERVICE) | (1 << ApexParser.WHEN) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT) | (1 << ApexParser.LIST) | (1 << ApexParser.MAP) | (1 << ApexParser.SELECT) | (1 << ApexParser.COUNT) | (1 << ApexParser.FROM) | (1 << ApexParser.AS) | (1 << ApexParser.USING) | (1 << ApexParser.SCOPE) | (1 << ApexParser.WHERE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ApexParser.ORDER - 64)) | (1 << (ApexParser.BY - 64)) | (1 << (ApexParser.LIMIT - 64)) | (1 << (ApexParser.SOQLAND - 64)) | (1 << (ApexParser.SOQLOR - 64)) | (1 << (ApexParser.NOT - 64)) | (1 << (ApexParser.AVG - 64)) | (1 << (ApexParser.COUNT_DISTINCT - 64)) | (1 << (ApexParser.MIN - 64)) | (1 << (ApexParser.MAX - 64)) | (1 << (ApexParser.SUM - 64)) | (1 << (ApexParser.TYPEOF - 64)) | (1 << (ApexParser.END - 64)) | (1 << (ApexParser.THEN - 64)) | (1 << (ApexParser.LIKE - 64)) | (1 << (ApexParser.IN - 64)) | (1 << (ApexParser.INCLUDES - 64)) | (1 << (ApexParser.EXCLUDES - 64)) | (1 << (ApexParser.ASC - 64)) | (1 << (ApexParser.DESC - 64)) | (1 << (ApexParser.NULLS - 64)) | (1 << (ApexParser.FIRST - 64)) | (1 << (ApexParser.LAST - 64)) | (1 << (ApexParser.GROUP - 64)) | (1 << (ApexParser.ALL - 64)) | (1 << (ApexParser.ROWS - 64)) | (1 << (ApexParser.VIEW - 64)) | (1 << (ApexParser.HAVING - 64)) | (1 << (ApexParser.ROLLUP - 64)) | (1 << (ApexParser.TOLABEL - 64)) | (1 << (ApexParser.OFFSET - 64)) | (1 << (ApexParser.DATA - 64)) | (1 << (ApexParser.CATEGORY - 64)) | (1 << (ApexParser.AT - 64)) | (1 << (ApexParser.ABOVE - 64)) | (1 << (ApexParser.BELOW - 64)) | (1 << (ApexParser.ABOVE_OR_BELOW - 64)) | (1 << (ApexParser.SECURITY_ENFORCED - 64)) | (1 << (ApexParser.REFERENCE - 64)) | (1 << (ApexParser.CUBE - 64)) | (1 << (ApexParser.FORMAT - 64)) | (1 << (ApexParser.TRACKING - 64)) | (1 << (ApexParser.VIEWSTAT - 64)) | (1 << (ApexParser.CUSTOM - 64)) | (1 << (ApexParser.STANDARD - 64)) | (1 << (ApexParser.CALENDAR_MONTH - 64)) | (1 << (ApexParser.CALENDAR_QUARTER - 64)) | (1 << (ApexParser.CALENDAR_YEAR - 64)) | (1 << (ApexParser.DAY_IN_MONTH - 64)) | (1 << (ApexParser.DAY_IN_WEEK - 64)) | (1 << (ApexParser.DAY_IN_YEAR - 64)) | (1 << (ApexParser.DAY_ONLY - 64)) | (1 << (ApexParser.FISCAL_MONTH - 64)) | (1 << (ApexParser.FISCAL_QUARTER - 64)) | (1 << (ApexParser.FISCAL_YEAR - 64)) | (1 << (ApexParser.HOUR_IN_DAY - 64)) | (1 << (ApexParser.WEEK_IN_MONTH - 64)) | (1 << (ApexParser.WEEK_IN_YEAR - 64)) | (1 << (ApexParser.CONVERT_TIMEZONE - 64)) | (1 << (ApexParser.YESTERDAY - 64)) | (1 << (ApexParser.TODAY - 64)) | (1 << (ApexParser.TOMORROW - 64)) | (1 << (ApexParser.LAST_WEEK - 64)) | (1 << (ApexParser.THIS_WEEK - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ApexParser.NEXT_WEEK - 128)) | (1 << (ApexParser.LAST_MONTH - 128)) | (1 << (ApexParser.THIS_MONTH - 128)) | (1 << (ApexParser.NEXT_MONTH - 128)) | (1 << (ApexParser.LAST_90_DAYS - 128)) | (1 << (ApexParser.NEXT_90_DAYS - 128)) | (1 << (ApexParser.LAST_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 128)) | (1 << (ApexParser.LAST_N_WEEKS_N - 128)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 128)) | (1 << (ApexParser.LAST_N_MONTHS_N - 128)) | (1 << (ApexParser.THIS_QUARTER - 128)) | (1 << (ApexParser.LAST_QUARTER - 128)) | (1 << (ApexParser.NEXT_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_YEAR - 128)) | (1 << (ApexParser.LAST_YEAR - 128)) | (1 << (ApexParser.NEXT_YEAR - 128)) | (1 << (ApexParser.NEXT_N_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_YEARS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_QUARTER - 128)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 128)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.FIND - 128)) | (1 << (ApexParser.EMAIL - 128)) | (1 << (ApexParser.NAME - 128)) | (1 << (ApexParser.PHONE - 128)) | (1 << (ApexParser.SIDEBAR - 128)) | (1 << (ApexParser.FIELDS - 128)) | (1 << (ApexParser.METADATA - 128)) | (1 << (ApexParser.PRICEBOOKID - 128)) | (1 << (ApexParser.NETWORK - 128)) | (1 << (ApexParser.SNIPPET - 128)) | (1 << (ApexParser.TARGET_LENGTH - 128)) | (1 << (ApexParser.DIVISION - 128)) | (1 << (ApexParser.RETURNING - 128)) | (1 << (ApexParser.LISTVIEW - 128)))) != 0) or _la==ApexParser.ATSIGN or _la==ApexParser.Identifier:
                self.state = 544
                self.formalParameterList()


            self.state = 547
            self.match(ApexParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.FormalParameterContext)
            else:
                return self.getTypedRuleContext(ApexParser.FormalParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.COMMA)
            else:
                return self.getToken(ApexParser.COMMA, i)

        def getRuleIndex(self):
            return ApexParser.RULE_formalParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterList" ):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterList" ):
                listener.exitFormalParameterList(self)




    def formalParameterList(self):

        localctx = ApexParser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_formalParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self.formalParameter()
            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ApexParser.COMMA:
                self.state = 550
                self.match(ApexParser.COMMA)
                self.state = 551
                self.formalParameter()
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeRef(self):
            return self.getTypedRuleContext(ApexParser.TypeRefContext,0)


        def id(self):
            return self.getTypedRuleContext(ApexParser.IdContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ModifierContext)
            else:
                return self.getTypedRuleContext(ApexParser.ModifierContext,i)


        def getRuleIndex(self):
            return ApexParser.RULE_formalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameter" ):
                listener.enterFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameter" ):
                listener.exitFormalParameter(self)




    def formalParameter(self):

        localctx = ApexParser.FormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_formalParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 557
                    self.modifier() 
                self.state = 562
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

            self.state = 563
            self.typeRef()
            self.state = 564
            self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.IdContext)
            else:
                return self.getTypedRuleContext(ApexParser.IdContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.DOT)
            else:
                return self.getToken(ApexParser.DOT, i)

        def getRuleIndex(self):
            return ApexParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)




    def qualifiedName(self):

        localctx = ApexParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_qualifiedName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.id()
            self.state = 571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ApexParser.DOT:
                self.state = 567
                self.match(ApexParser.DOT)
                self.state = 568
                self.id()
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntegerLiteral(self):
            return self.getToken(ApexParser.IntegerLiteral, 0)

        def LongLiteral(self):
            return self.getToken(ApexParser.LongLiteral, 0)

        def NumberLiteral(self):
            return self.getToken(ApexParser.NumberLiteral, 0)

        def StringLiteral(self):
            return self.getToken(ApexParser.StringLiteral, 0)

        def BooleanLiteral(self):
            return self.getToken(ApexParser.BooleanLiteral, 0)

        def NULL(self):
            return self.getToken(ApexParser.NULL, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = ApexParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            _la = self._input.LA(1)
            if not(_la==ApexParser.NULL or ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (ApexParser.IntegerLiteral - 177)) | (1 << (ApexParser.LongLiteral - 177)) | (1 << (ApexParser.NumberLiteral - 177)) | (1 << (ApexParser.BooleanLiteral - 177)) | (1 << (ApexParser.StringLiteral - 177)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATSIGN(self):
            return self.getToken(ApexParser.ATSIGN, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(ApexParser.QualifiedNameContext,0)


        def LPAREN(self):
            return self.getToken(ApexParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ApexParser.RPAREN, 0)

        def elementValuePairs(self):
            return self.getTypedRuleContext(ApexParser.ElementValuePairsContext,0)


        def elementValue(self):
            return self.getTypedRuleContext(ApexParser.ElementValueContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)




    def annotation(self):

        localctx = ApexParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.match(ApexParser.ATSIGN)
            self.state = 577
            self.qualifiedName()
            self.state = 584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.LPAREN:
                self.state = 578
                self.match(ApexParser.LPAREN)
                self.state = 581
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 579
                    self.elementValuePairs()

                elif la_ == 2:
                    self.state = 580
                    self.elementValue()


                self.state = 583
                self.match(ApexParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementValuePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ElementValuePairContext)
            else:
                return self.getTypedRuleContext(ApexParser.ElementValuePairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.COMMA)
            else:
                return self.getToken(ApexParser.COMMA, i)

        def getRuleIndex(self):
            return ApexParser.RULE_elementValuePairs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePairs" ):
                listener.enterElementValuePairs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePairs" ):
                listener.exitElementValuePairs(self)




    def elementValuePairs(self):

        localctx = ApexParser.ElementValuePairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_elementValuePairs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.elementValuePair()
            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.SET) | (1 << ApexParser.SHARING) | (1 << ApexParser.SWITCH) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.TRIGGER) | (1 << ApexParser.WHEN) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT) | (1 << ApexParser.SELECT) | (1 << ApexParser.COUNT) | (1 << ApexParser.FROM) | (1 << ApexParser.AS) | (1 << ApexParser.USING) | (1 << ApexParser.SCOPE) | (1 << ApexParser.WHERE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ApexParser.ORDER - 64)) | (1 << (ApexParser.BY - 64)) | (1 << (ApexParser.LIMIT - 64)) | (1 << (ApexParser.SOQLAND - 64)) | (1 << (ApexParser.SOQLOR - 64)) | (1 << (ApexParser.NOT - 64)) | (1 << (ApexParser.AVG - 64)) | (1 << (ApexParser.COUNT_DISTINCT - 64)) | (1 << (ApexParser.MIN - 64)) | (1 << (ApexParser.MAX - 64)) | (1 << (ApexParser.SUM - 64)) | (1 << (ApexParser.TYPEOF - 64)) | (1 << (ApexParser.END - 64)) | (1 << (ApexParser.THEN - 64)) | (1 << (ApexParser.LIKE - 64)) | (1 << (ApexParser.IN - 64)) | (1 << (ApexParser.INCLUDES - 64)) | (1 << (ApexParser.EXCLUDES - 64)) | (1 << (ApexParser.ASC - 64)) | (1 << (ApexParser.DESC - 64)) | (1 << (ApexParser.NULLS - 64)) | (1 << (ApexParser.FIRST - 64)) | (1 << (ApexParser.LAST - 64)) | (1 << (ApexParser.GROUP - 64)) | (1 << (ApexParser.ALL - 64)) | (1 << (ApexParser.ROWS - 64)) | (1 << (ApexParser.VIEW - 64)) | (1 << (ApexParser.HAVING - 64)) | (1 << (ApexParser.ROLLUP - 64)) | (1 << (ApexParser.TOLABEL - 64)) | (1 << (ApexParser.OFFSET - 64)) | (1 << (ApexParser.DATA - 64)) | (1 << (ApexParser.CATEGORY - 64)) | (1 << (ApexParser.AT - 64)) | (1 << (ApexParser.ABOVE - 64)) | (1 << (ApexParser.BELOW - 64)) | (1 << (ApexParser.ABOVE_OR_BELOW - 64)) | (1 << (ApexParser.SECURITY_ENFORCED - 64)) | (1 << (ApexParser.REFERENCE - 64)) | (1 << (ApexParser.CUBE - 64)) | (1 << (ApexParser.FORMAT - 64)) | (1 << (ApexParser.TRACKING - 64)) | (1 << (ApexParser.VIEWSTAT - 64)) | (1 << (ApexParser.CUSTOM - 64)) | (1 << (ApexParser.STANDARD - 64)) | (1 << (ApexParser.CALENDAR_MONTH - 64)) | (1 << (ApexParser.CALENDAR_QUARTER - 64)) | (1 << (ApexParser.CALENDAR_YEAR - 64)) | (1 << (ApexParser.DAY_IN_MONTH - 64)) | (1 << (ApexParser.DAY_IN_WEEK - 64)) | (1 << (ApexParser.DAY_IN_YEAR - 64)) | (1 << (ApexParser.DAY_ONLY - 64)) | (1 << (ApexParser.FISCAL_MONTH - 64)) | (1 << (ApexParser.FISCAL_QUARTER - 64)) | (1 << (ApexParser.FISCAL_YEAR - 64)) | (1 << (ApexParser.HOUR_IN_DAY - 64)) | (1 << (ApexParser.WEEK_IN_MONTH - 64)) | (1 << (ApexParser.WEEK_IN_YEAR - 64)) | (1 << (ApexParser.CONVERT_TIMEZONE - 64)) | (1 << (ApexParser.YESTERDAY - 64)) | (1 << (ApexParser.TODAY - 64)) | (1 << (ApexParser.TOMORROW - 64)) | (1 << (ApexParser.LAST_WEEK - 64)) | (1 << (ApexParser.THIS_WEEK - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ApexParser.NEXT_WEEK - 128)) | (1 << (ApexParser.LAST_MONTH - 128)) | (1 << (ApexParser.THIS_MONTH - 128)) | (1 << (ApexParser.NEXT_MONTH - 128)) | (1 << (ApexParser.LAST_90_DAYS - 128)) | (1 << (ApexParser.NEXT_90_DAYS - 128)) | (1 << (ApexParser.LAST_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 128)) | (1 << (ApexParser.LAST_N_WEEKS_N - 128)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 128)) | (1 << (ApexParser.LAST_N_MONTHS_N - 128)) | (1 << (ApexParser.THIS_QUARTER - 128)) | (1 << (ApexParser.LAST_QUARTER - 128)) | (1 << (ApexParser.NEXT_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_YEAR - 128)) | (1 << (ApexParser.LAST_YEAR - 128)) | (1 << (ApexParser.NEXT_YEAR - 128)) | (1 << (ApexParser.NEXT_N_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_YEARS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_QUARTER - 128)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 128)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.FIND - 128)) | (1 << (ApexParser.EMAIL - 128)) | (1 << (ApexParser.NAME - 128)) | (1 << (ApexParser.PHONE - 128)) | (1 << (ApexParser.SIDEBAR - 128)) | (1 << (ApexParser.FIELDS - 128)) | (1 << (ApexParser.METADATA - 128)) | (1 << (ApexParser.PRICEBOOKID - 128)) | (1 << (ApexParser.NETWORK - 128)) | (1 << (ApexParser.SNIPPET - 128)) | (1 << (ApexParser.TARGET_LENGTH - 128)) | (1 << (ApexParser.DIVISION - 128)) | (1 << (ApexParser.RETURNING - 128)) | (1 << (ApexParser.LISTVIEW - 128)) | (1 << (ApexParser.COMMA - 128)))) != 0) or _la==ApexParser.Identifier:
                self.state = 588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ApexParser.COMMA:
                    self.state = 587
                    self.match(ApexParser.COMMA)


                self.state = 590
                self.elementValuePair()
                self.state = 595
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id(self):
            return self.getTypedRuleContext(ApexParser.IdContext,0)


        def ASSIGN(self):
            return self.getToken(ApexParser.ASSIGN, 0)

        def elementValue(self):
            return self.getTypedRuleContext(ApexParser.ElementValueContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_elementValuePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePair" ):
                listener.enterElementValuePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePair" ):
                listener.exitElementValuePair(self)




    def elementValuePair(self):

        localctx = ApexParser.ElementValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_elementValuePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.id()
            self.state = 597
            self.match(ApexParser.ASSIGN)
            self.state = 598
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ApexParser.ExpressionContext,0)


        def annotation(self):
            return self.getTypedRuleContext(ApexParser.AnnotationContext,0)


        def elementValueArrayInitializer(self):
            return self.getTypedRuleContext(ApexParser.ElementValueArrayInitializerContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_elementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValue" ):
                listener.enterElementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValue" ):
                listener.exitElementValue(self)




    def elementValue(self):

        localctx = ApexParser.ElementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_elementValue)
        try:
            self.state = 603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ApexParser.AFTER, ApexParser.BEFORE, ApexParser.GET, ApexParser.INHERITED, ApexParser.INSTANCEOF, ApexParser.NEW, ApexParser.NULL, ApexParser.SET, ApexParser.SHARING, ApexParser.SUPER, ApexParser.SWITCH, ApexParser.THIS, ApexParser.TRANSIENT, ApexParser.TRIGGER, ApexParser.WHEN, ApexParser.WITH, ApexParser.WITHOUT, ApexParser.LIST, ApexParser.MAP, ApexParser.SELECT, ApexParser.COUNT, ApexParser.FROM, ApexParser.AS, ApexParser.USING, ApexParser.SCOPE, ApexParser.WHERE, ApexParser.ORDER, ApexParser.BY, ApexParser.LIMIT, ApexParser.SOQLAND, ApexParser.SOQLOR, ApexParser.NOT, ApexParser.AVG, ApexParser.COUNT_DISTINCT, ApexParser.MIN, ApexParser.MAX, ApexParser.SUM, ApexParser.TYPEOF, ApexParser.END, ApexParser.THEN, ApexParser.LIKE, ApexParser.IN, ApexParser.INCLUDES, ApexParser.EXCLUDES, ApexParser.ASC, ApexParser.DESC, ApexParser.NULLS, ApexParser.FIRST, ApexParser.LAST, ApexParser.GROUP, ApexParser.ALL, ApexParser.ROWS, ApexParser.VIEW, ApexParser.HAVING, ApexParser.ROLLUP, ApexParser.TOLABEL, ApexParser.OFFSET, ApexParser.DATA, ApexParser.CATEGORY, ApexParser.AT, ApexParser.ABOVE, ApexParser.BELOW, ApexParser.ABOVE_OR_BELOW, ApexParser.SECURITY_ENFORCED, ApexParser.REFERENCE, ApexParser.CUBE, ApexParser.FORMAT, ApexParser.TRACKING, ApexParser.VIEWSTAT, ApexParser.CUSTOM, ApexParser.STANDARD, ApexParser.CALENDAR_MONTH, ApexParser.CALENDAR_QUARTER, ApexParser.CALENDAR_YEAR, ApexParser.DAY_IN_MONTH, ApexParser.DAY_IN_WEEK, ApexParser.DAY_IN_YEAR, ApexParser.DAY_ONLY, ApexParser.FISCAL_MONTH, ApexParser.FISCAL_QUARTER, ApexParser.FISCAL_YEAR, ApexParser.HOUR_IN_DAY, ApexParser.WEEK_IN_MONTH, ApexParser.WEEK_IN_YEAR, ApexParser.CONVERT_TIMEZONE, ApexParser.YESTERDAY, ApexParser.TODAY, ApexParser.TOMORROW, ApexParser.LAST_WEEK, ApexParser.THIS_WEEK, ApexParser.NEXT_WEEK, ApexParser.LAST_MONTH, ApexParser.THIS_MONTH, ApexParser.NEXT_MONTH, ApexParser.LAST_90_DAYS, ApexParser.NEXT_90_DAYS, ApexParser.LAST_N_DAYS_N, ApexParser.NEXT_N_DAYS_N, ApexParser.NEXT_N_WEEKS_N, ApexParser.LAST_N_WEEKS_N, ApexParser.NEXT_N_MONTHS_N, ApexParser.LAST_N_MONTHS_N, ApexParser.THIS_QUARTER, ApexParser.LAST_QUARTER, ApexParser.NEXT_QUARTER, ApexParser.NEXT_N_QUARTERS_N, ApexParser.LAST_N_QUARTERS_N, ApexParser.THIS_YEAR, ApexParser.LAST_YEAR, ApexParser.NEXT_YEAR, ApexParser.NEXT_N_YEARS_N, ApexParser.LAST_N_YEARS_N, ApexParser.THIS_FISCAL_QUARTER, ApexParser.LAST_FISCAL_QUARTER, ApexParser.NEXT_FISCAL_QUARTER, ApexParser.NEXT_N_FISCAL_QUARTERS_N, ApexParser.LAST_N_FISCAL_QUARTERS_N, ApexParser.THIS_FISCAL_YEAR, ApexParser.LAST_FISCAL_YEAR, ApexParser.NEXT_FISCAL_YEAR, ApexParser.NEXT_N_FISCAL_YEARS_N, ApexParser.LAST_N_FISCAL_YEARS_N, ApexParser.FIND, ApexParser.EMAIL, ApexParser.NAME, ApexParser.PHONE, ApexParser.SIDEBAR, ApexParser.FIELDS, ApexParser.METADATA, ApexParser.PRICEBOOKID, ApexParser.NETWORK, ApexParser.SNIPPET, ApexParser.TARGET_LENGTH, ApexParser.DIVISION, ApexParser.RETURNING, ApexParser.LISTVIEW, ApexParser.FindLiteral, ApexParser.IntegerLiteral, ApexParser.LongLiteral, ApexParser.NumberLiteral, ApexParser.BooleanLiteral, ApexParser.StringLiteral, ApexParser.LPAREN, ApexParser.LBRACK, ApexParser.BANG, ApexParser.TILDE, ApexParser.INC, ApexParser.DEC, ApexParser.ADD, ApexParser.SUB, ApexParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 600
                self.expression(0)
                pass
            elif token in [ApexParser.ATSIGN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 601
                self.annotation()
                pass
            elif token in [ApexParser.LBRACE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 602
                self.elementValueArrayInitializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(ApexParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(ApexParser.RBRACE, 0)

        def elementValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ElementValueContext)
            else:
                return self.getTypedRuleContext(ApexParser.ElementValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.COMMA)
            else:
                return self.getToken(ApexParser.COMMA, i)

        def getRuleIndex(self):
            return ApexParser.RULE_elementValueArrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValueArrayInitializer" ):
                listener.enterElementValueArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValueArrayInitializer" ):
                listener.exitElementValueArrayInitializer(self)




    def elementValueArrayInitializer(self):

        localctx = ApexParser.ElementValueArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_elementValueArrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(ApexParser.LBRACE)
            self.state = 614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.SET) | (1 << ApexParser.SHARING) | (1 << ApexParser.SUPER) | (1 << ApexParser.SWITCH) | (1 << ApexParser.THIS) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.TRIGGER) | (1 << ApexParser.WHEN) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT) | (1 << ApexParser.LIST) | (1 << ApexParser.MAP) | (1 << ApexParser.SELECT) | (1 << ApexParser.COUNT) | (1 << ApexParser.FROM) | (1 << ApexParser.AS) | (1 << ApexParser.USING) | (1 << ApexParser.SCOPE) | (1 << ApexParser.WHERE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ApexParser.ORDER - 64)) | (1 << (ApexParser.BY - 64)) | (1 << (ApexParser.LIMIT - 64)) | (1 << (ApexParser.SOQLAND - 64)) | (1 << (ApexParser.SOQLOR - 64)) | (1 << (ApexParser.NOT - 64)) | (1 << (ApexParser.AVG - 64)) | (1 << (ApexParser.COUNT_DISTINCT - 64)) | (1 << (ApexParser.MIN - 64)) | (1 << (ApexParser.MAX - 64)) | (1 << (ApexParser.SUM - 64)) | (1 << (ApexParser.TYPEOF - 64)) | (1 << (ApexParser.END - 64)) | (1 << (ApexParser.THEN - 64)) | (1 << (ApexParser.LIKE - 64)) | (1 << (ApexParser.IN - 64)) | (1 << (ApexParser.INCLUDES - 64)) | (1 << (ApexParser.EXCLUDES - 64)) | (1 << (ApexParser.ASC - 64)) | (1 << (ApexParser.DESC - 64)) | (1 << (ApexParser.NULLS - 64)) | (1 << (ApexParser.FIRST - 64)) | (1 << (ApexParser.LAST - 64)) | (1 << (ApexParser.GROUP - 64)) | (1 << (ApexParser.ALL - 64)) | (1 << (ApexParser.ROWS - 64)) | (1 << (ApexParser.VIEW - 64)) | (1 << (ApexParser.HAVING - 64)) | (1 << (ApexParser.ROLLUP - 64)) | (1 << (ApexParser.TOLABEL - 64)) | (1 << (ApexParser.OFFSET - 64)) | (1 << (ApexParser.DATA - 64)) | (1 << (ApexParser.CATEGORY - 64)) | (1 << (ApexParser.AT - 64)) | (1 << (ApexParser.ABOVE - 64)) | (1 << (ApexParser.BELOW - 64)) | (1 << (ApexParser.ABOVE_OR_BELOW - 64)) | (1 << (ApexParser.SECURITY_ENFORCED - 64)) | (1 << (ApexParser.REFERENCE - 64)) | (1 << (ApexParser.CUBE - 64)) | (1 << (ApexParser.FORMAT - 64)) | (1 << (ApexParser.TRACKING - 64)) | (1 << (ApexParser.VIEWSTAT - 64)) | (1 << (ApexParser.CUSTOM - 64)) | (1 << (ApexParser.STANDARD - 64)) | (1 << (ApexParser.CALENDAR_MONTH - 64)) | (1 << (ApexParser.CALENDAR_QUARTER - 64)) | (1 << (ApexParser.CALENDAR_YEAR - 64)) | (1 << (ApexParser.DAY_IN_MONTH - 64)) | (1 << (ApexParser.DAY_IN_WEEK - 64)) | (1 << (ApexParser.DAY_IN_YEAR - 64)) | (1 << (ApexParser.DAY_ONLY - 64)) | (1 << (ApexParser.FISCAL_MONTH - 64)) | (1 << (ApexParser.FISCAL_QUARTER - 64)) | (1 << (ApexParser.FISCAL_YEAR - 64)) | (1 << (ApexParser.HOUR_IN_DAY - 64)) | (1 << (ApexParser.WEEK_IN_MONTH - 64)) | (1 << (ApexParser.WEEK_IN_YEAR - 64)) | (1 << (ApexParser.CONVERT_TIMEZONE - 64)) | (1 << (ApexParser.YESTERDAY - 64)) | (1 << (ApexParser.TODAY - 64)) | (1 << (ApexParser.TOMORROW - 64)) | (1 << (ApexParser.LAST_WEEK - 64)) | (1 << (ApexParser.THIS_WEEK - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ApexParser.NEXT_WEEK - 128)) | (1 << (ApexParser.LAST_MONTH - 128)) | (1 << (ApexParser.THIS_MONTH - 128)) | (1 << (ApexParser.NEXT_MONTH - 128)) | (1 << (ApexParser.LAST_90_DAYS - 128)) | (1 << (ApexParser.NEXT_90_DAYS - 128)) | (1 << (ApexParser.LAST_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 128)) | (1 << (ApexParser.LAST_N_WEEKS_N - 128)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 128)) | (1 << (ApexParser.LAST_N_MONTHS_N - 128)) | (1 << (ApexParser.THIS_QUARTER - 128)) | (1 << (ApexParser.LAST_QUARTER - 128)) | (1 << (ApexParser.NEXT_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_YEAR - 128)) | (1 << (ApexParser.LAST_YEAR - 128)) | (1 << (ApexParser.NEXT_YEAR - 128)) | (1 << (ApexParser.NEXT_N_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_YEARS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_QUARTER - 128)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 128)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.FIND - 128)) | (1 << (ApexParser.EMAIL - 128)) | (1 << (ApexParser.NAME - 128)) | (1 << (ApexParser.PHONE - 128)) | (1 << (ApexParser.SIDEBAR - 128)) | (1 << (ApexParser.FIELDS - 128)) | (1 << (ApexParser.METADATA - 128)) | (1 << (ApexParser.PRICEBOOKID - 128)) | (1 << (ApexParser.NETWORK - 128)) | (1 << (ApexParser.SNIPPET - 128)) | (1 << (ApexParser.TARGET_LENGTH - 128)) | (1 << (ApexParser.DIVISION - 128)) | (1 << (ApexParser.RETURNING - 128)) | (1 << (ApexParser.LISTVIEW - 128)) | (1 << (ApexParser.FindLiteral - 128)) | (1 << (ApexParser.IntegerLiteral - 128)) | (1 << (ApexParser.LongLiteral - 128)) | (1 << (ApexParser.NumberLiteral - 128)) | (1 << (ApexParser.BooleanLiteral - 128)) | (1 << (ApexParser.StringLiteral - 128)) | (1 << (ApexParser.LPAREN - 128)) | (1 << (ApexParser.LBRACE - 128)) | (1 << (ApexParser.LBRACK - 128)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (ApexParser.BANG - 195)) | (1 << (ApexParser.TILDE - 195)) | (1 << (ApexParser.INC - 195)) | (1 << (ApexParser.DEC - 195)) | (1 << (ApexParser.ADD - 195)) | (1 << (ApexParser.SUB - 195)) | (1 << (ApexParser.ATSIGN - 195)) | (1 << (ApexParser.Identifier - 195)))) != 0):
                self.state = 606
                self.elementValue()
                self.state = 611
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 607
                        self.match(ApexParser.COMMA)
                        self.state = 608
                        self.elementValue() 
                    self.state = 613
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,44,self._ctx)



            self.state = 617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.COMMA:
                self.state = 616
                self.match(ApexParser.COMMA)


            self.state = 619
            self.match(ApexParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(ApexParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(ApexParser.RBRACE, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.StatementContext)
            else:
                return self.getTypedRuleContext(ApexParser.StatementContext,i)


        def getRuleIndex(self):
            return ApexParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = ApexParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.match(ApexParser.LBRACE)
            self.state = 625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.BREAK) | (1 << ApexParser.CONTINUE) | (1 << ApexParser.DELETE) | (1 << ApexParser.DO) | (1 << ApexParser.FINAL) | (1 << ApexParser.FOR) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.IF) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSERT) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.MERGE) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE) | (1 << ApexParser.PROTECTED) | (1 << ApexParser.PUBLIC) | (1 << ApexParser.RETURN) | (1 << ApexParser.SYSTEMRUNAS) | (1 << ApexParser.SET) | (1 << ApexParser.SHARING) | (1 << ApexParser.STATIC) | (1 << ApexParser.SUPER) | (1 << ApexParser.SWITCH) | (1 << ApexParser.TESTMETHOD) | (1 << ApexParser.THIS) | (1 << ApexParser.THROW) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.TRIGGER) | (1 << ApexParser.TRY) | (1 << ApexParser.UNDELETE) | (1 << ApexParser.UPDATE) | (1 << ApexParser.UPSERT) | (1 << ApexParser.VIRTUAL) | (1 << ApexParser.WEBSERVICE) | (1 << ApexParser.WHEN) | (1 << ApexParser.WHILE) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT) | (1 << ApexParser.LIST) | (1 << ApexParser.MAP) | (1 << ApexParser.SELECT) | (1 << ApexParser.COUNT) | (1 << ApexParser.FROM) | (1 << ApexParser.AS) | (1 << ApexParser.USING) | (1 << ApexParser.SCOPE) | (1 << ApexParser.WHERE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ApexParser.ORDER - 64)) | (1 << (ApexParser.BY - 64)) | (1 << (ApexParser.LIMIT - 64)) | (1 << (ApexParser.SOQLAND - 64)) | (1 << (ApexParser.SOQLOR - 64)) | (1 << (ApexParser.NOT - 64)) | (1 << (ApexParser.AVG - 64)) | (1 << (ApexParser.COUNT_DISTINCT - 64)) | (1 << (ApexParser.MIN - 64)) | (1 << (ApexParser.MAX - 64)) | (1 << (ApexParser.SUM - 64)) | (1 << (ApexParser.TYPEOF - 64)) | (1 << (ApexParser.END - 64)) | (1 << (ApexParser.THEN - 64)) | (1 << (ApexParser.LIKE - 64)) | (1 << (ApexParser.IN - 64)) | (1 << (ApexParser.INCLUDES - 64)) | (1 << (ApexParser.EXCLUDES - 64)) | (1 << (ApexParser.ASC - 64)) | (1 << (ApexParser.DESC - 64)) | (1 << (ApexParser.NULLS - 64)) | (1 << (ApexParser.FIRST - 64)) | (1 << (ApexParser.LAST - 64)) | (1 << (ApexParser.GROUP - 64)) | (1 << (ApexParser.ALL - 64)) | (1 << (ApexParser.ROWS - 64)) | (1 << (ApexParser.VIEW - 64)) | (1 << (ApexParser.HAVING - 64)) | (1 << (ApexParser.ROLLUP - 64)) | (1 << (ApexParser.TOLABEL - 64)) | (1 << (ApexParser.OFFSET - 64)) | (1 << (ApexParser.DATA - 64)) | (1 << (ApexParser.CATEGORY - 64)) | (1 << (ApexParser.AT - 64)) | (1 << (ApexParser.ABOVE - 64)) | (1 << (ApexParser.BELOW - 64)) | (1 << (ApexParser.ABOVE_OR_BELOW - 64)) | (1 << (ApexParser.SECURITY_ENFORCED - 64)) | (1 << (ApexParser.REFERENCE - 64)) | (1 << (ApexParser.CUBE - 64)) | (1 << (ApexParser.FORMAT - 64)) | (1 << (ApexParser.TRACKING - 64)) | (1 << (ApexParser.VIEWSTAT - 64)) | (1 << (ApexParser.CUSTOM - 64)) | (1 << (ApexParser.STANDARD - 64)) | (1 << (ApexParser.CALENDAR_MONTH - 64)) | (1 << (ApexParser.CALENDAR_QUARTER - 64)) | (1 << (ApexParser.CALENDAR_YEAR - 64)) | (1 << (ApexParser.DAY_IN_MONTH - 64)) | (1 << (ApexParser.DAY_IN_WEEK - 64)) | (1 << (ApexParser.DAY_IN_YEAR - 64)) | (1 << (ApexParser.DAY_ONLY - 64)) | (1 << (ApexParser.FISCAL_MONTH - 64)) | (1 << (ApexParser.FISCAL_QUARTER - 64)) | (1 << (ApexParser.FISCAL_YEAR - 64)) | (1 << (ApexParser.HOUR_IN_DAY - 64)) | (1 << (ApexParser.WEEK_IN_MONTH - 64)) | (1 << (ApexParser.WEEK_IN_YEAR - 64)) | (1 << (ApexParser.CONVERT_TIMEZONE - 64)) | (1 << (ApexParser.YESTERDAY - 64)) | (1 << (ApexParser.TODAY - 64)) | (1 << (ApexParser.TOMORROW - 64)) | (1 << (ApexParser.LAST_WEEK - 64)) | (1 << (ApexParser.THIS_WEEK - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ApexParser.NEXT_WEEK - 128)) | (1 << (ApexParser.LAST_MONTH - 128)) | (1 << (ApexParser.THIS_MONTH - 128)) | (1 << (ApexParser.NEXT_MONTH - 128)) | (1 << (ApexParser.LAST_90_DAYS - 128)) | (1 << (ApexParser.NEXT_90_DAYS - 128)) | (1 << (ApexParser.LAST_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 128)) | (1 << (ApexParser.LAST_N_WEEKS_N - 128)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 128)) | (1 << (ApexParser.LAST_N_MONTHS_N - 128)) | (1 << (ApexParser.THIS_QUARTER - 128)) | (1 << (ApexParser.LAST_QUARTER - 128)) | (1 << (ApexParser.NEXT_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_YEAR - 128)) | (1 << (ApexParser.LAST_YEAR - 128)) | (1 << (ApexParser.NEXT_YEAR - 128)) | (1 << (ApexParser.NEXT_N_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_YEARS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_QUARTER - 128)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 128)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.FIND - 128)) | (1 << (ApexParser.EMAIL - 128)) | (1 << (ApexParser.NAME - 128)) | (1 << (ApexParser.PHONE - 128)) | (1 << (ApexParser.SIDEBAR - 128)) | (1 << (ApexParser.FIELDS - 128)) | (1 << (ApexParser.METADATA - 128)) | (1 << (ApexParser.PRICEBOOKID - 128)) | (1 << (ApexParser.NETWORK - 128)) | (1 << (ApexParser.SNIPPET - 128)) | (1 << (ApexParser.TARGET_LENGTH - 128)) | (1 << (ApexParser.DIVISION - 128)) | (1 << (ApexParser.RETURNING - 128)) | (1 << (ApexParser.LISTVIEW - 128)) | (1 << (ApexParser.FindLiteral - 128)) | (1 << (ApexParser.IntegerLiteral - 128)) | (1 << (ApexParser.LongLiteral - 128)) | (1 << (ApexParser.NumberLiteral - 128)) | (1 << (ApexParser.BooleanLiteral - 128)) | (1 << (ApexParser.StringLiteral - 128)) | (1 << (ApexParser.LPAREN - 128)) | (1 << (ApexParser.LBRACE - 128)) | (1 << (ApexParser.LBRACK - 128)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (ApexParser.BANG - 195)) | (1 << (ApexParser.TILDE - 195)) | (1 << (ApexParser.INC - 195)) | (1 << (ApexParser.DEC - 195)) | (1 << (ApexParser.ADD - 195)) | (1 << (ApexParser.SUB - 195)) | (1 << (ApexParser.ATSIGN - 195)) | (1 << (ApexParser.Identifier - 195)))) != 0):
                self.state = 622
                self.statement()
                self.state = 627
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 628
            self.match(ApexParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(ApexParser.LocalVariableDeclarationContext,0)


        def SEMI(self):
            return self.getToken(ApexParser.SEMI, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_localVariableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclarationStatement" ):
                listener.enterLocalVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclarationStatement" ):
                listener.exitLocalVariableDeclarationStatement(self)




    def localVariableDeclarationStatement(self):

        localctx = ApexParser.LocalVariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_localVariableDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            self.localVariableDeclaration()
            self.state = 631
            self.match(ApexParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeRef(self):
            return self.getTypedRuleContext(ApexParser.TypeRefContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(ApexParser.VariableDeclaratorsContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ModifierContext)
            else:
                return self.getTypedRuleContext(ApexParser.ModifierContext,i)


        def getRuleIndex(self):
            return ApexParser.RULE_localVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclaration" ):
                listener.enterLocalVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclaration" ):
                listener.exitLocalVariableDeclaration(self)




    def localVariableDeclaration(self):

        localctx = ApexParser.LocalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_localVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 633
                    self.modifier() 
                self.state = 638
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

            self.state = 639
            self.typeRef()
            self.state = 640
            self.variableDeclarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(ApexParser.BlockContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(ApexParser.IfStatementContext,0)


        def switchStatement(self):
            return self.getTypedRuleContext(ApexParser.SwitchStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(ApexParser.ForStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(ApexParser.WhileStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(ApexParser.DoWhileStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(ApexParser.TryStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(ApexParser.ReturnStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(ApexParser.ThrowStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(ApexParser.BreakStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(ApexParser.ContinueStatementContext,0)


        def insertStatement(self):
            return self.getTypedRuleContext(ApexParser.InsertStatementContext,0)


        def updateStatement(self):
            return self.getTypedRuleContext(ApexParser.UpdateStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(ApexParser.DeleteStatementContext,0)


        def undeleteStatement(self):
            return self.getTypedRuleContext(ApexParser.UndeleteStatementContext,0)


        def upsertStatement(self):
            return self.getTypedRuleContext(ApexParser.UpsertStatementContext,0)


        def mergeStatement(self):
            return self.getTypedRuleContext(ApexParser.MergeStatementContext,0)


        def runAsStatement(self):
            return self.getTypedRuleContext(ApexParser.RunAsStatementContext,0)


        def localVariableDeclarationStatement(self):
            return self.getTypedRuleContext(ApexParser.LocalVariableDeclarationStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(ApexParser.ExpressionStatementContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = ApexParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_statement)
        try:
            self.state = 662
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 642
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 643
                self.ifStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 644
                self.switchStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 645
                self.forStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 646
                self.whileStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 647
                self.doWhileStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 648
                self.tryStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 649
                self.returnStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 650
                self.throwStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 651
                self.breakStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 652
                self.continueStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 653
                self.insertStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 654
                self.updateStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 655
                self.deleteStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 656
                self.undeleteStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 657
                self.upsertStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 658
                self.mergeStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 659
                self.runAsStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 660
                self.localVariableDeclarationStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 661
                self.expressionStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(ApexParser.IF, 0)

        def parExpression(self):
            return self.getTypedRuleContext(ApexParser.ParExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.StatementContext)
            else:
                return self.getTypedRuleContext(ApexParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(ApexParser.ELSE, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = ApexParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664
            self.match(ApexParser.IF)
            self.state = 665
            self.parExpression()
            self.state = 666
            self.statement()
            self.state = 669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 667
                self.match(ApexParser.ELSE)
                self.state = 668
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(ApexParser.SWITCH, 0)

        def ON(self):
            return self.getToken(ApexParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(ApexParser.ExpressionContext,0)


        def LBRACE(self):
            return self.getToken(ApexParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(ApexParser.RBRACE, 0)

        def whenControl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.WhenControlContext)
            else:
                return self.getTypedRuleContext(ApexParser.WhenControlContext,i)


        def getRuleIndex(self):
            return ApexParser.RULE_switchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)




    def switchStatement(self):

        localctx = ApexParser.SwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_switchStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.match(ApexParser.SWITCH)
            self.state = 672
            self.match(ApexParser.ON)
            self.state = 673
            self.expression(0)
            self.state = 674
            self.match(ApexParser.LBRACE)
            self.state = 676 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 675
                self.whenControl()
                self.state = 678 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ApexParser.WHEN):
                    break

            self.state = 680
            self.match(ApexParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(ApexParser.WHEN, 0)

        def whenValue(self):
            return self.getTypedRuleContext(ApexParser.WhenValueContext,0)


        def block(self):
            return self.getTypedRuleContext(ApexParser.BlockContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_whenControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenControl" ):
                listener.enterWhenControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenControl" ):
                listener.exitWhenControl(self)




    def whenControl(self):

        localctx = ApexParser.WhenControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_whenControl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self.match(ApexParser.WHEN)
            self.state = 683
            self.whenValue()
            self.state = 684
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(ApexParser.ELSE, 0)

        def whenLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.WhenLiteralContext)
            else:
                return self.getTypedRuleContext(ApexParser.WhenLiteralContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.COMMA)
            else:
                return self.getToken(ApexParser.COMMA, i)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.IdContext)
            else:
                return self.getTypedRuleContext(ApexParser.IdContext,i)


        def getRuleIndex(self):
            return ApexParser.RULE_whenValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenValue" ):
                listener.enterWhenValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenValue" ):
                listener.exitWhenValue(self)




    def whenValue(self):

        localctx = ApexParser.WhenValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_whenValue)
        self._la = 0 # Token type
        try:
            self.state = 698
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 686
                self.match(ApexParser.ELSE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 687
                self.whenLiteral()
                self.state = 692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ApexParser.COMMA:
                    self.state = 688
                    self.match(ApexParser.COMMA)
                    self.state = 689
                    self.whenLiteral()
                    self.state = 694
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 695
                self.id()
                self.state = 696
                self.id()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntegerLiteral(self):
            return self.getToken(ApexParser.IntegerLiteral, 0)

        def SUB(self):
            return self.getToken(ApexParser.SUB, 0)

        def LongLiteral(self):
            return self.getToken(ApexParser.LongLiteral, 0)

        def StringLiteral(self):
            return self.getToken(ApexParser.StringLiteral, 0)

        def NULL(self):
            return self.getToken(ApexParser.NULL, 0)

        def id(self):
            return self.getTypedRuleContext(ApexParser.IdContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_whenLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenLiteral" ):
                listener.enterWhenLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenLiteral" ):
                listener.exitWhenLiteral(self)




    def whenLiteral(self):

        localctx = ApexParser.WhenLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_whenLiteral)
        self._la = 0 # Token type
        try:
            self.state = 708
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ApexParser.IntegerLiteral, ApexParser.SUB]:
                self.enterOuterAlt(localctx, 1)
                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ApexParser.SUB:
                    self.state = 700
                    self.match(ApexParser.SUB)


                self.state = 703
                self.match(ApexParser.IntegerLiteral)
                pass
            elif token in [ApexParser.LongLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 704
                self.match(ApexParser.LongLiteral)
                pass
            elif token in [ApexParser.StringLiteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 705
                self.match(ApexParser.StringLiteral)
                pass
            elif token in [ApexParser.NULL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 706
                self.match(ApexParser.NULL)
                pass
            elif token in [ApexParser.AFTER, ApexParser.BEFORE, ApexParser.GET, ApexParser.INHERITED, ApexParser.INSTANCEOF, ApexParser.SET, ApexParser.SHARING, ApexParser.SWITCH, ApexParser.TRANSIENT, ApexParser.TRIGGER, ApexParser.WHEN, ApexParser.WITH, ApexParser.WITHOUT, ApexParser.SELECT, ApexParser.COUNT, ApexParser.FROM, ApexParser.AS, ApexParser.USING, ApexParser.SCOPE, ApexParser.WHERE, ApexParser.ORDER, ApexParser.BY, ApexParser.LIMIT, ApexParser.SOQLAND, ApexParser.SOQLOR, ApexParser.NOT, ApexParser.AVG, ApexParser.COUNT_DISTINCT, ApexParser.MIN, ApexParser.MAX, ApexParser.SUM, ApexParser.TYPEOF, ApexParser.END, ApexParser.THEN, ApexParser.LIKE, ApexParser.IN, ApexParser.INCLUDES, ApexParser.EXCLUDES, ApexParser.ASC, ApexParser.DESC, ApexParser.NULLS, ApexParser.FIRST, ApexParser.LAST, ApexParser.GROUP, ApexParser.ALL, ApexParser.ROWS, ApexParser.VIEW, ApexParser.HAVING, ApexParser.ROLLUP, ApexParser.TOLABEL, ApexParser.OFFSET, ApexParser.DATA, ApexParser.CATEGORY, ApexParser.AT, ApexParser.ABOVE, ApexParser.BELOW, ApexParser.ABOVE_OR_BELOW, ApexParser.SECURITY_ENFORCED, ApexParser.REFERENCE, ApexParser.CUBE, ApexParser.FORMAT, ApexParser.TRACKING, ApexParser.VIEWSTAT, ApexParser.CUSTOM, ApexParser.STANDARD, ApexParser.CALENDAR_MONTH, ApexParser.CALENDAR_QUARTER, ApexParser.CALENDAR_YEAR, ApexParser.DAY_IN_MONTH, ApexParser.DAY_IN_WEEK, ApexParser.DAY_IN_YEAR, ApexParser.DAY_ONLY, ApexParser.FISCAL_MONTH, ApexParser.FISCAL_QUARTER, ApexParser.FISCAL_YEAR, ApexParser.HOUR_IN_DAY, ApexParser.WEEK_IN_MONTH, ApexParser.WEEK_IN_YEAR, ApexParser.CONVERT_TIMEZONE, ApexParser.YESTERDAY, ApexParser.TODAY, ApexParser.TOMORROW, ApexParser.LAST_WEEK, ApexParser.THIS_WEEK, ApexParser.NEXT_WEEK, ApexParser.LAST_MONTH, ApexParser.THIS_MONTH, ApexParser.NEXT_MONTH, ApexParser.LAST_90_DAYS, ApexParser.NEXT_90_DAYS, ApexParser.LAST_N_DAYS_N, ApexParser.NEXT_N_DAYS_N, ApexParser.NEXT_N_WEEKS_N, ApexParser.LAST_N_WEEKS_N, ApexParser.NEXT_N_MONTHS_N, ApexParser.LAST_N_MONTHS_N, ApexParser.THIS_QUARTER, ApexParser.LAST_QUARTER, ApexParser.NEXT_QUARTER, ApexParser.NEXT_N_QUARTERS_N, ApexParser.LAST_N_QUARTERS_N, ApexParser.THIS_YEAR, ApexParser.LAST_YEAR, ApexParser.NEXT_YEAR, ApexParser.NEXT_N_YEARS_N, ApexParser.LAST_N_YEARS_N, ApexParser.THIS_FISCAL_QUARTER, ApexParser.LAST_FISCAL_QUARTER, ApexParser.NEXT_FISCAL_QUARTER, ApexParser.NEXT_N_FISCAL_QUARTERS_N, ApexParser.LAST_N_FISCAL_QUARTERS_N, ApexParser.THIS_FISCAL_YEAR, ApexParser.LAST_FISCAL_YEAR, ApexParser.NEXT_FISCAL_YEAR, ApexParser.NEXT_N_FISCAL_YEARS_N, ApexParser.LAST_N_FISCAL_YEARS_N, ApexParser.FIND, ApexParser.EMAIL, ApexParser.NAME, ApexParser.PHONE, ApexParser.SIDEBAR, ApexParser.FIELDS, ApexParser.METADATA, ApexParser.PRICEBOOKID, ApexParser.NETWORK, ApexParser.SNIPPET, ApexParser.TARGET_LENGTH, ApexParser.DIVISION, ApexParser.RETURNING, ApexParser.LISTVIEW, ApexParser.Identifier]:
                self.enterOuterAlt(localctx, 5)
                self.state = 707
                self.id()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(ApexParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(ApexParser.LPAREN, 0)

        def forControl(self):
            return self.getTypedRuleContext(ApexParser.ForControlContext,0)


        def RPAREN(self):
            return self.getToken(ApexParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(ApexParser.StatementContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = ApexParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_forStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.match(ApexParser.FOR)
            self.state = 711
            self.match(ApexParser.LPAREN)
            self.state = 712
            self.forControl()
            self.state = 713
            self.match(ApexParser.RPAREN)
            self.state = 714
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(ApexParser.WHILE, 0)

        def parExpression(self):
            return self.getTypedRuleContext(ApexParser.ParExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(ApexParser.StatementContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = ApexParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            self.match(ApexParser.WHILE)
            self.state = 717
            self.parExpression()
            self.state = 718
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(ApexParser.DO, 0)

        def statement(self):
            return self.getTypedRuleContext(ApexParser.StatementContext,0)


        def WHILE(self):
            return self.getToken(ApexParser.WHILE, 0)

        def parExpression(self):
            return self.getTypedRuleContext(ApexParser.ParExpressionContext,0)


        def SEMI(self):
            return self.getToken(ApexParser.SEMI, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)




    def doWhileStatement(self):

        localctx = ApexParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.match(ApexParser.DO)
            self.state = 721
            self.statement()
            self.state = 722
            self.match(ApexParser.WHILE)
            self.state = 723
            self.parExpression()
            self.state = 724
            self.match(ApexParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(ApexParser.TRY, 0)

        def block(self):
            return self.getTypedRuleContext(ApexParser.BlockContext,0)


        def finallyBlock(self):
            return self.getTypedRuleContext(ApexParser.FinallyBlockContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(ApexParser.CatchClauseContext,i)


        def getRuleIndex(self):
            return ApexParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)




    def tryStatement(self):

        localctx = ApexParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_tryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.match(ApexParser.TRY)
            self.state = 727
            self.block()
            self.state = 737
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ApexParser.CATCH]:
                self.state = 729 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 728
                    self.catchClause()
                    self.state = 731 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==ApexParser.CATCH):
                        break

                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ApexParser.FINALLY:
                    self.state = 733
                    self.finallyBlock()


                pass
            elif token in [ApexParser.FINALLY]:
                self.state = 736
                self.finallyBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(ApexParser.RETURN, 0)

        def SEMI(self):
            return self.getToken(ApexParser.SEMI, 0)

        def expression(self):
            return self.getTypedRuleContext(ApexParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = ApexParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self.match(ApexParser.RETURN)
            self.state = 741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.SET) | (1 << ApexParser.SHARING) | (1 << ApexParser.SUPER) | (1 << ApexParser.SWITCH) | (1 << ApexParser.THIS) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.TRIGGER) | (1 << ApexParser.WHEN) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT) | (1 << ApexParser.LIST) | (1 << ApexParser.MAP) | (1 << ApexParser.SELECT) | (1 << ApexParser.COUNT) | (1 << ApexParser.FROM) | (1 << ApexParser.AS) | (1 << ApexParser.USING) | (1 << ApexParser.SCOPE) | (1 << ApexParser.WHERE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ApexParser.ORDER - 64)) | (1 << (ApexParser.BY - 64)) | (1 << (ApexParser.LIMIT - 64)) | (1 << (ApexParser.SOQLAND - 64)) | (1 << (ApexParser.SOQLOR - 64)) | (1 << (ApexParser.NOT - 64)) | (1 << (ApexParser.AVG - 64)) | (1 << (ApexParser.COUNT_DISTINCT - 64)) | (1 << (ApexParser.MIN - 64)) | (1 << (ApexParser.MAX - 64)) | (1 << (ApexParser.SUM - 64)) | (1 << (ApexParser.TYPEOF - 64)) | (1 << (ApexParser.END - 64)) | (1 << (ApexParser.THEN - 64)) | (1 << (ApexParser.LIKE - 64)) | (1 << (ApexParser.IN - 64)) | (1 << (ApexParser.INCLUDES - 64)) | (1 << (ApexParser.EXCLUDES - 64)) | (1 << (ApexParser.ASC - 64)) | (1 << (ApexParser.DESC - 64)) | (1 << (ApexParser.NULLS - 64)) | (1 << (ApexParser.FIRST - 64)) | (1 << (ApexParser.LAST - 64)) | (1 << (ApexParser.GROUP - 64)) | (1 << (ApexParser.ALL - 64)) | (1 << (ApexParser.ROWS - 64)) | (1 << (ApexParser.VIEW - 64)) | (1 << (ApexParser.HAVING - 64)) | (1 << (ApexParser.ROLLUP - 64)) | (1 << (ApexParser.TOLABEL - 64)) | (1 << (ApexParser.OFFSET - 64)) | (1 << (ApexParser.DATA - 64)) | (1 << (ApexParser.CATEGORY - 64)) | (1 << (ApexParser.AT - 64)) | (1 << (ApexParser.ABOVE - 64)) | (1 << (ApexParser.BELOW - 64)) | (1 << (ApexParser.ABOVE_OR_BELOW - 64)) | (1 << (ApexParser.SECURITY_ENFORCED - 64)) | (1 << (ApexParser.REFERENCE - 64)) | (1 << (ApexParser.CUBE - 64)) | (1 << (ApexParser.FORMAT - 64)) | (1 << (ApexParser.TRACKING - 64)) | (1 << (ApexParser.VIEWSTAT - 64)) | (1 << (ApexParser.CUSTOM - 64)) | (1 << (ApexParser.STANDARD - 64)) | (1 << (ApexParser.CALENDAR_MONTH - 64)) | (1 << (ApexParser.CALENDAR_QUARTER - 64)) | (1 << (ApexParser.CALENDAR_YEAR - 64)) | (1 << (ApexParser.DAY_IN_MONTH - 64)) | (1 << (ApexParser.DAY_IN_WEEK - 64)) | (1 << (ApexParser.DAY_IN_YEAR - 64)) | (1 << (ApexParser.DAY_ONLY - 64)) | (1 << (ApexParser.FISCAL_MONTH - 64)) | (1 << (ApexParser.FISCAL_QUARTER - 64)) | (1 << (ApexParser.FISCAL_YEAR - 64)) | (1 << (ApexParser.HOUR_IN_DAY - 64)) | (1 << (ApexParser.WEEK_IN_MONTH - 64)) | (1 << (ApexParser.WEEK_IN_YEAR - 64)) | (1 << (ApexParser.CONVERT_TIMEZONE - 64)) | (1 << (ApexParser.YESTERDAY - 64)) | (1 << (ApexParser.TODAY - 64)) | (1 << (ApexParser.TOMORROW - 64)) | (1 << (ApexParser.LAST_WEEK - 64)) | (1 << (ApexParser.THIS_WEEK - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ApexParser.NEXT_WEEK - 128)) | (1 << (ApexParser.LAST_MONTH - 128)) | (1 << (ApexParser.THIS_MONTH - 128)) | (1 << (ApexParser.NEXT_MONTH - 128)) | (1 << (ApexParser.LAST_90_DAYS - 128)) | (1 << (ApexParser.NEXT_90_DAYS - 128)) | (1 << (ApexParser.LAST_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 128)) | (1 << (ApexParser.LAST_N_WEEKS_N - 128)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 128)) | (1 << (ApexParser.LAST_N_MONTHS_N - 128)) | (1 << (ApexParser.THIS_QUARTER - 128)) | (1 << (ApexParser.LAST_QUARTER - 128)) | (1 << (ApexParser.NEXT_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_YEAR - 128)) | (1 << (ApexParser.LAST_YEAR - 128)) | (1 << (ApexParser.NEXT_YEAR - 128)) | (1 << (ApexParser.NEXT_N_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_YEARS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_QUARTER - 128)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 128)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.FIND - 128)) | (1 << (ApexParser.EMAIL - 128)) | (1 << (ApexParser.NAME - 128)) | (1 << (ApexParser.PHONE - 128)) | (1 << (ApexParser.SIDEBAR - 128)) | (1 << (ApexParser.FIELDS - 128)) | (1 << (ApexParser.METADATA - 128)) | (1 << (ApexParser.PRICEBOOKID - 128)) | (1 << (ApexParser.NETWORK - 128)) | (1 << (ApexParser.SNIPPET - 128)) | (1 << (ApexParser.TARGET_LENGTH - 128)) | (1 << (ApexParser.DIVISION - 128)) | (1 << (ApexParser.RETURNING - 128)) | (1 << (ApexParser.LISTVIEW - 128)) | (1 << (ApexParser.FindLiteral - 128)) | (1 << (ApexParser.IntegerLiteral - 128)) | (1 << (ApexParser.LongLiteral - 128)) | (1 << (ApexParser.NumberLiteral - 128)) | (1 << (ApexParser.BooleanLiteral - 128)) | (1 << (ApexParser.StringLiteral - 128)) | (1 << (ApexParser.LPAREN - 128)) | (1 << (ApexParser.LBRACK - 128)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (ApexParser.BANG - 195)) | (1 << (ApexParser.TILDE - 195)) | (1 << (ApexParser.INC - 195)) | (1 << (ApexParser.DEC - 195)) | (1 << (ApexParser.ADD - 195)) | (1 << (ApexParser.SUB - 195)) | (1 << (ApexParser.Identifier - 195)))) != 0):
                self.state = 740
                self.expression(0)


            self.state = 743
            self.match(ApexParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(ApexParser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(ApexParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(ApexParser.SEMI, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)




    def throwStatement(self):

        localctx = ApexParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            self.match(ApexParser.THROW)
            self.state = 746
            self.expression(0)
            self.state = 747
            self.match(ApexParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(ApexParser.BREAK, 0)

        def SEMI(self):
            return self.getToken(ApexParser.SEMI, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = ApexParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.match(ApexParser.BREAK)
            self.state = 750
            self.match(ApexParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(ApexParser.CONTINUE, 0)

        def SEMI(self):
            return self.getToken(ApexParser.SEMI, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = ApexParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.match(ApexParser.CONTINUE)
            self.state = 753
            self.match(ApexParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(ApexParser.INSERT, 0)

        def expression(self):
            return self.getTypedRuleContext(ApexParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(ApexParser.SEMI, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_insertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatement" ):
                listener.enterInsertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatement" ):
                listener.exitInsertStatement(self)




    def insertStatement(self):

        localctx = ApexParser.InsertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_insertStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.match(ApexParser.INSERT)
            self.state = 756
            self.expression(0)
            self.state = 757
            self.match(ApexParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(ApexParser.UPDATE, 0)

        def expression(self):
            return self.getTypedRuleContext(ApexParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(ApexParser.SEMI, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_updateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateStatement" ):
                listener.enterUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateStatement" ):
                listener.exitUpdateStatement(self)




    def updateStatement(self):

        localctx = ApexParser.UpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_updateStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.match(ApexParser.UPDATE)
            self.state = 760
            self.expression(0)
            self.state = 761
            self.match(ApexParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(ApexParser.DELETE, 0)

        def expression(self):
            return self.getTypedRuleContext(ApexParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(ApexParser.SEMI, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_deleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteStatement" ):
                listener.enterDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteStatement" ):
                listener.exitDeleteStatement(self)




    def deleteStatement(self):

        localctx = ApexParser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_deleteStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.match(ApexParser.DELETE)
            self.state = 764
            self.expression(0)
            self.state = 765
            self.match(ApexParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UndeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDELETE(self):
            return self.getToken(ApexParser.UNDELETE, 0)

        def expression(self):
            return self.getTypedRuleContext(ApexParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(ApexParser.SEMI, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_undeleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUndeleteStatement" ):
                listener.enterUndeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUndeleteStatement" ):
                listener.exitUndeleteStatement(self)




    def undeleteStatement(self):

        localctx = ApexParser.UndeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_undeleteStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.match(ApexParser.UNDELETE)
            self.state = 768
            self.expression(0)
            self.state = 769
            self.match(ApexParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpsertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPSERT(self):
            return self.getToken(ApexParser.UPSERT, 0)

        def expression(self):
            return self.getTypedRuleContext(ApexParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(ApexParser.SEMI, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(ApexParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_upsertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpsertStatement" ):
                listener.enterUpsertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpsertStatement" ):
                listener.exitUpsertStatement(self)




    def upsertStatement(self):

        localctx = ApexParser.UpsertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_upsertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.match(ApexParser.UPSERT)
            self.state = 772
            self.expression(0)
            self.state = 774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.SET) | (1 << ApexParser.SHARING) | (1 << ApexParser.SWITCH) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.TRIGGER) | (1 << ApexParser.WHEN) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT) | (1 << ApexParser.SELECT) | (1 << ApexParser.COUNT) | (1 << ApexParser.FROM) | (1 << ApexParser.AS) | (1 << ApexParser.USING) | (1 << ApexParser.SCOPE) | (1 << ApexParser.WHERE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ApexParser.ORDER - 64)) | (1 << (ApexParser.BY - 64)) | (1 << (ApexParser.LIMIT - 64)) | (1 << (ApexParser.SOQLAND - 64)) | (1 << (ApexParser.SOQLOR - 64)) | (1 << (ApexParser.NOT - 64)) | (1 << (ApexParser.AVG - 64)) | (1 << (ApexParser.COUNT_DISTINCT - 64)) | (1 << (ApexParser.MIN - 64)) | (1 << (ApexParser.MAX - 64)) | (1 << (ApexParser.SUM - 64)) | (1 << (ApexParser.TYPEOF - 64)) | (1 << (ApexParser.END - 64)) | (1 << (ApexParser.THEN - 64)) | (1 << (ApexParser.LIKE - 64)) | (1 << (ApexParser.IN - 64)) | (1 << (ApexParser.INCLUDES - 64)) | (1 << (ApexParser.EXCLUDES - 64)) | (1 << (ApexParser.ASC - 64)) | (1 << (ApexParser.DESC - 64)) | (1 << (ApexParser.NULLS - 64)) | (1 << (ApexParser.FIRST - 64)) | (1 << (ApexParser.LAST - 64)) | (1 << (ApexParser.GROUP - 64)) | (1 << (ApexParser.ALL - 64)) | (1 << (ApexParser.ROWS - 64)) | (1 << (ApexParser.VIEW - 64)) | (1 << (ApexParser.HAVING - 64)) | (1 << (ApexParser.ROLLUP - 64)) | (1 << (ApexParser.TOLABEL - 64)) | (1 << (ApexParser.OFFSET - 64)) | (1 << (ApexParser.DATA - 64)) | (1 << (ApexParser.CATEGORY - 64)) | (1 << (ApexParser.AT - 64)) | (1 << (ApexParser.ABOVE - 64)) | (1 << (ApexParser.BELOW - 64)) | (1 << (ApexParser.ABOVE_OR_BELOW - 64)) | (1 << (ApexParser.SECURITY_ENFORCED - 64)) | (1 << (ApexParser.REFERENCE - 64)) | (1 << (ApexParser.CUBE - 64)) | (1 << (ApexParser.FORMAT - 64)) | (1 << (ApexParser.TRACKING - 64)) | (1 << (ApexParser.VIEWSTAT - 64)) | (1 << (ApexParser.CUSTOM - 64)) | (1 << (ApexParser.STANDARD - 64)) | (1 << (ApexParser.CALENDAR_MONTH - 64)) | (1 << (ApexParser.CALENDAR_QUARTER - 64)) | (1 << (ApexParser.CALENDAR_YEAR - 64)) | (1 << (ApexParser.DAY_IN_MONTH - 64)) | (1 << (ApexParser.DAY_IN_WEEK - 64)) | (1 << (ApexParser.DAY_IN_YEAR - 64)) | (1 << (ApexParser.DAY_ONLY - 64)) | (1 << (ApexParser.FISCAL_MONTH - 64)) | (1 << (ApexParser.FISCAL_QUARTER - 64)) | (1 << (ApexParser.FISCAL_YEAR - 64)) | (1 << (ApexParser.HOUR_IN_DAY - 64)) | (1 << (ApexParser.WEEK_IN_MONTH - 64)) | (1 << (ApexParser.WEEK_IN_YEAR - 64)) | (1 << (ApexParser.CONVERT_TIMEZONE - 64)) | (1 << (ApexParser.YESTERDAY - 64)) | (1 << (ApexParser.TODAY - 64)) | (1 << (ApexParser.TOMORROW - 64)) | (1 << (ApexParser.LAST_WEEK - 64)) | (1 << (ApexParser.THIS_WEEK - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ApexParser.NEXT_WEEK - 128)) | (1 << (ApexParser.LAST_MONTH - 128)) | (1 << (ApexParser.THIS_MONTH - 128)) | (1 << (ApexParser.NEXT_MONTH - 128)) | (1 << (ApexParser.LAST_90_DAYS - 128)) | (1 << (ApexParser.NEXT_90_DAYS - 128)) | (1 << (ApexParser.LAST_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 128)) | (1 << (ApexParser.LAST_N_WEEKS_N - 128)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 128)) | (1 << (ApexParser.LAST_N_MONTHS_N - 128)) | (1 << (ApexParser.THIS_QUARTER - 128)) | (1 << (ApexParser.LAST_QUARTER - 128)) | (1 << (ApexParser.NEXT_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_YEAR - 128)) | (1 << (ApexParser.LAST_YEAR - 128)) | (1 << (ApexParser.NEXT_YEAR - 128)) | (1 << (ApexParser.NEXT_N_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_YEARS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_QUARTER - 128)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 128)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.FIND - 128)) | (1 << (ApexParser.EMAIL - 128)) | (1 << (ApexParser.NAME - 128)) | (1 << (ApexParser.PHONE - 128)) | (1 << (ApexParser.SIDEBAR - 128)) | (1 << (ApexParser.FIELDS - 128)) | (1 << (ApexParser.METADATA - 128)) | (1 << (ApexParser.PRICEBOOKID - 128)) | (1 << (ApexParser.NETWORK - 128)) | (1 << (ApexParser.SNIPPET - 128)) | (1 << (ApexParser.TARGET_LENGTH - 128)) | (1 << (ApexParser.DIVISION - 128)) | (1 << (ApexParser.RETURNING - 128)) | (1 << (ApexParser.LISTVIEW - 128)))) != 0) or _la==ApexParser.Identifier:
                self.state = 773
                self.qualifiedName()


            self.state = 776
            self.match(ApexParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MergeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(ApexParser.MERGE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ApexParser.ExpressionContext,i)


        def SEMI(self):
            return self.getToken(ApexParser.SEMI, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_mergeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeStatement" ):
                listener.enterMergeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeStatement" ):
                listener.exitMergeStatement(self)




    def mergeStatement(self):

        localctx = ApexParser.MergeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_mergeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.match(ApexParser.MERGE)
            self.state = 779
            self.expression(0)
            self.state = 780
            self.expression(0)
            self.state = 781
            self.match(ApexParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RunAsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYSTEMRUNAS(self):
            return self.getToken(ApexParser.SYSTEMRUNAS, 0)

        def LPAREN(self):
            return self.getToken(ApexParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ApexParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(ApexParser.BlockContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(ApexParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_runAsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRunAsStatement" ):
                listener.enterRunAsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRunAsStatement" ):
                listener.exitRunAsStatement(self)




    def runAsStatement(self):

        localctx = ApexParser.RunAsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_runAsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.match(ApexParser.SYSTEMRUNAS)
            self.state = 784
            self.match(ApexParser.LPAREN)
            self.state = 786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.SET) | (1 << ApexParser.SHARING) | (1 << ApexParser.SUPER) | (1 << ApexParser.SWITCH) | (1 << ApexParser.THIS) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.TRIGGER) | (1 << ApexParser.WHEN) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT) | (1 << ApexParser.LIST) | (1 << ApexParser.MAP) | (1 << ApexParser.SELECT) | (1 << ApexParser.COUNT) | (1 << ApexParser.FROM) | (1 << ApexParser.AS) | (1 << ApexParser.USING) | (1 << ApexParser.SCOPE) | (1 << ApexParser.WHERE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ApexParser.ORDER - 64)) | (1 << (ApexParser.BY - 64)) | (1 << (ApexParser.LIMIT - 64)) | (1 << (ApexParser.SOQLAND - 64)) | (1 << (ApexParser.SOQLOR - 64)) | (1 << (ApexParser.NOT - 64)) | (1 << (ApexParser.AVG - 64)) | (1 << (ApexParser.COUNT_DISTINCT - 64)) | (1 << (ApexParser.MIN - 64)) | (1 << (ApexParser.MAX - 64)) | (1 << (ApexParser.SUM - 64)) | (1 << (ApexParser.TYPEOF - 64)) | (1 << (ApexParser.END - 64)) | (1 << (ApexParser.THEN - 64)) | (1 << (ApexParser.LIKE - 64)) | (1 << (ApexParser.IN - 64)) | (1 << (ApexParser.INCLUDES - 64)) | (1 << (ApexParser.EXCLUDES - 64)) | (1 << (ApexParser.ASC - 64)) | (1 << (ApexParser.DESC - 64)) | (1 << (ApexParser.NULLS - 64)) | (1 << (ApexParser.FIRST - 64)) | (1 << (ApexParser.LAST - 64)) | (1 << (ApexParser.GROUP - 64)) | (1 << (ApexParser.ALL - 64)) | (1 << (ApexParser.ROWS - 64)) | (1 << (ApexParser.VIEW - 64)) | (1 << (ApexParser.HAVING - 64)) | (1 << (ApexParser.ROLLUP - 64)) | (1 << (ApexParser.TOLABEL - 64)) | (1 << (ApexParser.OFFSET - 64)) | (1 << (ApexParser.DATA - 64)) | (1 << (ApexParser.CATEGORY - 64)) | (1 << (ApexParser.AT - 64)) | (1 << (ApexParser.ABOVE - 64)) | (1 << (ApexParser.BELOW - 64)) | (1 << (ApexParser.ABOVE_OR_BELOW - 64)) | (1 << (ApexParser.SECURITY_ENFORCED - 64)) | (1 << (ApexParser.REFERENCE - 64)) | (1 << (ApexParser.CUBE - 64)) | (1 << (ApexParser.FORMAT - 64)) | (1 << (ApexParser.TRACKING - 64)) | (1 << (ApexParser.VIEWSTAT - 64)) | (1 << (ApexParser.CUSTOM - 64)) | (1 << (ApexParser.STANDARD - 64)) | (1 << (ApexParser.CALENDAR_MONTH - 64)) | (1 << (ApexParser.CALENDAR_QUARTER - 64)) | (1 << (ApexParser.CALENDAR_YEAR - 64)) | (1 << (ApexParser.DAY_IN_MONTH - 64)) | (1 << (ApexParser.DAY_IN_WEEK - 64)) | (1 << (ApexParser.DAY_IN_YEAR - 64)) | (1 << (ApexParser.DAY_ONLY - 64)) | (1 << (ApexParser.FISCAL_MONTH - 64)) | (1 << (ApexParser.FISCAL_QUARTER - 64)) | (1 << (ApexParser.FISCAL_YEAR - 64)) | (1 << (ApexParser.HOUR_IN_DAY - 64)) | (1 << (ApexParser.WEEK_IN_MONTH - 64)) | (1 << (ApexParser.WEEK_IN_YEAR - 64)) | (1 << (ApexParser.CONVERT_TIMEZONE - 64)) | (1 << (ApexParser.YESTERDAY - 64)) | (1 << (ApexParser.TODAY - 64)) | (1 << (ApexParser.TOMORROW - 64)) | (1 << (ApexParser.LAST_WEEK - 64)) | (1 << (ApexParser.THIS_WEEK - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ApexParser.NEXT_WEEK - 128)) | (1 << (ApexParser.LAST_MONTH - 128)) | (1 << (ApexParser.THIS_MONTH - 128)) | (1 << (ApexParser.NEXT_MONTH - 128)) | (1 << (ApexParser.LAST_90_DAYS - 128)) | (1 << (ApexParser.NEXT_90_DAYS - 128)) | (1 << (ApexParser.LAST_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 128)) | (1 << (ApexParser.LAST_N_WEEKS_N - 128)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 128)) | (1 << (ApexParser.LAST_N_MONTHS_N - 128)) | (1 << (ApexParser.THIS_QUARTER - 128)) | (1 << (ApexParser.LAST_QUARTER - 128)) | (1 << (ApexParser.NEXT_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_YEAR - 128)) | (1 << (ApexParser.LAST_YEAR - 128)) | (1 << (ApexParser.NEXT_YEAR - 128)) | (1 << (ApexParser.NEXT_N_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_YEARS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_QUARTER - 128)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 128)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.FIND - 128)) | (1 << (ApexParser.EMAIL - 128)) | (1 << (ApexParser.NAME - 128)) | (1 << (ApexParser.PHONE - 128)) | (1 << (ApexParser.SIDEBAR - 128)) | (1 << (ApexParser.FIELDS - 128)) | (1 << (ApexParser.METADATA - 128)) | (1 << (ApexParser.PRICEBOOKID - 128)) | (1 << (ApexParser.NETWORK - 128)) | (1 << (ApexParser.SNIPPET - 128)) | (1 << (ApexParser.TARGET_LENGTH - 128)) | (1 << (ApexParser.DIVISION - 128)) | (1 << (ApexParser.RETURNING - 128)) | (1 << (ApexParser.LISTVIEW - 128)) | (1 << (ApexParser.FindLiteral - 128)) | (1 << (ApexParser.IntegerLiteral - 128)) | (1 << (ApexParser.LongLiteral - 128)) | (1 << (ApexParser.NumberLiteral - 128)) | (1 << (ApexParser.BooleanLiteral - 128)) | (1 << (ApexParser.StringLiteral - 128)) | (1 << (ApexParser.LPAREN - 128)) | (1 << (ApexParser.LBRACK - 128)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (ApexParser.BANG - 195)) | (1 << (ApexParser.TILDE - 195)) | (1 << (ApexParser.INC - 195)) | (1 << (ApexParser.DEC - 195)) | (1 << (ApexParser.ADD - 195)) | (1 << (ApexParser.SUB - 195)) | (1 << (ApexParser.Identifier - 195)))) != 0):
                self.state = 785
                self.expressionList()


            self.state = 788
            self.match(ApexParser.RPAREN)
            self.state = 789
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ApexParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(ApexParser.SEMI, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = ApexParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self.expression(0)
            self.state = 792
            self.match(ApexParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getter(self):
            return self.getTypedRuleContext(ApexParser.GetterContext,0)


        def setter(self):
            return self.getTypedRuleContext(ApexParser.SetterContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ModifierContext)
            else:
                return self.getTypedRuleContext(ApexParser.ModifierContext,i)


        def getRuleIndex(self):
            return ApexParser.RULE_propertyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyBlock" ):
                listener.enterPropertyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyBlock" ):
                listener.exitPropertyBlock(self)




    def propertyBlock(self):

        localctx = ApexParser.PropertyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_propertyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.FINAL) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.INHERITED) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE) | (1 << ApexParser.PROTECTED) | (1 << ApexParser.PUBLIC) | (1 << ApexParser.STATIC) | (1 << ApexParser.TESTMETHOD) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.VIRTUAL) | (1 << ApexParser.WEBSERVICE) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT))) != 0) or _la==ApexParser.ATSIGN:
                self.state = 794
                self.modifier()
                self.state = 799
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 802
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ApexParser.GET]:
                self.state = 800
                self.getter()
                pass
            elif token in [ApexParser.SET]:
                self.state = 801
                self.setter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(ApexParser.GET, 0)

        def SEMI(self):
            return self.getToken(ApexParser.SEMI, 0)

        def block(self):
            return self.getTypedRuleContext(ApexParser.BlockContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_getter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetter" ):
                listener.enterGetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetter" ):
                listener.exitGetter(self)




    def getter(self):

        localctx = ApexParser.GetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_getter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.match(ApexParser.GET)
            self.state = 807
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ApexParser.SEMI]:
                self.state = 805
                self.match(ApexParser.SEMI)
                pass
            elif token in [ApexParser.LBRACE]:
                self.state = 806
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(ApexParser.SET, 0)

        def SEMI(self):
            return self.getToken(ApexParser.SEMI, 0)

        def block(self):
            return self.getTypedRuleContext(ApexParser.BlockContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_setter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetter" ):
                listener.enterSetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetter" ):
                listener.exitSetter(self)




    def setter(self):

        localctx = ApexParser.SetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_setter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.match(ApexParser.SET)
            self.state = 812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ApexParser.SEMI]:
                self.state = 810
                self.match(ApexParser.SEMI)
                pass
            elif token in [ApexParser.LBRACE]:
                self.state = 811
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(ApexParser.CATCH, 0)

        def LPAREN(self):
            return self.getToken(ApexParser.LPAREN, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(ApexParser.QualifiedNameContext,0)


        def id(self):
            return self.getTypedRuleContext(ApexParser.IdContext,0)


        def RPAREN(self):
            return self.getToken(ApexParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(ApexParser.BlockContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ModifierContext)
            else:
                return self.getTypedRuleContext(ApexParser.ModifierContext,i)


        def getRuleIndex(self):
            return ApexParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)




    def catchClause(self):

        localctx = ApexParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_catchClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self.match(ApexParser.CATCH)
            self.state = 815
            self.match(ApexParser.LPAREN)
            self.state = 819
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 816
                    self.modifier() 
                self.state = 821
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

            self.state = 822
            self.qualifiedName()
            self.state = 823
            self.id()
            self.state = 824
            self.match(ApexParser.RPAREN)
            self.state = 825
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(ApexParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(ApexParser.BlockContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_finallyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyBlock" ):
                listener.enterFinallyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyBlock" ):
                listener.exitFinallyBlock(self)




    def finallyBlock(self):

        localctx = ApexParser.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_finallyBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self.match(ApexParser.FINALLY)
            self.state = 828
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enhancedForControl(self):
            return self.getTypedRuleContext(ApexParser.EnhancedForControlContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.SEMI)
            else:
                return self.getToken(ApexParser.SEMI, i)

        def forInit(self):
            return self.getTypedRuleContext(ApexParser.ForInitContext,0)


        def expression(self):
            return self.getTypedRuleContext(ApexParser.ExpressionContext,0)


        def forUpdate(self):
            return self.getTypedRuleContext(ApexParser.ForUpdateContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_forControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForControl" ):
                listener.enterForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForControl" ):
                listener.exitForControl(self)




    def forControl(self):

        localctx = ApexParser.ForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_forControl)
        self._la = 0 # Token type
        try:
            self.state = 842
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 830
                self.enhancedForControl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.FINAL) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE) | (1 << ApexParser.PROTECTED) | (1 << ApexParser.PUBLIC) | (1 << ApexParser.SET) | (1 << ApexParser.SHARING) | (1 << ApexParser.STATIC) | (1 << ApexParser.SUPER) | (1 << ApexParser.SWITCH) | (1 << ApexParser.TESTMETHOD) | (1 << ApexParser.THIS) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.TRIGGER) | (1 << ApexParser.VIRTUAL) | (1 << ApexParser.WEBSERVICE) | (1 << ApexParser.WHEN) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT) | (1 << ApexParser.LIST) | (1 << ApexParser.MAP) | (1 << ApexParser.SELECT) | (1 << ApexParser.COUNT) | (1 << ApexParser.FROM) | (1 << ApexParser.AS) | (1 << ApexParser.USING) | (1 << ApexParser.SCOPE) | (1 << ApexParser.WHERE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ApexParser.ORDER - 64)) | (1 << (ApexParser.BY - 64)) | (1 << (ApexParser.LIMIT - 64)) | (1 << (ApexParser.SOQLAND - 64)) | (1 << (ApexParser.SOQLOR - 64)) | (1 << (ApexParser.NOT - 64)) | (1 << (ApexParser.AVG - 64)) | (1 << (ApexParser.COUNT_DISTINCT - 64)) | (1 << (ApexParser.MIN - 64)) | (1 << (ApexParser.MAX - 64)) | (1 << (ApexParser.SUM - 64)) | (1 << (ApexParser.TYPEOF - 64)) | (1 << (ApexParser.END - 64)) | (1 << (ApexParser.THEN - 64)) | (1 << (ApexParser.LIKE - 64)) | (1 << (ApexParser.IN - 64)) | (1 << (ApexParser.INCLUDES - 64)) | (1 << (ApexParser.EXCLUDES - 64)) | (1 << (ApexParser.ASC - 64)) | (1 << (ApexParser.DESC - 64)) | (1 << (ApexParser.NULLS - 64)) | (1 << (ApexParser.FIRST - 64)) | (1 << (ApexParser.LAST - 64)) | (1 << (ApexParser.GROUP - 64)) | (1 << (ApexParser.ALL - 64)) | (1 << (ApexParser.ROWS - 64)) | (1 << (ApexParser.VIEW - 64)) | (1 << (ApexParser.HAVING - 64)) | (1 << (ApexParser.ROLLUP - 64)) | (1 << (ApexParser.TOLABEL - 64)) | (1 << (ApexParser.OFFSET - 64)) | (1 << (ApexParser.DATA - 64)) | (1 << (ApexParser.CATEGORY - 64)) | (1 << (ApexParser.AT - 64)) | (1 << (ApexParser.ABOVE - 64)) | (1 << (ApexParser.BELOW - 64)) | (1 << (ApexParser.ABOVE_OR_BELOW - 64)) | (1 << (ApexParser.SECURITY_ENFORCED - 64)) | (1 << (ApexParser.REFERENCE - 64)) | (1 << (ApexParser.CUBE - 64)) | (1 << (ApexParser.FORMAT - 64)) | (1 << (ApexParser.TRACKING - 64)) | (1 << (ApexParser.VIEWSTAT - 64)) | (1 << (ApexParser.CUSTOM - 64)) | (1 << (ApexParser.STANDARD - 64)) | (1 << (ApexParser.CALENDAR_MONTH - 64)) | (1 << (ApexParser.CALENDAR_QUARTER - 64)) | (1 << (ApexParser.CALENDAR_YEAR - 64)) | (1 << (ApexParser.DAY_IN_MONTH - 64)) | (1 << (ApexParser.DAY_IN_WEEK - 64)) | (1 << (ApexParser.DAY_IN_YEAR - 64)) | (1 << (ApexParser.DAY_ONLY - 64)) | (1 << (ApexParser.FISCAL_MONTH - 64)) | (1 << (ApexParser.FISCAL_QUARTER - 64)) | (1 << (ApexParser.FISCAL_YEAR - 64)) | (1 << (ApexParser.HOUR_IN_DAY - 64)) | (1 << (ApexParser.WEEK_IN_MONTH - 64)) | (1 << (ApexParser.WEEK_IN_YEAR - 64)) | (1 << (ApexParser.CONVERT_TIMEZONE - 64)) | (1 << (ApexParser.YESTERDAY - 64)) | (1 << (ApexParser.TODAY - 64)) | (1 << (ApexParser.TOMORROW - 64)) | (1 << (ApexParser.LAST_WEEK - 64)) | (1 << (ApexParser.THIS_WEEK - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ApexParser.NEXT_WEEK - 128)) | (1 << (ApexParser.LAST_MONTH - 128)) | (1 << (ApexParser.THIS_MONTH - 128)) | (1 << (ApexParser.NEXT_MONTH - 128)) | (1 << (ApexParser.LAST_90_DAYS - 128)) | (1 << (ApexParser.NEXT_90_DAYS - 128)) | (1 << (ApexParser.LAST_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 128)) | (1 << (ApexParser.LAST_N_WEEKS_N - 128)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 128)) | (1 << (ApexParser.LAST_N_MONTHS_N - 128)) | (1 << (ApexParser.THIS_QUARTER - 128)) | (1 << (ApexParser.LAST_QUARTER - 128)) | (1 << (ApexParser.NEXT_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_YEAR - 128)) | (1 << (ApexParser.LAST_YEAR - 128)) | (1 << (ApexParser.NEXT_YEAR - 128)) | (1 << (ApexParser.NEXT_N_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_YEARS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_QUARTER - 128)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 128)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.FIND - 128)) | (1 << (ApexParser.EMAIL - 128)) | (1 << (ApexParser.NAME - 128)) | (1 << (ApexParser.PHONE - 128)) | (1 << (ApexParser.SIDEBAR - 128)) | (1 << (ApexParser.FIELDS - 128)) | (1 << (ApexParser.METADATA - 128)) | (1 << (ApexParser.PRICEBOOKID - 128)) | (1 << (ApexParser.NETWORK - 128)) | (1 << (ApexParser.SNIPPET - 128)) | (1 << (ApexParser.TARGET_LENGTH - 128)) | (1 << (ApexParser.DIVISION - 128)) | (1 << (ApexParser.RETURNING - 128)) | (1 << (ApexParser.LISTVIEW - 128)) | (1 << (ApexParser.FindLiteral - 128)) | (1 << (ApexParser.IntegerLiteral - 128)) | (1 << (ApexParser.LongLiteral - 128)) | (1 << (ApexParser.NumberLiteral - 128)) | (1 << (ApexParser.BooleanLiteral - 128)) | (1 << (ApexParser.StringLiteral - 128)) | (1 << (ApexParser.LPAREN - 128)) | (1 << (ApexParser.LBRACK - 128)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (ApexParser.BANG - 195)) | (1 << (ApexParser.TILDE - 195)) | (1 << (ApexParser.INC - 195)) | (1 << (ApexParser.DEC - 195)) | (1 << (ApexParser.ADD - 195)) | (1 << (ApexParser.SUB - 195)) | (1 << (ApexParser.ATSIGN - 195)) | (1 << (ApexParser.Identifier - 195)))) != 0):
                    self.state = 831
                    self.forInit()


                self.state = 834
                self.match(ApexParser.SEMI)
                self.state = 836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.SET) | (1 << ApexParser.SHARING) | (1 << ApexParser.SUPER) | (1 << ApexParser.SWITCH) | (1 << ApexParser.THIS) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.TRIGGER) | (1 << ApexParser.WHEN) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT) | (1 << ApexParser.LIST) | (1 << ApexParser.MAP) | (1 << ApexParser.SELECT) | (1 << ApexParser.COUNT) | (1 << ApexParser.FROM) | (1 << ApexParser.AS) | (1 << ApexParser.USING) | (1 << ApexParser.SCOPE) | (1 << ApexParser.WHERE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ApexParser.ORDER - 64)) | (1 << (ApexParser.BY - 64)) | (1 << (ApexParser.LIMIT - 64)) | (1 << (ApexParser.SOQLAND - 64)) | (1 << (ApexParser.SOQLOR - 64)) | (1 << (ApexParser.NOT - 64)) | (1 << (ApexParser.AVG - 64)) | (1 << (ApexParser.COUNT_DISTINCT - 64)) | (1 << (ApexParser.MIN - 64)) | (1 << (ApexParser.MAX - 64)) | (1 << (ApexParser.SUM - 64)) | (1 << (ApexParser.TYPEOF - 64)) | (1 << (ApexParser.END - 64)) | (1 << (ApexParser.THEN - 64)) | (1 << (ApexParser.LIKE - 64)) | (1 << (ApexParser.IN - 64)) | (1 << (ApexParser.INCLUDES - 64)) | (1 << (ApexParser.EXCLUDES - 64)) | (1 << (ApexParser.ASC - 64)) | (1 << (ApexParser.DESC - 64)) | (1 << (ApexParser.NULLS - 64)) | (1 << (ApexParser.FIRST - 64)) | (1 << (ApexParser.LAST - 64)) | (1 << (ApexParser.GROUP - 64)) | (1 << (ApexParser.ALL - 64)) | (1 << (ApexParser.ROWS - 64)) | (1 << (ApexParser.VIEW - 64)) | (1 << (ApexParser.HAVING - 64)) | (1 << (ApexParser.ROLLUP - 64)) | (1 << (ApexParser.TOLABEL - 64)) | (1 << (ApexParser.OFFSET - 64)) | (1 << (ApexParser.DATA - 64)) | (1 << (ApexParser.CATEGORY - 64)) | (1 << (ApexParser.AT - 64)) | (1 << (ApexParser.ABOVE - 64)) | (1 << (ApexParser.BELOW - 64)) | (1 << (ApexParser.ABOVE_OR_BELOW - 64)) | (1 << (ApexParser.SECURITY_ENFORCED - 64)) | (1 << (ApexParser.REFERENCE - 64)) | (1 << (ApexParser.CUBE - 64)) | (1 << (ApexParser.FORMAT - 64)) | (1 << (ApexParser.TRACKING - 64)) | (1 << (ApexParser.VIEWSTAT - 64)) | (1 << (ApexParser.CUSTOM - 64)) | (1 << (ApexParser.STANDARD - 64)) | (1 << (ApexParser.CALENDAR_MONTH - 64)) | (1 << (ApexParser.CALENDAR_QUARTER - 64)) | (1 << (ApexParser.CALENDAR_YEAR - 64)) | (1 << (ApexParser.DAY_IN_MONTH - 64)) | (1 << (ApexParser.DAY_IN_WEEK - 64)) | (1 << (ApexParser.DAY_IN_YEAR - 64)) | (1 << (ApexParser.DAY_ONLY - 64)) | (1 << (ApexParser.FISCAL_MONTH - 64)) | (1 << (ApexParser.FISCAL_QUARTER - 64)) | (1 << (ApexParser.FISCAL_YEAR - 64)) | (1 << (ApexParser.HOUR_IN_DAY - 64)) | (1 << (ApexParser.WEEK_IN_MONTH - 64)) | (1 << (ApexParser.WEEK_IN_YEAR - 64)) | (1 << (ApexParser.CONVERT_TIMEZONE - 64)) | (1 << (ApexParser.YESTERDAY - 64)) | (1 << (ApexParser.TODAY - 64)) | (1 << (ApexParser.TOMORROW - 64)) | (1 << (ApexParser.LAST_WEEK - 64)) | (1 << (ApexParser.THIS_WEEK - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ApexParser.NEXT_WEEK - 128)) | (1 << (ApexParser.LAST_MONTH - 128)) | (1 << (ApexParser.THIS_MONTH - 128)) | (1 << (ApexParser.NEXT_MONTH - 128)) | (1 << (ApexParser.LAST_90_DAYS - 128)) | (1 << (ApexParser.NEXT_90_DAYS - 128)) | (1 << (ApexParser.LAST_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 128)) | (1 << (ApexParser.LAST_N_WEEKS_N - 128)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 128)) | (1 << (ApexParser.LAST_N_MONTHS_N - 128)) | (1 << (ApexParser.THIS_QUARTER - 128)) | (1 << (ApexParser.LAST_QUARTER - 128)) | (1 << (ApexParser.NEXT_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_YEAR - 128)) | (1 << (ApexParser.LAST_YEAR - 128)) | (1 << (ApexParser.NEXT_YEAR - 128)) | (1 << (ApexParser.NEXT_N_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_YEARS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_QUARTER - 128)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 128)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.FIND - 128)) | (1 << (ApexParser.EMAIL - 128)) | (1 << (ApexParser.NAME - 128)) | (1 << (ApexParser.PHONE - 128)) | (1 << (ApexParser.SIDEBAR - 128)) | (1 << (ApexParser.FIELDS - 128)) | (1 << (ApexParser.METADATA - 128)) | (1 << (ApexParser.PRICEBOOKID - 128)) | (1 << (ApexParser.NETWORK - 128)) | (1 << (ApexParser.SNIPPET - 128)) | (1 << (ApexParser.TARGET_LENGTH - 128)) | (1 << (ApexParser.DIVISION - 128)) | (1 << (ApexParser.RETURNING - 128)) | (1 << (ApexParser.LISTVIEW - 128)) | (1 << (ApexParser.FindLiteral - 128)) | (1 << (ApexParser.IntegerLiteral - 128)) | (1 << (ApexParser.LongLiteral - 128)) | (1 << (ApexParser.NumberLiteral - 128)) | (1 << (ApexParser.BooleanLiteral - 128)) | (1 << (ApexParser.StringLiteral - 128)) | (1 << (ApexParser.LPAREN - 128)) | (1 << (ApexParser.LBRACK - 128)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (ApexParser.BANG - 195)) | (1 << (ApexParser.TILDE - 195)) | (1 << (ApexParser.INC - 195)) | (1 << (ApexParser.DEC - 195)) | (1 << (ApexParser.ADD - 195)) | (1 << (ApexParser.SUB - 195)) | (1 << (ApexParser.Identifier - 195)))) != 0):
                    self.state = 835
                    self.expression(0)


                self.state = 838
                self.match(ApexParser.SEMI)
                self.state = 840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.SET) | (1 << ApexParser.SHARING) | (1 << ApexParser.SUPER) | (1 << ApexParser.SWITCH) | (1 << ApexParser.THIS) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.TRIGGER) | (1 << ApexParser.WHEN) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT) | (1 << ApexParser.LIST) | (1 << ApexParser.MAP) | (1 << ApexParser.SELECT) | (1 << ApexParser.COUNT) | (1 << ApexParser.FROM) | (1 << ApexParser.AS) | (1 << ApexParser.USING) | (1 << ApexParser.SCOPE) | (1 << ApexParser.WHERE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ApexParser.ORDER - 64)) | (1 << (ApexParser.BY - 64)) | (1 << (ApexParser.LIMIT - 64)) | (1 << (ApexParser.SOQLAND - 64)) | (1 << (ApexParser.SOQLOR - 64)) | (1 << (ApexParser.NOT - 64)) | (1 << (ApexParser.AVG - 64)) | (1 << (ApexParser.COUNT_DISTINCT - 64)) | (1 << (ApexParser.MIN - 64)) | (1 << (ApexParser.MAX - 64)) | (1 << (ApexParser.SUM - 64)) | (1 << (ApexParser.TYPEOF - 64)) | (1 << (ApexParser.END - 64)) | (1 << (ApexParser.THEN - 64)) | (1 << (ApexParser.LIKE - 64)) | (1 << (ApexParser.IN - 64)) | (1 << (ApexParser.INCLUDES - 64)) | (1 << (ApexParser.EXCLUDES - 64)) | (1 << (ApexParser.ASC - 64)) | (1 << (ApexParser.DESC - 64)) | (1 << (ApexParser.NULLS - 64)) | (1 << (ApexParser.FIRST - 64)) | (1 << (ApexParser.LAST - 64)) | (1 << (ApexParser.GROUP - 64)) | (1 << (ApexParser.ALL - 64)) | (1 << (ApexParser.ROWS - 64)) | (1 << (ApexParser.VIEW - 64)) | (1 << (ApexParser.HAVING - 64)) | (1 << (ApexParser.ROLLUP - 64)) | (1 << (ApexParser.TOLABEL - 64)) | (1 << (ApexParser.OFFSET - 64)) | (1 << (ApexParser.DATA - 64)) | (1 << (ApexParser.CATEGORY - 64)) | (1 << (ApexParser.AT - 64)) | (1 << (ApexParser.ABOVE - 64)) | (1 << (ApexParser.BELOW - 64)) | (1 << (ApexParser.ABOVE_OR_BELOW - 64)) | (1 << (ApexParser.SECURITY_ENFORCED - 64)) | (1 << (ApexParser.REFERENCE - 64)) | (1 << (ApexParser.CUBE - 64)) | (1 << (ApexParser.FORMAT - 64)) | (1 << (ApexParser.TRACKING - 64)) | (1 << (ApexParser.VIEWSTAT - 64)) | (1 << (ApexParser.CUSTOM - 64)) | (1 << (ApexParser.STANDARD - 64)) | (1 << (ApexParser.CALENDAR_MONTH - 64)) | (1 << (ApexParser.CALENDAR_QUARTER - 64)) | (1 << (ApexParser.CALENDAR_YEAR - 64)) | (1 << (ApexParser.DAY_IN_MONTH - 64)) | (1 << (ApexParser.DAY_IN_WEEK - 64)) | (1 << (ApexParser.DAY_IN_YEAR - 64)) | (1 << (ApexParser.DAY_ONLY - 64)) | (1 << (ApexParser.FISCAL_MONTH - 64)) | (1 << (ApexParser.FISCAL_QUARTER - 64)) | (1 << (ApexParser.FISCAL_YEAR - 64)) | (1 << (ApexParser.HOUR_IN_DAY - 64)) | (1 << (ApexParser.WEEK_IN_MONTH - 64)) | (1 << (ApexParser.WEEK_IN_YEAR - 64)) | (1 << (ApexParser.CONVERT_TIMEZONE - 64)) | (1 << (ApexParser.YESTERDAY - 64)) | (1 << (ApexParser.TODAY - 64)) | (1 << (ApexParser.TOMORROW - 64)) | (1 << (ApexParser.LAST_WEEK - 64)) | (1 << (ApexParser.THIS_WEEK - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ApexParser.NEXT_WEEK - 128)) | (1 << (ApexParser.LAST_MONTH - 128)) | (1 << (ApexParser.THIS_MONTH - 128)) | (1 << (ApexParser.NEXT_MONTH - 128)) | (1 << (ApexParser.LAST_90_DAYS - 128)) | (1 << (ApexParser.NEXT_90_DAYS - 128)) | (1 << (ApexParser.LAST_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 128)) | (1 << (ApexParser.LAST_N_WEEKS_N - 128)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 128)) | (1 << (ApexParser.LAST_N_MONTHS_N - 128)) | (1 << (ApexParser.THIS_QUARTER - 128)) | (1 << (ApexParser.LAST_QUARTER - 128)) | (1 << (ApexParser.NEXT_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_YEAR - 128)) | (1 << (ApexParser.LAST_YEAR - 128)) | (1 << (ApexParser.NEXT_YEAR - 128)) | (1 << (ApexParser.NEXT_N_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_YEARS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_QUARTER - 128)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 128)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.FIND - 128)) | (1 << (ApexParser.EMAIL - 128)) | (1 << (ApexParser.NAME - 128)) | (1 << (ApexParser.PHONE - 128)) | (1 << (ApexParser.SIDEBAR - 128)) | (1 << (ApexParser.FIELDS - 128)) | (1 << (ApexParser.METADATA - 128)) | (1 << (ApexParser.PRICEBOOKID - 128)) | (1 << (ApexParser.NETWORK - 128)) | (1 << (ApexParser.SNIPPET - 128)) | (1 << (ApexParser.TARGET_LENGTH - 128)) | (1 << (ApexParser.DIVISION - 128)) | (1 << (ApexParser.RETURNING - 128)) | (1 << (ApexParser.LISTVIEW - 128)) | (1 << (ApexParser.FindLiteral - 128)) | (1 << (ApexParser.IntegerLiteral - 128)) | (1 << (ApexParser.LongLiteral - 128)) | (1 << (ApexParser.NumberLiteral - 128)) | (1 << (ApexParser.BooleanLiteral - 128)) | (1 << (ApexParser.StringLiteral - 128)) | (1 << (ApexParser.LPAREN - 128)) | (1 << (ApexParser.LBRACK - 128)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (ApexParser.BANG - 195)) | (1 << (ApexParser.TILDE - 195)) | (1 << (ApexParser.INC - 195)) | (1 << (ApexParser.DEC - 195)) | (1 << (ApexParser.ADD - 195)) | (1 << (ApexParser.SUB - 195)) | (1 << (ApexParser.Identifier - 195)))) != 0):
                    self.state = 839
                    self.forUpdate()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(ApexParser.LocalVariableDeclarationContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(ApexParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_forInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInit" ):
                listener.enterForInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInit" ):
                listener.exitForInit(self)




    def forInit(self):

        localctx = ApexParser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_forInit)
        try:
            self.state = 846
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 844
                self.localVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 845
                self.expressionList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnhancedForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeRef(self):
            return self.getTypedRuleContext(ApexParser.TypeRefContext,0)


        def id(self):
            return self.getTypedRuleContext(ApexParser.IdContext,0)


        def COLON(self):
            return self.getToken(ApexParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(ApexParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_enhancedForControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnhancedForControl" ):
                listener.enterEnhancedForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnhancedForControl" ):
                listener.exitEnhancedForControl(self)




    def enhancedForControl(self):

        localctx = ApexParser.EnhancedForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_enhancedForControl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.typeRef()
            self.state = 849
            self.id()
            self.state = 850
            self.match(ApexParser.COLON)
            self.state = 851
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForUpdateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self):
            return self.getTypedRuleContext(ApexParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_forUpdate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForUpdate" ):
                listener.enterForUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForUpdate" ):
                listener.exitForUpdate(self)




    def forUpdate(self):

        localctx = ApexParser.ForUpdateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_forUpdate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.expressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ApexParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(ApexParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(ApexParser.RPAREN, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_parExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParExpression" ):
                listener.enterParExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParExpression" ):
                listener.exitParExpression(self)




    def parExpression(self):

        localctx = ApexParser.ParExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_parExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self.match(ApexParser.LPAREN)
            self.state = 856
            self.expression(0)
            self.state = 857
            self.match(ApexParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ApexParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.COMMA)
            else:
                return self.getToken(ApexParser.COMMA, i)

        def getRuleIndex(self):
            return ApexParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = ApexParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self.expression(0)
            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ApexParser.COMMA:
                self.state = 860
                self.match(ApexParser.COMMA)
                self.state = 861
                self.expression(0)
                self.state = 866
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ApexParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PrimaryExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primary(self):
            return self.getTypedRuleContext(ApexParser.PrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)


    class Arth1ExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ApexParser.ExpressionContext,i)

        def MUL(self):
            return self.getToken(ApexParser.MUL, 0)
        def DIV(self):
            return self.getToken(ApexParser.DIV, 0)
        def MOD(self):
            return self.getToken(ApexParser.MOD, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArth1Expression" ):
                listener.enterArth1Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArth1Expression" ):
                listener.exitArth1Expression(self)


    class DotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(ApexParser.ExpressionContext,0)

        def DOT(self):
            return self.getToken(ApexParser.DOT, 0)
        def QUESTIONDOT(self):
            return self.getToken(ApexParser.QUESTIONDOT, 0)
        def dotMethodCall(self):
            return self.getTypedRuleContext(ApexParser.DotMethodCallContext,0)

        def anyId(self):
            return self.getTypedRuleContext(ApexParser.AnyIdContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotExpression" ):
                listener.enterDotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotExpression" ):
                listener.exitDotExpression(self)


    class BitOrExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ApexParser.ExpressionContext,i)

        def BITOR(self):
            return self.getToken(ApexParser.BITOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitOrExpression" ):
                listener.enterBitOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitOrExpression" ):
                listener.exitBitOrExpression(self)


    class ArrayExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ApexParser.ExpressionContext,i)

        def LBRACK(self):
            return self.getToken(ApexParser.LBRACK, 0)
        def RBRACK(self):
            return self.getToken(ApexParser.RBRACK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayExpression" ):
                listener.enterArrayExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayExpression" ):
                listener.exitArrayExpression(self)


    class NewExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(ApexParser.NEW, 0)
        def creator(self):
            return self.getTypedRuleContext(ApexParser.CreatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExpression" ):
                listener.enterNewExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExpression" ):
                listener.exitNewExpression(self)


    class AssignExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ApexParser.ExpressionContext,i)

        def ASSIGN(self):
            return self.getToken(ApexParser.ASSIGN, 0)
        def ADD_ASSIGN(self):
            return self.getToken(ApexParser.ADD_ASSIGN, 0)
        def SUB_ASSIGN(self):
            return self.getToken(ApexParser.SUB_ASSIGN, 0)
        def MUL_ASSIGN(self):
            return self.getToken(ApexParser.MUL_ASSIGN, 0)
        def DIV_ASSIGN(self):
            return self.getToken(ApexParser.DIV_ASSIGN, 0)
        def AND_ASSIGN(self):
            return self.getToken(ApexParser.AND_ASSIGN, 0)
        def OR_ASSIGN(self):
            return self.getToken(ApexParser.OR_ASSIGN, 0)
        def XOR_ASSIGN(self):
            return self.getToken(ApexParser.XOR_ASSIGN, 0)
        def RSHIFT_ASSIGN(self):
            return self.getToken(ApexParser.RSHIFT_ASSIGN, 0)
        def URSHIFT_ASSIGN(self):
            return self.getToken(ApexParser.URSHIFT_ASSIGN, 0)
        def LSHIFT_ASSIGN(self):
            return self.getToken(ApexParser.LSHIFT_ASSIGN, 0)
        def MOD_ASSIGN(self):
            return self.getToken(ApexParser.MOD_ASSIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignExpression" ):
                listener.enterAssignExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignExpression" ):
                listener.exitAssignExpression(self)


    class MethodCallExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def methodCall(self):
            return self.getTypedRuleContext(ApexParser.MethodCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodCallExpression" ):
                listener.enterMethodCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodCallExpression" ):
                listener.exitMethodCallExpression(self)


    class BitNotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ApexParser.ExpressionContext,i)

        def CARET(self):
            return self.getToken(ApexParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitNotExpression" ):
                listener.enterBitNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitNotExpression" ):
                listener.exitBitNotExpression(self)


    class Arth2ExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ApexParser.ExpressionContext,i)

        def ADD(self):
            return self.getToken(ApexParser.ADD, 0)
        def SUB(self):
            return self.getToken(ApexParser.SUB, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArth2Expression" ):
                listener.enterArth2Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArth2Expression" ):
                listener.exitArth2Expression(self)


    class LogAndExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ApexParser.ExpressionContext,i)

        def AND(self):
            return self.getToken(ApexParser.AND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogAndExpression" ):
                listener.enterLogAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogAndExpression" ):
                listener.exitLogAndExpression(self)


    class CastExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(ApexParser.LPAREN, 0)
        def typeRef(self):
            return self.getTypedRuleContext(ApexParser.TypeRefContext,0)

        def RPAREN(self):
            return self.getToken(ApexParser.RPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(ApexParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)


    class BitAndExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ApexParser.ExpressionContext,i)

        def BITAND(self):
            return self.getToken(ApexParser.BITAND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitAndExpression" ):
                listener.enterBitAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitAndExpression" ):
                listener.exitBitAndExpression(self)


    class CmpExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ApexParser.ExpressionContext,i)

        def GT(self):
            return self.getToken(ApexParser.GT, 0)
        def LT(self):
            return self.getToken(ApexParser.LT, 0)
        def ASSIGN(self):
            return self.getToken(ApexParser.ASSIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmpExpression" ):
                listener.enterCmpExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmpExpression" ):
                listener.exitCmpExpression(self)


    class BitExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ApexParser.ExpressionContext,i)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.LT)
            else:
                return self.getToken(ApexParser.LT, i)
        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.GT)
            else:
                return self.getToken(ApexParser.GT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitExpression" ):
                listener.enterBitExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitExpression" ):
                listener.exitBitExpression(self)


    class LogOrExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ApexParser.ExpressionContext,i)

        def OR(self):
            return self.getToken(ApexParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogOrExpression" ):
                listener.enterLogOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogOrExpression" ):
                listener.exitLogOrExpression(self)


    class CondExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ApexParser.ExpressionContext,i)

        def QUESTION(self):
            return self.getToken(ApexParser.QUESTION, 0)
        def COLON(self):
            return self.getToken(ApexParser.COLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondExpression" ):
                listener.enterCondExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondExpression" ):
                listener.exitCondExpression(self)


    class EqualityExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ApexParser.ExpressionContext,i)

        def TRIPLEEQUAL(self):
            return self.getToken(ApexParser.TRIPLEEQUAL, 0)
        def TRIPLENOTEQUAL(self):
            return self.getToken(ApexParser.TRIPLENOTEQUAL, 0)
        def EQUAL(self):
            return self.getToken(ApexParser.EQUAL, 0)
        def NOTEQUAL(self):
            return self.getToken(ApexParser.NOTEQUAL, 0)
        def LESSANDGREATER(self):
            return self.getToken(ApexParser.LESSANDGREATER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)


    class PostOpExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(ApexParser.ExpressionContext,0)

        def INC(self):
            return self.getToken(ApexParser.INC, 0)
        def DEC(self):
            return self.getToken(ApexParser.DEC, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostOpExpression" ):
                listener.enterPostOpExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostOpExpression" ):
                listener.exitPostOpExpression(self)


    class NegExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(ApexParser.ExpressionContext,0)

        def TILDE(self):
            return self.getToken(ApexParser.TILDE, 0)
        def BANG(self):
            return self.getToken(ApexParser.BANG, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNegExpression" ):
                listener.enterNegExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNegExpression" ):
                listener.exitNegExpression(self)


    class PreOpExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(ApexParser.ExpressionContext,0)

        def ADD(self):
            return self.getToken(ApexParser.ADD, 0)
        def SUB(self):
            return self.getToken(ApexParser.SUB, 0)
        def INC(self):
            return self.getToken(ApexParser.INC, 0)
        def DEC(self):
            return self.getToken(ApexParser.DEC, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreOpExpression" ):
                listener.enterPreOpExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreOpExpression" ):
                listener.exitPreOpExpression(self)


    class SubExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(ApexParser.LPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(ApexParser.ExpressionContext,0)

        def RPAREN(self):
            return self.getToken(ApexParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubExpression" ):
                listener.enterSubExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubExpression" ):
                listener.exitSubExpression(self)


    class InstanceOfExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(ApexParser.ExpressionContext,0)

        def INSTANCEOF(self):
            return self.getToken(ApexParser.INSTANCEOF, 0)
        def typeRef(self):
            return self.getTypedRuleContext(ApexParser.TypeRefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceOfExpression" ):
                listener.enterInstanceOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceOfExpression" ):
                listener.exitInstanceOfExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ApexParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 144
        self.enterRecursionRule(localctx, 144, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                localctx = ApexParser.PrimaryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 868
                self.primary()
                pass

            elif la_ == 2:
                localctx = ApexParser.MethodCallExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 869
                self.methodCall()
                pass

            elif la_ == 3:
                localctx = ApexParser.NewExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 870
                self.match(ApexParser.NEW)
                self.state = 871
                self.creator()
                pass

            elif la_ == 4:
                localctx = ApexParser.CastExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 872
                self.match(ApexParser.LPAREN)
                self.state = 873
                self.typeRef()
                self.state = 874
                self.match(ApexParser.RPAREN)
                self.state = 875
                self.expression(18)
                pass

            elif la_ == 5:
                localctx = ApexParser.SubExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 877
                self.match(ApexParser.LPAREN)
                self.state = 878
                self.expression(0)
                self.state = 879
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 6:
                localctx = ApexParser.PreOpExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 881
                _la = self._input.LA(1)
                if not(((((_la - 207)) & ~0x3f) == 0 and ((1 << (_la - 207)) & ((1 << (ApexParser.INC - 207)) | (1 << (ApexParser.DEC - 207)) | (1 << (ApexParser.ADD - 207)) | (1 << (ApexParser.SUB - 207)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 882
                self.expression(15)
                pass

            elif la_ == 7:
                localctx = ApexParser.NegExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 883
                _la = self._input.LA(1)
                if not(_la==ApexParser.BANG or _la==ApexParser.TILDE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 884
                self.expression(14)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 955
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 953
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                    if la_ == 1:
                        localctx = ApexParser.Arth1ExpressionContext(self, ApexParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 887
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 888
                        _la = self._input.LA(1)
                        if not(((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (ApexParser.MUL - 211)) | (1 << (ApexParser.DIV - 211)) | (1 << (ApexParser.MOD - 211)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 889
                        self.expression(14)
                        pass

                    elif la_ == 2:
                        localctx = ApexParser.Arth2ExpressionContext(self, ApexParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 890
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 891
                        _la = self._input.LA(1)
                        if not(_la==ApexParser.ADD or _la==ApexParser.SUB):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 892
                        self.expression(13)
                        pass

                    elif la_ == 3:
                        localctx = ApexParser.BitExpressionContext(self, ApexParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 893
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 901
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                        if la_ == 1:
                            self.state = 894
                            self.match(ApexParser.LT)
                            self.state = 895
                            self.match(ApexParser.LT)
                            pass

                        elif la_ == 2:
                            self.state = 896
                            self.match(ApexParser.GT)
                            self.state = 897
                            self.match(ApexParser.GT)
                            self.state = 898
                            self.match(ApexParser.GT)
                            pass

                        elif la_ == 3:
                            self.state = 899
                            self.match(ApexParser.GT)
                            self.state = 900
                            self.match(ApexParser.GT)
                            pass


                        self.state = 903
                        self.expression(12)
                        pass

                    elif la_ == 4:
                        localctx = ApexParser.CmpExpressionContext(self, ApexParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 904
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 905
                        _la = self._input.LA(1)
                        if not(_la==ApexParser.GT or _la==ApexParser.LT):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 907
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ApexParser.ASSIGN:
                            self.state = 906
                            self.match(ApexParser.ASSIGN)


                        self.state = 909
                        self.expression(11)
                        pass

                    elif la_ == 5:
                        localctx = ApexParser.EqualityExpressionContext(self, ApexParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 910
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 911
                        _la = self._input.LA(1)
                        if not(((((_la - 200)) & ~0x3f) == 0 and ((1 << (_la - 200)) & ((1 << (ApexParser.EQUAL - 200)) | (1 << (ApexParser.TRIPLEEQUAL - 200)) | (1 << (ApexParser.NOTEQUAL - 200)) | (1 << (ApexParser.LESSANDGREATER - 200)) | (1 << (ApexParser.TRIPLENOTEQUAL - 200)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 912
                        self.expression(9)
                        pass

                    elif la_ == 6:
                        localctx = ApexParser.BitAndExpressionContext(self, ApexParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 913
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 914
                        self.match(ApexParser.BITAND)
                        self.state = 915
                        self.expression(8)
                        pass

                    elif la_ == 7:
                        localctx = ApexParser.BitNotExpressionContext(self, ApexParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 916
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 917
                        self.match(ApexParser.CARET)
                        self.state = 918
                        self.expression(7)
                        pass

                    elif la_ == 8:
                        localctx = ApexParser.BitOrExpressionContext(self, ApexParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 919
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 920
                        self.match(ApexParser.BITOR)
                        self.state = 921
                        self.expression(6)
                        pass

                    elif la_ == 9:
                        localctx = ApexParser.LogAndExpressionContext(self, ApexParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 922
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 923
                        self.match(ApexParser.AND)
                        self.state = 924
                        self.expression(5)
                        pass

                    elif la_ == 10:
                        localctx = ApexParser.LogOrExpressionContext(self, ApexParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 925
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 926
                        self.match(ApexParser.OR)
                        self.state = 927
                        self.expression(4)
                        pass

                    elif la_ == 11:
                        localctx = ApexParser.CondExpressionContext(self, ApexParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 928
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 929
                        self.match(ApexParser.QUESTION)
                        self.state = 930
                        self.expression(0)
                        self.state = 931
                        self.match(ApexParser.COLON)
                        self.state = 932
                        self.expression(2)
                        pass

                    elif la_ == 12:
                        localctx = ApexParser.AssignExpressionContext(self, ApexParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 934
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 935
                        _la = self._input.LA(1)
                        if not(((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (ApexParser.ASSIGN - 192)) | (1 << (ApexParser.ADD_ASSIGN - 192)) | (1 << (ApexParser.SUB_ASSIGN - 192)) | (1 << (ApexParser.MUL_ASSIGN - 192)) | (1 << (ApexParser.DIV_ASSIGN - 192)) | (1 << (ApexParser.AND_ASSIGN - 192)) | (1 << (ApexParser.OR_ASSIGN - 192)) | (1 << (ApexParser.XOR_ASSIGN - 192)) | (1 << (ApexParser.MOD_ASSIGN - 192)) | (1 << (ApexParser.LSHIFT_ASSIGN - 192)) | (1 << (ApexParser.RSHIFT_ASSIGN - 192)) | (1 << (ApexParser.URSHIFT_ASSIGN - 192)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 936
                        self.expression(1)
                        pass

                    elif la_ == 13:
                        localctx = ApexParser.DotExpressionContext(self, ApexParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 937
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 938
                        _la = self._input.LA(1)
                        if not(_la==ApexParser.DOT or _la==ApexParser.QUESTIONDOT):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 941
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                        if la_ == 1:
                            self.state = 939
                            self.dotMethodCall()
                            pass

                        elif la_ == 2:
                            self.state = 940
                            self.anyId()
                            pass


                        pass

                    elif la_ == 14:
                        localctx = ApexParser.ArrayExpressionContext(self, ApexParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 943
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 944
                        self.match(ApexParser.LBRACK)
                        self.state = 945
                        self.expression(0)
                        self.state = 946
                        self.match(ApexParser.RBRACK)
                        pass

                    elif la_ == 15:
                        localctx = ApexParser.PostOpExpressionContext(self, ApexParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 948
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 949
                        _la = self._input.LA(1)
                        if not(_la==ApexParser.INC or _la==ApexParser.DEC):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 16:
                        localctx = ApexParser.InstanceOfExpressionContext(self, ApexParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 950
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 951
                        self.match(ApexParser.INSTANCEOF)
                        self.state = 952
                        self.typeRef()
                        pass

             
                self.state = 957
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ApexParser.RULE_primary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ThisPrimaryContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def THIS(self):
            return self.getToken(ApexParser.THIS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisPrimary" ):
                listener.enterThisPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisPrimary" ):
                listener.exitThisPrimary(self)


    class SoqlPrimaryContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def soqlLiteral(self):
            return self.getTypedRuleContext(ApexParser.SoqlLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSoqlPrimary" ):
                listener.enterSoqlPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSoqlPrimary" ):
                listener.exitSoqlPrimary(self)


    class SuperPrimaryContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUPER(self):
            return self.getToken(ApexParser.SUPER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperPrimary" ):
                listener.enterSuperPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperPrimary" ):
                listener.exitSuperPrimary(self)


    class TypeRefPrimaryContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeRef(self):
            return self.getTypedRuleContext(ApexParser.TypeRefContext,0)

        def DOT(self):
            return self.getToken(ApexParser.DOT, 0)
        def CLASS(self):
            return self.getToken(ApexParser.CLASS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeRefPrimary" ):
                listener.enterTypeRefPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeRefPrimary" ):
                listener.exitTypeRefPrimary(self)


    class IdPrimaryContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def id(self):
            return self.getTypedRuleContext(ApexParser.IdContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdPrimary" ):
                listener.enterIdPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdPrimary" ):
                listener.exitIdPrimary(self)


    class SoslPrimaryContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def soslLiteral(self):
            return self.getTypedRuleContext(ApexParser.SoslLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSoslPrimary" ):
                listener.enterSoslPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSoslPrimary" ):
                listener.exitSoslPrimary(self)


    class LiteralPrimaryContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ApexParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(ApexParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralPrimary" ):
                listener.enterLiteralPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralPrimary" ):
                listener.exitLiteralPrimary(self)



    def primary(self):

        localctx = ApexParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_primary)
        try:
            self.state = 968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                localctx = ApexParser.ThisPrimaryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 958
                self.match(ApexParser.THIS)
                pass

            elif la_ == 2:
                localctx = ApexParser.SuperPrimaryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 959
                self.match(ApexParser.SUPER)
                pass

            elif la_ == 3:
                localctx = ApexParser.LiteralPrimaryContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 960
                self.literal()
                pass

            elif la_ == 4:
                localctx = ApexParser.TypeRefPrimaryContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 961
                self.typeRef()
                self.state = 962
                self.match(ApexParser.DOT)
                self.state = 963
                self.match(ApexParser.CLASS)
                pass

            elif la_ == 5:
                localctx = ApexParser.IdPrimaryContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 965
                self.id()
                pass

            elif la_ == 6:
                localctx = ApexParser.SoqlPrimaryContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 966
                self.soqlLiteral()
                pass

            elif la_ == 7:
                localctx = ApexParser.SoslPrimaryContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 967
                self.soslLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id(self):
            return self.getTypedRuleContext(ApexParser.IdContext,0)


        def LPAREN(self):
            return self.getToken(ApexParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ApexParser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(ApexParser.ExpressionListContext,0)


        def THIS(self):
            return self.getToken(ApexParser.THIS, 0)

        def SUPER(self):
            return self.getToken(ApexParser.SUPER, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_methodCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodCall" ):
                listener.enterMethodCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodCall" ):
                listener.exitMethodCall(self)




    def methodCall(self):

        localctx = ApexParser.MethodCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_methodCall)
        self._la = 0 # Token type
        try:
            self.state = 989
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ApexParser.AFTER, ApexParser.BEFORE, ApexParser.GET, ApexParser.INHERITED, ApexParser.INSTANCEOF, ApexParser.SET, ApexParser.SHARING, ApexParser.SWITCH, ApexParser.TRANSIENT, ApexParser.TRIGGER, ApexParser.WHEN, ApexParser.WITH, ApexParser.WITHOUT, ApexParser.SELECT, ApexParser.COUNT, ApexParser.FROM, ApexParser.AS, ApexParser.USING, ApexParser.SCOPE, ApexParser.WHERE, ApexParser.ORDER, ApexParser.BY, ApexParser.LIMIT, ApexParser.SOQLAND, ApexParser.SOQLOR, ApexParser.NOT, ApexParser.AVG, ApexParser.COUNT_DISTINCT, ApexParser.MIN, ApexParser.MAX, ApexParser.SUM, ApexParser.TYPEOF, ApexParser.END, ApexParser.THEN, ApexParser.LIKE, ApexParser.IN, ApexParser.INCLUDES, ApexParser.EXCLUDES, ApexParser.ASC, ApexParser.DESC, ApexParser.NULLS, ApexParser.FIRST, ApexParser.LAST, ApexParser.GROUP, ApexParser.ALL, ApexParser.ROWS, ApexParser.VIEW, ApexParser.HAVING, ApexParser.ROLLUP, ApexParser.TOLABEL, ApexParser.OFFSET, ApexParser.DATA, ApexParser.CATEGORY, ApexParser.AT, ApexParser.ABOVE, ApexParser.BELOW, ApexParser.ABOVE_OR_BELOW, ApexParser.SECURITY_ENFORCED, ApexParser.REFERENCE, ApexParser.CUBE, ApexParser.FORMAT, ApexParser.TRACKING, ApexParser.VIEWSTAT, ApexParser.CUSTOM, ApexParser.STANDARD, ApexParser.CALENDAR_MONTH, ApexParser.CALENDAR_QUARTER, ApexParser.CALENDAR_YEAR, ApexParser.DAY_IN_MONTH, ApexParser.DAY_IN_WEEK, ApexParser.DAY_IN_YEAR, ApexParser.DAY_ONLY, ApexParser.FISCAL_MONTH, ApexParser.FISCAL_QUARTER, ApexParser.FISCAL_YEAR, ApexParser.HOUR_IN_DAY, ApexParser.WEEK_IN_MONTH, ApexParser.WEEK_IN_YEAR, ApexParser.CONVERT_TIMEZONE, ApexParser.YESTERDAY, ApexParser.TODAY, ApexParser.TOMORROW, ApexParser.LAST_WEEK, ApexParser.THIS_WEEK, ApexParser.NEXT_WEEK, ApexParser.LAST_MONTH, ApexParser.THIS_MONTH, ApexParser.NEXT_MONTH, ApexParser.LAST_90_DAYS, ApexParser.NEXT_90_DAYS, ApexParser.LAST_N_DAYS_N, ApexParser.NEXT_N_DAYS_N, ApexParser.NEXT_N_WEEKS_N, ApexParser.LAST_N_WEEKS_N, ApexParser.NEXT_N_MONTHS_N, ApexParser.LAST_N_MONTHS_N, ApexParser.THIS_QUARTER, ApexParser.LAST_QUARTER, ApexParser.NEXT_QUARTER, ApexParser.NEXT_N_QUARTERS_N, ApexParser.LAST_N_QUARTERS_N, ApexParser.THIS_YEAR, ApexParser.LAST_YEAR, ApexParser.NEXT_YEAR, ApexParser.NEXT_N_YEARS_N, ApexParser.LAST_N_YEARS_N, ApexParser.THIS_FISCAL_QUARTER, ApexParser.LAST_FISCAL_QUARTER, ApexParser.NEXT_FISCAL_QUARTER, ApexParser.NEXT_N_FISCAL_QUARTERS_N, ApexParser.LAST_N_FISCAL_QUARTERS_N, ApexParser.THIS_FISCAL_YEAR, ApexParser.LAST_FISCAL_YEAR, ApexParser.NEXT_FISCAL_YEAR, ApexParser.NEXT_N_FISCAL_YEARS_N, ApexParser.LAST_N_FISCAL_YEARS_N, ApexParser.FIND, ApexParser.EMAIL, ApexParser.NAME, ApexParser.PHONE, ApexParser.SIDEBAR, ApexParser.FIELDS, ApexParser.METADATA, ApexParser.PRICEBOOKID, ApexParser.NETWORK, ApexParser.SNIPPET, ApexParser.TARGET_LENGTH, ApexParser.DIVISION, ApexParser.RETURNING, ApexParser.LISTVIEW, ApexParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 970
                self.id()
                self.state = 971
                self.match(ApexParser.LPAREN)
                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.SET) | (1 << ApexParser.SHARING) | (1 << ApexParser.SUPER) | (1 << ApexParser.SWITCH) | (1 << ApexParser.THIS) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.TRIGGER) | (1 << ApexParser.WHEN) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT) | (1 << ApexParser.LIST) | (1 << ApexParser.MAP) | (1 << ApexParser.SELECT) | (1 << ApexParser.COUNT) | (1 << ApexParser.FROM) | (1 << ApexParser.AS) | (1 << ApexParser.USING) | (1 << ApexParser.SCOPE) | (1 << ApexParser.WHERE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ApexParser.ORDER - 64)) | (1 << (ApexParser.BY - 64)) | (1 << (ApexParser.LIMIT - 64)) | (1 << (ApexParser.SOQLAND - 64)) | (1 << (ApexParser.SOQLOR - 64)) | (1 << (ApexParser.NOT - 64)) | (1 << (ApexParser.AVG - 64)) | (1 << (ApexParser.COUNT_DISTINCT - 64)) | (1 << (ApexParser.MIN - 64)) | (1 << (ApexParser.MAX - 64)) | (1 << (ApexParser.SUM - 64)) | (1 << (ApexParser.TYPEOF - 64)) | (1 << (ApexParser.END - 64)) | (1 << (ApexParser.THEN - 64)) | (1 << (ApexParser.LIKE - 64)) | (1 << (ApexParser.IN - 64)) | (1 << (ApexParser.INCLUDES - 64)) | (1 << (ApexParser.EXCLUDES - 64)) | (1 << (ApexParser.ASC - 64)) | (1 << (ApexParser.DESC - 64)) | (1 << (ApexParser.NULLS - 64)) | (1 << (ApexParser.FIRST - 64)) | (1 << (ApexParser.LAST - 64)) | (1 << (ApexParser.GROUP - 64)) | (1 << (ApexParser.ALL - 64)) | (1 << (ApexParser.ROWS - 64)) | (1 << (ApexParser.VIEW - 64)) | (1 << (ApexParser.HAVING - 64)) | (1 << (ApexParser.ROLLUP - 64)) | (1 << (ApexParser.TOLABEL - 64)) | (1 << (ApexParser.OFFSET - 64)) | (1 << (ApexParser.DATA - 64)) | (1 << (ApexParser.CATEGORY - 64)) | (1 << (ApexParser.AT - 64)) | (1 << (ApexParser.ABOVE - 64)) | (1 << (ApexParser.BELOW - 64)) | (1 << (ApexParser.ABOVE_OR_BELOW - 64)) | (1 << (ApexParser.SECURITY_ENFORCED - 64)) | (1 << (ApexParser.REFERENCE - 64)) | (1 << (ApexParser.CUBE - 64)) | (1 << (ApexParser.FORMAT - 64)) | (1 << (ApexParser.TRACKING - 64)) | (1 << (ApexParser.VIEWSTAT - 64)) | (1 << (ApexParser.CUSTOM - 64)) | (1 << (ApexParser.STANDARD - 64)) | (1 << (ApexParser.CALENDAR_MONTH - 64)) | (1 << (ApexParser.CALENDAR_QUARTER - 64)) | (1 << (ApexParser.CALENDAR_YEAR - 64)) | (1 << (ApexParser.DAY_IN_MONTH - 64)) | (1 << (ApexParser.DAY_IN_WEEK - 64)) | (1 << (ApexParser.DAY_IN_YEAR - 64)) | (1 << (ApexParser.DAY_ONLY - 64)) | (1 << (ApexParser.FISCAL_MONTH - 64)) | (1 << (ApexParser.FISCAL_QUARTER - 64)) | (1 << (ApexParser.FISCAL_YEAR - 64)) | (1 << (ApexParser.HOUR_IN_DAY - 64)) | (1 << (ApexParser.WEEK_IN_MONTH - 64)) | (1 << (ApexParser.WEEK_IN_YEAR - 64)) | (1 << (ApexParser.CONVERT_TIMEZONE - 64)) | (1 << (ApexParser.YESTERDAY - 64)) | (1 << (ApexParser.TODAY - 64)) | (1 << (ApexParser.TOMORROW - 64)) | (1 << (ApexParser.LAST_WEEK - 64)) | (1 << (ApexParser.THIS_WEEK - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ApexParser.NEXT_WEEK - 128)) | (1 << (ApexParser.LAST_MONTH - 128)) | (1 << (ApexParser.THIS_MONTH - 128)) | (1 << (ApexParser.NEXT_MONTH - 128)) | (1 << (ApexParser.LAST_90_DAYS - 128)) | (1 << (ApexParser.NEXT_90_DAYS - 128)) | (1 << (ApexParser.LAST_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 128)) | (1 << (ApexParser.LAST_N_WEEKS_N - 128)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 128)) | (1 << (ApexParser.LAST_N_MONTHS_N - 128)) | (1 << (ApexParser.THIS_QUARTER - 128)) | (1 << (ApexParser.LAST_QUARTER - 128)) | (1 << (ApexParser.NEXT_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_YEAR - 128)) | (1 << (ApexParser.LAST_YEAR - 128)) | (1 << (ApexParser.NEXT_YEAR - 128)) | (1 << (ApexParser.NEXT_N_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_YEARS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_QUARTER - 128)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 128)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.FIND - 128)) | (1 << (ApexParser.EMAIL - 128)) | (1 << (ApexParser.NAME - 128)) | (1 << (ApexParser.PHONE - 128)) | (1 << (ApexParser.SIDEBAR - 128)) | (1 << (ApexParser.FIELDS - 128)) | (1 << (ApexParser.METADATA - 128)) | (1 << (ApexParser.PRICEBOOKID - 128)) | (1 << (ApexParser.NETWORK - 128)) | (1 << (ApexParser.SNIPPET - 128)) | (1 << (ApexParser.TARGET_LENGTH - 128)) | (1 << (ApexParser.DIVISION - 128)) | (1 << (ApexParser.RETURNING - 128)) | (1 << (ApexParser.LISTVIEW - 128)) | (1 << (ApexParser.FindLiteral - 128)) | (1 << (ApexParser.IntegerLiteral - 128)) | (1 << (ApexParser.LongLiteral - 128)) | (1 << (ApexParser.NumberLiteral - 128)) | (1 << (ApexParser.BooleanLiteral - 128)) | (1 << (ApexParser.StringLiteral - 128)) | (1 << (ApexParser.LPAREN - 128)) | (1 << (ApexParser.LBRACK - 128)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (ApexParser.BANG - 195)) | (1 << (ApexParser.TILDE - 195)) | (1 << (ApexParser.INC - 195)) | (1 << (ApexParser.DEC - 195)) | (1 << (ApexParser.ADD - 195)) | (1 << (ApexParser.SUB - 195)) | (1 << (ApexParser.Identifier - 195)))) != 0):
                    self.state = 972
                    self.expressionList()


                self.state = 975
                self.match(ApexParser.RPAREN)
                pass
            elif token in [ApexParser.THIS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 977
                self.match(ApexParser.THIS)
                self.state = 978
                self.match(ApexParser.LPAREN)
                self.state = 980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.SET) | (1 << ApexParser.SHARING) | (1 << ApexParser.SUPER) | (1 << ApexParser.SWITCH) | (1 << ApexParser.THIS) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.TRIGGER) | (1 << ApexParser.WHEN) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT) | (1 << ApexParser.LIST) | (1 << ApexParser.MAP) | (1 << ApexParser.SELECT) | (1 << ApexParser.COUNT) | (1 << ApexParser.FROM) | (1 << ApexParser.AS) | (1 << ApexParser.USING) | (1 << ApexParser.SCOPE) | (1 << ApexParser.WHERE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ApexParser.ORDER - 64)) | (1 << (ApexParser.BY - 64)) | (1 << (ApexParser.LIMIT - 64)) | (1 << (ApexParser.SOQLAND - 64)) | (1 << (ApexParser.SOQLOR - 64)) | (1 << (ApexParser.NOT - 64)) | (1 << (ApexParser.AVG - 64)) | (1 << (ApexParser.COUNT_DISTINCT - 64)) | (1 << (ApexParser.MIN - 64)) | (1 << (ApexParser.MAX - 64)) | (1 << (ApexParser.SUM - 64)) | (1 << (ApexParser.TYPEOF - 64)) | (1 << (ApexParser.END - 64)) | (1 << (ApexParser.THEN - 64)) | (1 << (ApexParser.LIKE - 64)) | (1 << (ApexParser.IN - 64)) | (1 << (ApexParser.INCLUDES - 64)) | (1 << (ApexParser.EXCLUDES - 64)) | (1 << (ApexParser.ASC - 64)) | (1 << (ApexParser.DESC - 64)) | (1 << (ApexParser.NULLS - 64)) | (1 << (ApexParser.FIRST - 64)) | (1 << (ApexParser.LAST - 64)) | (1 << (ApexParser.GROUP - 64)) | (1 << (ApexParser.ALL - 64)) | (1 << (ApexParser.ROWS - 64)) | (1 << (ApexParser.VIEW - 64)) | (1 << (ApexParser.HAVING - 64)) | (1 << (ApexParser.ROLLUP - 64)) | (1 << (ApexParser.TOLABEL - 64)) | (1 << (ApexParser.OFFSET - 64)) | (1 << (ApexParser.DATA - 64)) | (1 << (ApexParser.CATEGORY - 64)) | (1 << (ApexParser.AT - 64)) | (1 << (ApexParser.ABOVE - 64)) | (1 << (ApexParser.BELOW - 64)) | (1 << (ApexParser.ABOVE_OR_BELOW - 64)) | (1 << (ApexParser.SECURITY_ENFORCED - 64)) | (1 << (ApexParser.REFERENCE - 64)) | (1 << (ApexParser.CUBE - 64)) | (1 << (ApexParser.FORMAT - 64)) | (1 << (ApexParser.TRACKING - 64)) | (1 << (ApexParser.VIEWSTAT - 64)) | (1 << (ApexParser.CUSTOM - 64)) | (1 << (ApexParser.STANDARD - 64)) | (1 << (ApexParser.CALENDAR_MONTH - 64)) | (1 << (ApexParser.CALENDAR_QUARTER - 64)) | (1 << (ApexParser.CALENDAR_YEAR - 64)) | (1 << (ApexParser.DAY_IN_MONTH - 64)) | (1 << (ApexParser.DAY_IN_WEEK - 64)) | (1 << (ApexParser.DAY_IN_YEAR - 64)) | (1 << (ApexParser.DAY_ONLY - 64)) | (1 << (ApexParser.FISCAL_MONTH - 64)) | (1 << (ApexParser.FISCAL_QUARTER - 64)) | (1 << (ApexParser.FISCAL_YEAR - 64)) | (1 << (ApexParser.HOUR_IN_DAY - 64)) | (1 << (ApexParser.WEEK_IN_MONTH - 64)) | (1 << (ApexParser.WEEK_IN_YEAR - 64)) | (1 << (ApexParser.CONVERT_TIMEZONE - 64)) | (1 << (ApexParser.YESTERDAY - 64)) | (1 << (ApexParser.TODAY - 64)) | (1 << (ApexParser.TOMORROW - 64)) | (1 << (ApexParser.LAST_WEEK - 64)) | (1 << (ApexParser.THIS_WEEK - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ApexParser.NEXT_WEEK - 128)) | (1 << (ApexParser.LAST_MONTH - 128)) | (1 << (ApexParser.THIS_MONTH - 128)) | (1 << (ApexParser.NEXT_MONTH - 128)) | (1 << (ApexParser.LAST_90_DAYS - 128)) | (1 << (ApexParser.NEXT_90_DAYS - 128)) | (1 << (ApexParser.LAST_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 128)) | (1 << (ApexParser.LAST_N_WEEKS_N - 128)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 128)) | (1 << (ApexParser.LAST_N_MONTHS_N - 128)) | (1 << (ApexParser.THIS_QUARTER - 128)) | (1 << (ApexParser.LAST_QUARTER - 128)) | (1 << (ApexParser.NEXT_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_YEAR - 128)) | (1 << (ApexParser.LAST_YEAR - 128)) | (1 << (ApexParser.NEXT_YEAR - 128)) | (1 << (ApexParser.NEXT_N_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_YEARS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_QUARTER - 128)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 128)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.FIND - 128)) | (1 << (ApexParser.EMAIL - 128)) | (1 << (ApexParser.NAME - 128)) | (1 << (ApexParser.PHONE - 128)) | (1 << (ApexParser.SIDEBAR - 128)) | (1 << (ApexParser.FIELDS - 128)) | (1 << (ApexParser.METADATA - 128)) | (1 << (ApexParser.PRICEBOOKID - 128)) | (1 << (ApexParser.NETWORK - 128)) | (1 << (ApexParser.SNIPPET - 128)) | (1 << (ApexParser.TARGET_LENGTH - 128)) | (1 << (ApexParser.DIVISION - 128)) | (1 << (ApexParser.RETURNING - 128)) | (1 << (ApexParser.LISTVIEW - 128)) | (1 << (ApexParser.FindLiteral - 128)) | (1 << (ApexParser.IntegerLiteral - 128)) | (1 << (ApexParser.LongLiteral - 128)) | (1 << (ApexParser.NumberLiteral - 128)) | (1 << (ApexParser.BooleanLiteral - 128)) | (1 << (ApexParser.StringLiteral - 128)) | (1 << (ApexParser.LPAREN - 128)) | (1 << (ApexParser.LBRACK - 128)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (ApexParser.BANG - 195)) | (1 << (ApexParser.TILDE - 195)) | (1 << (ApexParser.INC - 195)) | (1 << (ApexParser.DEC - 195)) | (1 << (ApexParser.ADD - 195)) | (1 << (ApexParser.SUB - 195)) | (1 << (ApexParser.Identifier - 195)))) != 0):
                    self.state = 979
                    self.expressionList()


                self.state = 982
                self.match(ApexParser.RPAREN)
                pass
            elif token in [ApexParser.SUPER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 983
                self.match(ApexParser.SUPER)
                self.state = 984
                self.match(ApexParser.LPAREN)
                self.state = 986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.SET) | (1 << ApexParser.SHARING) | (1 << ApexParser.SUPER) | (1 << ApexParser.SWITCH) | (1 << ApexParser.THIS) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.TRIGGER) | (1 << ApexParser.WHEN) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT) | (1 << ApexParser.LIST) | (1 << ApexParser.MAP) | (1 << ApexParser.SELECT) | (1 << ApexParser.COUNT) | (1 << ApexParser.FROM) | (1 << ApexParser.AS) | (1 << ApexParser.USING) | (1 << ApexParser.SCOPE) | (1 << ApexParser.WHERE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ApexParser.ORDER - 64)) | (1 << (ApexParser.BY - 64)) | (1 << (ApexParser.LIMIT - 64)) | (1 << (ApexParser.SOQLAND - 64)) | (1 << (ApexParser.SOQLOR - 64)) | (1 << (ApexParser.NOT - 64)) | (1 << (ApexParser.AVG - 64)) | (1 << (ApexParser.COUNT_DISTINCT - 64)) | (1 << (ApexParser.MIN - 64)) | (1 << (ApexParser.MAX - 64)) | (1 << (ApexParser.SUM - 64)) | (1 << (ApexParser.TYPEOF - 64)) | (1 << (ApexParser.END - 64)) | (1 << (ApexParser.THEN - 64)) | (1 << (ApexParser.LIKE - 64)) | (1 << (ApexParser.IN - 64)) | (1 << (ApexParser.INCLUDES - 64)) | (1 << (ApexParser.EXCLUDES - 64)) | (1 << (ApexParser.ASC - 64)) | (1 << (ApexParser.DESC - 64)) | (1 << (ApexParser.NULLS - 64)) | (1 << (ApexParser.FIRST - 64)) | (1 << (ApexParser.LAST - 64)) | (1 << (ApexParser.GROUP - 64)) | (1 << (ApexParser.ALL - 64)) | (1 << (ApexParser.ROWS - 64)) | (1 << (ApexParser.VIEW - 64)) | (1 << (ApexParser.HAVING - 64)) | (1 << (ApexParser.ROLLUP - 64)) | (1 << (ApexParser.TOLABEL - 64)) | (1 << (ApexParser.OFFSET - 64)) | (1 << (ApexParser.DATA - 64)) | (1 << (ApexParser.CATEGORY - 64)) | (1 << (ApexParser.AT - 64)) | (1 << (ApexParser.ABOVE - 64)) | (1 << (ApexParser.BELOW - 64)) | (1 << (ApexParser.ABOVE_OR_BELOW - 64)) | (1 << (ApexParser.SECURITY_ENFORCED - 64)) | (1 << (ApexParser.REFERENCE - 64)) | (1 << (ApexParser.CUBE - 64)) | (1 << (ApexParser.FORMAT - 64)) | (1 << (ApexParser.TRACKING - 64)) | (1 << (ApexParser.VIEWSTAT - 64)) | (1 << (ApexParser.CUSTOM - 64)) | (1 << (ApexParser.STANDARD - 64)) | (1 << (ApexParser.CALENDAR_MONTH - 64)) | (1 << (ApexParser.CALENDAR_QUARTER - 64)) | (1 << (ApexParser.CALENDAR_YEAR - 64)) | (1 << (ApexParser.DAY_IN_MONTH - 64)) | (1 << (ApexParser.DAY_IN_WEEK - 64)) | (1 << (ApexParser.DAY_IN_YEAR - 64)) | (1 << (ApexParser.DAY_ONLY - 64)) | (1 << (ApexParser.FISCAL_MONTH - 64)) | (1 << (ApexParser.FISCAL_QUARTER - 64)) | (1 << (ApexParser.FISCAL_YEAR - 64)) | (1 << (ApexParser.HOUR_IN_DAY - 64)) | (1 << (ApexParser.WEEK_IN_MONTH - 64)) | (1 << (ApexParser.WEEK_IN_YEAR - 64)) | (1 << (ApexParser.CONVERT_TIMEZONE - 64)) | (1 << (ApexParser.YESTERDAY - 64)) | (1 << (ApexParser.TODAY - 64)) | (1 << (ApexParser.TOMORROW - 64)) | (1 << (ApexParser.LAST_WEEK - 64)) | (1 << (ApexParser.THIS_WEEK - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ApexParser.NEXT_WEEK - 128)) | (1 << (ApexParser.LAST_MONTH - 128)) | (1 << (ApexParser.THIS_MONTH - 128)) | (1 << (ApexParser.NEXT_MONTH - 128)) | (1 << (ApexParser.LAST_90_DAYS - 128)) | (1 << (ApexParser.NEXT_90_DAYS - 128)) | (1 << (ApexParser.LAST_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 128)) | (1 << (ApexParser.LAST_N_WEEKS_N - 128)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 128)) | (1 << (ApexParser.LAST_N_MONTHS_N - 128)) | (1 << (ApexParser.THIS_QUARTER - 128)) | (1 << (ApexParser.LAST_QUARTER - 128)) | (1 << (ApexParser.NEXT_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_YEAR - 128)) | (1 << (ApexParser.LAST_YEAR - 128)) | (1 << (ApexParser.NEXT_YEAR - 128)) | (1 << (ApexParser.NEXT_N_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_YEARS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_QUARTER - 128)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 128)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.FIND - 128)) | (1 << (ApexParser.EMAIL - 128)) | (1 << (ApexParser.NAME - 128)) | (1 << (ApexParser.PHONE - 128)) | (1 << (ApexParser.SIDEBAR - 128)) | (1 << (ApexParser.FIELDS - 128)) | (1 << (ApexParser.METADATA - 128)) | (1 << (ApexParser.PRICEBOOKID - 128)) | (1 << (ApexParser.NETWORK - 128)) | (1 << (ApexParser.SNIPPET - 128)) | (1 << (ApexParser.TARGET_LENGTH - 128)) | (1 << (ApexParser.DIVISION - 128)) | (1 << (ApexParser.RETURNING - 128)) | (1 << (ApexParser.LISTVIEW - 128)) | (1 << (ApexParser.FindLiteral - 128)) | (1 << (ApexParser.IntegerLiteral - 128)) | (1 << (ApexParser.LongLiteral - 128)) | (1 << (ApexParser.NumberLiteral - 128)) | (1 << (ApexParser.BooleanLiteral - 128)) | (1 << (ApexParser.StringLiteral - 128)) | (1 << (ApexParser.LPAREN - 128)) | (1 << (ApexParser.LBRACK - 128)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (ApexParser.BANG - 195)) | (1 << (ApexParser.TILDE - 195)) | (1 << (ApexParser.INC - 195)) | (1 << (ApexParser.DEC - 195)) | (1 << (ApexParser.ADD - 195)) | (1 << (ApexParser.SUB - 195)) | (1 << (ApexParser.Identifier - 195)))) != 0):
                    self.state = 985
                    self.expressionList()


                self.state = 988
                self.match(ApexParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotMethodCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anyId(self):
            return self.getTypedRuleContext(ApexParser.AnyIdContext,0)


        def LPAREN(self):
            return self.getToken(ApexParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ApexParser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(ApexParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_dotMethodCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotMethodCall" ):
                listener.enterDotMethodCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotMethodCall" ):
                listener.exitDotMethodCall(self)




    def dotMethodCall(self):

        localctx = ApexParser.DotMethodCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_dotMethodCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.anyId()
            self.state = 992
            self.match(ApexParser.LPAREN)
            self.state = 994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.SET) | (1 << ApexParser.SHARING) | (1 << ApexParser.SUPER) | (1 << ApexParser.SWITCH) | (1 << ApexParser.THIS) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.TRIGGER) | (1 << ApexParser.WHEN) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT) | (1 << ApexParser.LIST) | (1 << ApexParser.MAP) | (1 << ApexParser.SELECT) | (1 << ApexParser.COUNT) | (1 << ApexParser.FROM) | (1 << ApexParser.AS) | (1 << ApexParser.USING) | (1 << ApexParser.SCOPE) | (1 << ApexParser.WHERE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ApexParser.ORDER - 64)) | (1 << (ApexParser.BY - 64)) | (1 << (ApexParser.LIMIT - 64)) | (1 << (ApexParser.SOQLAND - 64)) | (1 << (ApexParser.SOQLOR - 64)) | (1 << (ApexParser.NOT - 64)) | (1 << (ApexParser.AVG - 64)) | (1 << (ApexParser.COUNT_DISTINCT - 64)) | (1 << (ApexParser.MIN - 64)) | (1 << (ApexParser.MAX - 64)) | (1 << (ApexParser.SUM - 64)) | (1 << (ApexParser.TYPEOF - 64)) | (1 << (ApexParser.END - 64)) | (1 << (ApexParser.THEN - 64)) | (1 << (ApexParser.LIKE - 64)) | (1 << (ApexParser.IN - 64)) | (1 << (ApexParser.INCLUDES - 64)) | (1 << (ApexParser.EXCLUDES - 64)) | (1 << (ApexParser.ASC - 64)) | (1 << (ApexParser.DESC - 64)) | (1 << (ApexParser.NULLS - 64)) | (1 << (ApexParser.FIRST - 64)) | (1 << (ApexParser.LAST - 64)) | (1 << (ApexParser.GROUP - 64)) | (1 << (ApexParser.ALL - 64)) | (1 << (ApexParser.ROWS - 64)) | (1 << (ApexParser.VIEW - 64)) | (1 << (ApexParser.HAVING - 64)) | (1 << (ApexParser.ROLLUP - 64)) | (1 << (ApexParser.TOLABEL - 64)) | (1 << (ApexParser.OFFSET - 64)) | (1 << (ApexParser.DATA - 64)) | (1 << (ApexParser.CATEGORY - 64)) | (1 << (ApexParser.AT - 64)) | (1 << (ApexParser.ABOVE - 64)) | (1 << (ApexParser.BELOW - 64)) | (1 << (ApexParser.ABOVE_OR_BELOW - 64)) | (1 << (ApexParser.SECURITY_ENFORCED - 64)) | (1 << (ApexParser.REFERENCE - 64)) | (1 << (ApexParser.CUBE - 64)) | (1 << (ApexParser.FORMAT - 64)) | (1 << (ApexParser.TRACKING - 64)) | (1 << (ApexParser.VIEWSTAT - 64)) | (1 << (ApexParser.CUSTOM - 64)) | (1 << (ApexParser.STANDARD - 64)) | (1 << (ApexParser.CALENDAR_MONTH - 64)) | (1 << (ApexParser.CALENDAR_QUARTER - 64)) | (1 << (ApexParser.CALENDAR_YEAR - 64)) | (1 << (ApexParser.DAY_IN_MONTH - 64)) | (1 << (ApexParser.DAY_IN_WEEK - 64)) | (1 << (ApexParser.DAY_IN_YEAR - 64)) | (1 << (ApexParser.DAY_ONLY - 64)) | (1 << (ApexParser.FISCAL_MONTH - 64)) | (1 << (ApexParser.FISCAL_QUARTER - 64)) | (1 << (ApexParser.FISCAL_YEAR - 64)) | (1 << (ApexParser.HOUR_IN_DAY - 64)) | (1 << (ApexParser.WEEK_IN_MONTH - 64)) | (1 << (ApexParser.WEEK_IN_YEAR - 64)) | (1 << (ApexParser.CONVERT_TIMEZONE - 64)) | (1 << (ApexParser.YESTERDAY - 64)) | (1 << (ApexParser.TODAY - 64)) | (1 << (ApexParser.TOMORROW - 64)) | (1 << (ApexParser.LAST_WEEK - 64)) | (1 << (ApexParser.THIS_WEEK - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ApexParser.NEXT_WEEK - 128)) | (1 << (ApexParser.LAST_MONTH - 128)) | (1 << (ApexParser.THIS_MONTH - 128)) | (1 << (ApexParser.NEXT_MONTH - 128)) | (1 << (ApexParser.LAST_90_DAYS - 128)) | (1 << (ApexParser.NEXT_90_DAYS - 128)) | (1 << (ApexParser.LAST_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 128)) | (1 << (ApexParser.LAST_N_WEEKS_N - 128)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 128)) | (1 << (ApexParser.LAST_N_MONTHS_N - 128)) | (1 << (ApexParser.THIS_QUARTER - 128)) | (1 << (ApexParser.LAST_QUARTER - 128)) | (1 << (ApexParser.NEXT_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_YEAR - 128)) | (1 << (ApexParser.LAST_YEAR - 128)) | (1 << (ApexParser.NEXT_YEAR - 128)) | (1 << (ApexParser.NEXT_N_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_YEARS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_QUARTER - 128)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 128)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.FIND - 128)) | (1 << (ApexParser.EMAIL - 128)) | (1 << (ApexParser.NAME - 128)) | (1 << (ApexParser.PHONE - 128)) | (1 << (ApexParser.SIDEBAR - 128)) | (1 << (ApexParser.FIELDS - 128)) | (1 << (ApexParser.METADATA - 128)) | (1 << (ApexParser.PRICEBOOKID - 128)) | (1 << (ApexParser.NETWORK - 128)) | (1 << (ApexParser.SNIPPET - 128)) | (1 << (ApexParser.TARGET_LENGTH - 128)) | (1 << (ApexParser.DIVISION - 128)) | (1 << (ApexParser.RETURNING - 128)) | (1 << (ApexParser.LISTVIEW - 128)) | (1 << (ApexParser.FindLiteral - 128)) | (1 << (ApexParser.IntegerLiteral - 128)) | (1 << (ApexParser.LongLiteral - 128)) | (1 << (ApexParser.NumberLiteral - 128)) | (1 << (ApexParser.BooleanLiteral - 128)) | (1 << (ApexParser.StringLiteral - 128)) | (1 << (ApexParser.LPAREN - 128)) | (1 << (ApexParser.LBRACK - 128)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (ApexParser.BANG - 195)) | (1 << (ApexParser.TILDE - 195)) | (1 << (ApexParser.INC - 195)) | (1 << (ApexParser.DEC - 195)) | (1 << (ApexParser.ADD - 195)) | (1 << (ApexParser.SUB - 195)) | (1 << (ApexParser.Identifier - 195)))) != 0):
                self.state = 993
                self.expressionList()


            self.state = 996
            self.match(ApexParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createdName(self):
            return self.getTypedRuleContext(ApexParser.CreatedNameContext,0)


        def noRest(self):
            return self.getTypedRuleContext(ApexParser.NoRestContext,0)


        def classCreatorRest(self):
            return self.getTypedRuleContext(ApexParser.ClassCreatorRestContext,0)


        def arrayCreatorRest(self):
            return self.getTypedRuleContext(ApexParser.ArrayCreatorRestContext,0)


        def mapCreatorRest(self):
            return self.getTypedRuleContext(ApexParser.MapCreatorRestContext,0)


        def setCreatorRest(self):
            return self.getTypedRuleContext(ApexParser.SetCreatorRestContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_creator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreator" ):
                listener.enterCreator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreator" ):
                listener.exitCreator(self)




    def creator(self):

        localctx = ApexParser.CreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_creator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 998
            self.createdName()
            self.state = 1004
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 999
                self.noRest()
                pass

            elif la_ == 2:
                self.state = 1000
                self.classCreatorRest()
                pass

            elif la_ == 3:
                self.state = 1001
                self.arrayCreatorRest()
                pass

            elif la_ == 4:
                self.state = 1002
                self.mapCreatorRest()
                pass

            elif la_ == 5:
                self.state = 1003
                self.setCreatorRest()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idCreatedNamePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.IdCreatedNamePairContext)
            else:
                return self.getTypedRuleContext(ApexParser.IdCreatedNamePairContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.DOT)
            else:
                return self.getToken(ApexParser.DOT, i)

        def getRuleIndex(self):
            return ApexParser.RULE_createdName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatedName" ):
                listener.enterCreatedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatedName" ):
                listener.exitCreatedName(self)




    def createdName(self):

        localctx = ApexParser.CreatedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_createdName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1006
            self.idCreatedNamePair()
            self.state = 1011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ApexParser.DOT:
                self.state = 1007
                self.match(ApexParser.DOT)
                self.state = 1008
                self.idCreatedNamePair()
                self.state = 1013
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdCreatedNamePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anyId(self):
            return self.getTypedRuleContext(ApexParser.AnyIdContext,0)


        def LT(self):
            return self.getToken(ApexParser.LT, 0)

        def typeList(self):
            return self.getTypedRuleContext(ApexParser.TypeListContext,0)


        def GT(self):
            return self.getToken(ApexParser.GT, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_idCreatedNamePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdCreatedNamePair" ):
                listener.enterIdCreatedNamePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdCreatedNamePair" ):
                listener.exitIdCreatedNamePair(self)




    def idCreatedNamePair(self):

        localctx = ApexParser.IdCreatedNamePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_idCreatedNamePair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1014
            self.anyId()
            self.state = 1019
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.LT:
                self.state = 1015
                self.match(ApexParser.LT)
                self.state = 1016
                self.typeList()
                self.state = 1017
                self.match(ApexParser.GT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(ApexParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(ApexParser.RBRACE, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_noRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoRest" ):
                listener.enterNoRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoRest" ):
                listener.exitNoRest(self)




    def noRest(self):

        localctx = ApexParser.NoRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_noRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            self.match(ApexParser.LBRACE)
            self.state = 1022
            self.match(ApexParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(ApexParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_classCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassCreatorRest" ):
                listener.enterClassCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassCreatorRest" ):
                listener.exitClassCreatorRest(self)




    def classCreatorRest(self):

        localctx = ApexParser.ClassCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_classCreatorRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1024
            self.arguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(ApexParser.LBRACK, 0)

        def expression(self):
            return self.getTypedRuleContext(ApexParser.ExpressionContext,0)


        def RBRACK(self):
            return self.getToken(ApexParser.RBRACK, 0)

        def arrayInitializer(self):
            return self.getTypedRuleContext(ApexParser.ArrayInitializerContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_arrayCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreatorRest" ):
                listener.enterArrayCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreatorRest" ):
                listener.exitArrayCreatorRest(self)




    def arrayCreatorRest(self):

        localctx = ApexParser.ArrayCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_arrayCreatorRest)
        try:
            self.state = 1035
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1026
                self.match(ApexParser.LBRACK)
                self.state = 1027
                self.expression(0)
                self.state = 1028
                self.match(ApexParser.RBRACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1030
                self.match(ApexParser.LBRACK)
                self.state = 1031
                self.match(ApexParser.RBRACK)
                self.state = 1033
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 1032
                    self.arrayInitializer()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(ApexParser.LBRACE, 0)

        def mapCreatorRestPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.MapCreatorRestPairContext)
            else:
                return self.getTypedRuleContext(ApexParser.MapCreatorRestPairContext,i)


        def RBRACE(self):
            return self.getToken(ApexParser.RBRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.COMMA)
            else:
                return self.getToken(ApexParser.COMMA, i)

        def getRuleIndex(self):
            return ApexParser.RULE_mapCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapCreatorRest" ):
                listener.enterMapCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapCreatorRest" ):
                listener.exitMapCreatorRest(self)




    def mapCreatorRest(self):

        localctx = ApexParser.MapCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_mapCreatorRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self.match(ApexParser.LBRACE)
            self.state = 1038
            self.mapCreatorRestPair()
            self.state = 1043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ApexParser.COMMA:
                self.state = 1039
                self.match(ApexParser.COMMA)
                self.state = 1040
                self.mapCreatorRestPair()
                self.state = 1045
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1046
            self.match(ApexParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapCreatorRestPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ApexParser.ExpressionContext,i)


        def MAPTO(self):
            return self.getToken(ApexParser.MAPTO, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_mapCreatorRestPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapCreatorRestPair" ):
                listener.enterMapCreatorRestPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapCreatorRestPair" ):
                listener.exitMapCreatorRestPair(self)




    def mapCreatorRestPair(self):

        localctx = ApexParser.MapCreatorRestPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_mapCreatorRestPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.expression(0)
            self.state = 1049
            self.match(ApexParser.MAPTO)
            self.state = 1050
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(ApexParser.LBRACE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ApexParser.ExpressionContext,i)


        def RBRACE(self):
            return self.getToken(ApexParser.RBRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.COMMA)
            else:
                return self.getToken(ApexParser.COMMA, i)

        def getRuleIndex(self):
            return ApexParser.RULE_setCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetCreatorRest" ):
                listener.enterSetCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetCreatorRest" ):
                listener.exitSetCreatorRest(self)




    def setCreatorRest(self):

        localctx = ApexParser.SetCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_setCreatorRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.match(ApexParser.LBRACE)
            self.state = 1053
            self.expression(0)
            self.state = 1058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ApexParser.COMMA:
                self.state = 1054
                self.match(ApexParser.COMMA)

                self.state = 1055
                self.expression(0)
                self.state = 1060
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1061
            self.match(ApexParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ApexParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ApexParser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(ApexParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)




    def arguments(self):

        localctx = ApexParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            self.match(ApexParser.LPAREN)
            self.state = 1065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.SET) | (1 << ApexParser.SHARING) | (1 << ApexParser.SUPER) | (1 << ApexParser.SWITCH) | (1 << ApexParser.THIS) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.TRIGGER) | (1 << ApexParser.WHEN) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT) | (1 << ApexParser.LIST) | (1 << ApexParser.MAP) | (1 << ApexParser.SELECT) | (1 << ApexParser.COUNT) | (1 << ApexParser.FROM) | (1 << ApexParser.AS) | (1 << ApexParser.USING) | (1 << ApexParser.SCOPE) | (1 << ApexParser.WHERE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ApexParser.ORDER - 64)) | (1 << (ApexParser.BY - 64)) | (1 << (ApexParser.LIMIT - 64)) | (1 << (ApexParser.SOQLAND - 64)) | (1 << (ApexParser.SOQLOR - 64)) | (1 << (ApexParser.NOT - 64)) | (1 << (ApexParser.AVG - 64)) | (1 << (ApexParser.COUNT_DISTINCT - 64)) | (1 << (ApexParser.MIN - 64)) | (1 << (ApexParser.MAX - 64)) | (1 << (ApexParser.SUM - 64)) | (1 << (ApexParser.TYPEOF - 64)) | (1 << (ApexParser.END - 64)) | (1 << (ApexParser.THEN - 64)) | (1 << (ApexParser.LIKE - 64)) | (1 << (ApexParser.IN - 64)) | (1 << (ApexParser.INCLUDES - 64)) | (1 << (ApexParser.EXCLUDES - 64)) | (1 << (ApexParser.ASC - 64)) | (1 << (ApexParser.DESC - 64)) | (1 << (ApexParser.NULLS - 64)) | (1 << (ApexParser.FIRST - 64)) | (1 << (ApexParser.LAST - 64)) | (1 << (ApexParser.GROUP - 64)) | (1 << (ApexParser.ALL - 64)) | (1 << (ApexParser.ROWS - 64)) | (1 << (ApexParser.VIEW - 64)) | (1 << (ApexParser.HAVING - 64)) | (1 << (ApexParser.ROLLUP - 64)) | (1 << (ApexParser.TOLABEL - 64)) | (1 << (ApexParser.OFFSET - 64)) | (1 << (ApexParser.DATA - 64)) | (1 << (ApexParser.CATEGORY - 64)) | (1 << (ApexParser.AT - 64)) | (1 << (ApexParser.ABOVE - 64)) | (1 << (ApexParser.BELOW - 64)) | (1 << (ApexParser.ABOVE_OR_BELOW - 64)) | (1 << (ApexParser.SECURITY_ENFORCED - 64)) | (1 << (ApexParser.REFERENCE - 64)) | (1 << (ApexParser.CUBE - 64)) | (1 << (ApexParser.FORMAT - 64)) | (1 << (ApexParser.TRACKING - 64)) | (1 << (ApexParser.VIEWSTAT - 64)) | (1 << (ApexParser.CUSTOM - 64)) | (1 << (ApexParser.STANDARD - 64)) | (1 << (ApexParser.CALENDAR_MONTH - 64)) | (1 << (ApexParser.CALENDAR_QUARTER - 64)) | (1 << (ApexParser.CALENDAR_YEAR - 64)) | (1 << (ApexParser.DAY_IN_MONTH - 64)) | (1 << (ApexParser.DAY_IN_WEEK - 64)) | (1 << (ApexParser.DAY_IN_YEAR - 64)) | (1 << (ApexParser.DAY_ONLY - 64)) | (1 << (ApexParser.FISCAL_MONTH - 64)) | (1 << (ApexParser.FISCAL_QUARTER - 64)) | (1 << (ApexParser.FISCAL_YEAR - 64)) | (1 << (ApexParser.HOUR_IN_DAY - 64)) | (1 << (ApexParser.WEEK_IN_MONTH - 64)) | (1 << (ApexParser.WEEK_IN_YEAR - 64)) | (1 << (ApexParser.CONVERT_TIMEZONE - 64)) | (1 << (ApexParser.YESTERDAY - 64)) | (1 << (ApexParser.TODAY - 64)) | (1 << (ApexParser.TOMORROW - 64)) | (1 << (ApexParser.LAST_WEEK - 64)) | (1 << (ApexParser.THIS_WEEK - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ApexParser.NEXT_WEEK - 128)) | (1 << (ApexParser.LAST_MONTH - 128)) | (1 << (ApexParser.THIS_MONTH - 128)) | (1 << (ApexParser.NEXT_MONTH - 128)) | (1 << (ApexParser.LAST_90_DAYS - 128)) | (1 << (ApexParser.NEXT_90_DAYS - 128)) | (1 << (ApexParser.LAST_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 128)) | (1 << (ApexParser.LAST_N_WEEKS_N - 128)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 128)) | (1 << (ApexParser.LAST_N_MONTHS_N - 128)) | (1 << (ApexParser.THIS_QUARTER - 128)) | (1 << (ApexParser.LAST_QUARTER - 128)) | (1 << (ApexParser.NEXT_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_YEAR - 128)) | (1 << (ApexParser.LAST_YEAR - 128)) | (1 << (ApexParser.NEXT_YEAR - 128)) | (1 << (ApexParser.NEXT_N_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_YEARS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_QUARTER - 128)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 128)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.FIND - 128)) | (1 << (ApexParser.EMAIL - 128)) | (1 << (ApexParser.NAME - 128)) | (1 << (ApexParser.PHONE - 128)) | (1 << (ApexParser.SIDEBAR - 128)) | (1 << (ApexParser.FIELDS - 128)) | (1 << (ApexParser.METADATA - 128)) | (1 << (ApexParser.PRICEBOOKID - 128)) | (1 << (ApexParser.NETWORK - 128)) | (1 << (ApexParser.SNIPPET - 128)) | (1 << (ApexParser.TARGET_LENGTH - 128)) | (1 << (ApexParser.DIVISION - 128)) | (1 << (ApexParser.RETURNING - 128)) | (1 << (ApexParser.LISTVIEW - 128)) | (1 << (ApexParser.FindLiteral - 128)) | (1 << (ApexParser.IntegerLiteral - 128)) | (1 << (ApexParser.LongLiteral - 128)) | (1 << (ApexParser.NumberLiteral - 128)) | (1 << (ApexParser.BooleanLiteral - 128)) | (1 << (ApexParser.StringLiteral - 128)) | (1 << (ApexParser.LPAREN - 128)) | (1 << (ApexParser.LBRACK - 128)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (ApexParser.BANG - 195)) | (1 << (ApexParser.TILDE - 195)) | (1 << (ApexParser.INC - 195)) | (1 << (ApexParser.DEC - 195)) | (1 << (ApexParser.ADD - 195)) | (1 << (ApexParser.SUB - 195)) | (1 << (ApexParser.Identifier - 195)))) != 0):
                self.state = 1064
                self.expressionList()


            self.state = 1067
            self.match(ApexParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SoqlLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(ApexParser.LBRACK, 0)

        def query(self):
            return self.getTypedRuleContext(ApexParser.QueryContext,0)


        def RBRACK(self):
            return self.getToken(ApexParser.RBRACK, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_soqlLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSoqlLiteral" ):
                listener.enterSoqlLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSoqlLiteral" ):
                listener.exitSoqlLiteral(self)




    def soqlLiteral(self):

        localctx = ApexParser.SoqlLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_soqlLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1069
            self.match(ApexParser.LBRACK)
            self.state = 1070
            self.query()
            self.state = 1071
            self.match(ApexParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(ApexParser.SELECT, 0)

        def selectList(self):
            return self.getTypedRuleContext(ApexParser.SelectListContext,0)


        def FROM(self):
            return self.getToken(ApexParser.FROM, 0)

        def fromNameList(self):
            return self.getTypedRuleContext(ApexParser.FromNameListContext,0)


        def forClauses(self):
            return self.getTypedRuleContext(ApexParser.ForClausesContext,0)


        def usingScope(self):
            return self.getTypedRuleContext(ApexParser.UsingScopeContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(ApexParser.WhereClauseContext,0)


        def withClause(self):
            return self.getTypedRuleContext(ApexParser.WithClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(ApexParser.GroupByClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(ApexParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(ApexParser.LimitClauseContext,0)


        def offsetClause(self):
            return self.getTypedRuleContext(ApexParser.OffsetClauseContext,0)


        def allRowsClause(self):
            return self.getTypedRuleContext(ApexParser.AllRowsClauseContext,0)


        def UPDATE(self):
            return self.getToken(ApexParser.UPDATE, 0)

        def updateList(self):
            return self.getTypedRuleContext(ApexParser.UpdateListContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = ApexParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073
            self.match(ApexParser.SELECT)
            self.state = 1074
            self.selectList()
            self.state = 1075
            self.match(ApexParser.FROM)
            self.state = 1076
            self.fromNameList()
            self.state = 1078
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.USING:
                self.state = 1077
                self.usingScope()


            self.state = 1081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.WHERE:
                self.state = 1080
                self.whereClause()


            self.state = 1084
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.WITH:
                self.state = 1083
                self.withClause()


            self.state = 1087
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.GROUP:
                self.state = 1086
                self.groupByClause()


            self.state = 1090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.ORDER:
                self.state = 1089
                self.orderByClause()


            self.state = 1093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.LIMIT:
                self.state = 1092
                self.limitClause()


            self.state = 1096
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.OFFSET:
                self.state = 1095
                self.offsetClause()


            self.state = 1099
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.ALL:
                self.state = 1098
                self.allRowsClause()


            self.state = 1101
            self.forClauses()
            self.state = 1104
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.UPDATE:
                self.state = 1102
                self.match(ApexParser.UPDATE)
                self.state = 1103
                self.updateList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(ApexParser.SELECT, 0)

        def subFieldList(self):
            return self.getTypedRuleContext(ApexParser.SubFieldListContext,0)


        def FROM(self):
            return self.getToken(ApexParser.FROM, 0)

        def fromNameList(self):
            return self.getTypedRuleContext(ApexParser.FromNameListContext,0)


        def forClauses(self):
            return self.getTypedRuleContext(ApexParser.ForClausesContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(ApexParser.WhereClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(ApexParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(ApexParser.LimitClauseContext,0)


        def UPDATE(self):
            return self.getToken(ApexParser.UPDATE, 0)

        def updateList(self):
            return self.getTypedRuleContext(ApexParser.UpdateListContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_subQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubQuery" ):
                listener.enterSubQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubQuery" ):
                listener.exitSubQuery(self)




    def subQuery(self):

        localctx = ApexParser.SubQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_subQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106
            self.match(ApexParser.SELECT)
            self.state = 1107
            self.subFieldList()
            self.state = 1108
            self.match(ApexParser.FROM)
            self.state = 1109
            self.fromNameList()
            self.state = 1111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.WHERE:
                self.state = 1110
                self.whereClause()


            self.state = 1114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.ORDER:
                self.state = 1113
                self.orderByClause()


            self.state = 1117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.LIMIT:
                self.state = 1116
                self.limitClause()


            self.state = 1119
            self.forClauses()
            self.state = 1122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.UPDATE:
                self.state = 1120
                self.match(ApexParser.UPDATE)
                self.state = 1121
                self.updateList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.SelectEntryContext)
            else:
                return self.getTypedRuleContext(ApexParser.SelectEntryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.COMMA)
            else:
                return self.getToken(ApexParser.COMMA, i)

        def getRuleIndex(self):
            return ApexParser.RULE_selectList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectList" ):
                listener.enterSelectList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectList" ):
                listener.exitSelectList(self)




    def selectList(self):

        localctx = ApexParser.SelectListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_selectList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1124
            self.selectEntry()
            self.state = 1129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ApexParser.COMMA:
                self.state = 1125
                self.match(ApexParser.COMMA)
                self.state = 1126
                self.selectEntry()
                self.state = 1131
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldName(self):
            return self.getTypedRuleContext(ApexParser.FieldNameContext,0)


        def soqlId(self):
            return self.getTypedRuleContext(ApexParser.SoqlIdContext,0)


        def soqlFunction(self):
            return self.getTypedRuleContext(ApexParser.SoqlFunctionContext,0)


        def LPAREN(self):
            return self.getToken(ApexParser.LPAREN, 0)

        def subQuery(self):
            return self.getTypedRuleContext(ApexParser.SubQueryContext,0)


        def RPAREN(self):
            return self.getToken(ApexParser.RPAREN, 0)

        def typeOf(self):
            return self.getTypedRuleContext(ApexParser.TypeOfContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_selectEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectEntry" ):
                listener.enterSelectEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectEntry" ):
                listener.exitSelectEntry(self)




    def selectEntry(self):

        localctx = ApexParser.SelectEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_selectEntry)
        try:
            self.state = 1147
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1132
                self.fieldName()
                self.state = 1134
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 1133
                    self.soqlId()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1136
                self.soqlFunction()
                self.state = 1138
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 1137
                    self.soqlId()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1140
                self.match(ApexParser.LPAREN)
                self.state = 1141
                self.subQuery()
                self.state = 1142
                self.match(ApexParser.RPAREN)
                self.state = 1144
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 1143
                    self.soqlId()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1146
                self.typeOf()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def soqlId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.SoqlIdContext)
            else:
                return self.getTypedRuleContext(ApexParser.SoqlIdContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.DOT)
            else:
                return self.getToken(ApexParser.DOT, i)

        def getRuleIndex(self):
            return ApexParser.RULE_fieldName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldName" ):
                listener.enterFieldName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldName" ):
                listener.exitFieldName(self)




    def fieldName(self):

        localctx = ApexParser.FieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_fieldName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1149
            self.soqlId()
            self.state = 1154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ApexParser.DOT:
                self.state = 1150
                self.match(ApexParser.DOT)
                self.state = 1151
                self.soqlId()
                self.state = 1156
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.FieldNameContext)
            else:
                return self.getTypedRuleContext(ApexParser.FieldNameContext,i)


        def soqlId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.SoqlIdContext)
            else:
                return self.getTypedRuleContext(ApexParser.SoqlIdContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.COMMA)
            else:
                return self.getToken(ApexParser.COMMA, i)

        def getRuleIndex(self):
            return ApexParser.RULE_fromNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromNameList" ):
                listener.enterFromNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromNameList" ):
                listener.exitFromNameList(self)




    def fromNameList(self):

        localctx = ApexParser.FromNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_fromNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1157
            self.fieldName()
            self.state = 1159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 1158
                self.soqlId()


            self.state = 1168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ApexParser.COMMA:
                self.state = 1161
                self.match(ApexParser.COMMA)
                self.state = 1162
                self.fieldName()
                self.state = 1164
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 1163
                    self.soqlId()


                self.state = 1170
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subFieldEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.SubFieldEntryContext)
            else:
                return self.getTypedRuleContext(ApexParser.SubFieldEntryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.COMMA)
            else:
                return self.getToken(ApexParser.COMMA, i)

        def getRuleIndex(self):
            return ApexParser.RULE_subFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubFieldList" ):
                listener.enterSubFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubFieldList" ):
                listener.exitSubFieldList(self)




    def subFieldList(self):

        localctx = ApexParser.SubFieldListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_subFieldList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1171
            self.subFieldEntry()
            self.state = 1176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ApexParser.COMMA:
                self.state = 1172
                self.match(ApexParser.COMMA)
                self.state = 1173
                self.subFieldEntry()
                self.state = 1178
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubFieldEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldName(self):
            return self.getTypedRuleContext(ApexParser.FieldNameContext,0)


        def soqlId(self):
            return self.getTypedRuleContext(ApexParser.SoqlIdContext,0)


        def soqlFunction(self):
            return self.getTypedRuleContext(ApexParser.SoqlFunctionContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_subFieldEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubFieldEntry" ):
                listener.enterSubFieldEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubFieldEntry" ):
                listener.exitSubFieldEntry(self)




    def subFieldEntry(self):

        localctx = ApexParser.SubFieldEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_subFieldEntry)
        try:
            self.state = 1187
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1179
                self.fieldName()
                self.state = 1181
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                if la_ == 1:
                    self.state = 1180
                    self.soqlId()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1183
                self.soqlFunction()
                self.state = 1185
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 1184
                    self.soqlId()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SoqlFieldsParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(ApexParser.ALL, 0)

        def CUSTOM(self):
            return self.getToken(ApexParser.CUSTOM, 0)

        def STANDARD(self):
            return self.getToken(ApexParser.STANDARD, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_soqlFieldsParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSoqlFieldsParameter" ):
                listener.enterSoqlFieldsParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSoqlFieldsParameter" ):
                listener.exitSoqlFieldsParameter(self)




    def soqlFieldsParameter(self):

        localctx = ApexParser.SoqlFieldsParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_soqlFieldsParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            _la = self._input.LA(1)
            if not(((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (ApexParser.ALL - 88)) | (1 << (ApexParser.CUSTOM - 88)) | (1 << (ApexParser.STANDARD - 88)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SoqlFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVG(self):
            return self.getToken(ApexParser.AVG, 0)

        def LPAREN(self):
            return self.getToken(ApexParser.LPAREN, 0)

        def fieldName(self):
            return self.getTypedRuleContext(ApexParser.FieldNameContext,0)


        def RPAREN(self):
            return self.getToken(ApexParser.RPAREN, 0)

        def COUNT(self):
            return self.getToken(ApexParser.COUNT, 0)

        def COUNT_DISTINCT(self):
            return self.getToken(ApexParser.COUNT_DISTINCT, 0)

        def MIN(self):
            return self.getToken(ApexParser.MIN, 0)

        def MAX(self):
            return self.getToken(ApexParser.MAX, 0)

        def SUM(self):
            return self.getToken(ApexParser.SUM, 0)

        def TOLABEL(self):
            return self.getToken(ApexParser.TOLABEL, 0)

        def FORMAT(self):
            return self.getToken(ApexParser.FORMAT, 0)

        def CALENDAR_MONTH(self):
            return self.getToken(ApexParser.CALENDAR_MONTH, 0)

        def dateFieldName(self):
            return self.getTypedRuleContext(ApexParser.DateFieldNameContext,0)


        def CALENDAR_QUARTER(self):
            return self.getToken(ApexParser.CALENDAR_QUARTER, 0)

        def CALENDAR_YEAR(self):
            return self.getToken(ApexParser.CALENDAR_YEAR, 0)

        def DAY_IN_MONTH(self):
            return self.getToken(ApexParser.DAY_IN_MONTH, 0)

        def DAY_IN_WEEK(self):
            return self.getToken(ApexParser.DAY_IN_WEEK, 0)

        def DAY_IN_YEAR(self):
            return self.getToken(ApexParser.DAY_IN_YEAR, 0)

        def DAY_ONLY(self):
            return self.getToken(ApexParser.DAY_ONLY, 0)

        def FISCAL_MONTH(self):
            return self.getToken(ApexParser.FISCAL_MONTH, 0)

        def FISCAL_QUARTER(self):
            return self.getToken(ApexParser.FISCAL_QUARTER, 0)

        def FISCAL_YEAR(self):
            return self.getToken(ApexParser.FISCAL_YEAR, 0)

        def HOUR_IN_DAY(self):
            return self.getToken(ApexParser.HOUR_IN_DAY, 0)

        def WEEK_IN_MONTH(self):
            return self.getToken(ApexParser.WEEK_IN_MONTH, 0)

        def WEEK_IN_YEAR(self):
            return self.getToken(ApexParser.WEEK_IN_YEAR, 0)

        def FIELDS(self):
            return self.getToken(ApexParser.FIELDS, 0)

        def soqlFieldsParameter(self):
            return self.getTypedRuleContext(ApexParser.SoqlFieldsParameterContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_soqlFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSoqlFunction" ):
                listener.enterSoqlFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSoqlFunction" ):
                listener.exitSoqlFunction(self)




    def soqlFunction(self):

        localctx = ApexParser.SoqlFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_soqlFunction)
        try:
            self.state = 1304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1191
                self.match(ApexParser.AVG)
                self.state = 1192
                self.match(ApexParser.LPAREN)
                self.state = 1193
                self.fieldName()
                self.state = 1194
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1196
                self.match(ApexParser.COUNT)
                self.state = 1197
                self.match(ApexParser.LPAREN)
                self.state = 1198
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1199
                self.match(ApexParser.COUNT)
                self.state = 1200
                self.match(ApexParser.LPAREN)
                self.state = 1201
                self.fieldName()
                self.state = 1202
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1204
                self.match(ApexParser.COUNT_DISTINCT)
                self.state = 1205
                self.match(ApexParser.LPAREN)
                self.state = 1206
                self.fieldName()
                self.state = 1207
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1209
                self.match(ApexParser.MIN)
                self.state = 1210
                self.match(ApexParser.LPAREN)
                self.state = 1211
                self.fieldName()
                self.state = 1212
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1214
                self.match(ApexParser.MAX)
                self.state = 1215
                self.match(ApexParser.LPAREN)
                self.state = 1216
                self.fieldName()
                self.state = 1217
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1219
                self.match(ApexParser.SUM)
                self.state = 1220
                self.match(ApexParser.LPAREN)
                self.state = 1221
                self.fieldName()
                self.state = 1222
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1224
                self.match(ApexParser.TOLABEL)
                self.state = 1225
                self.match(ApexParser.LPAREN)
                self.state = 1226
                self.fieldName()
                self.state = 1227
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1229
                self.match(ApexParser.FORMAT)
                self.state = 1230
                self.match(ApexParser.LPAREN)
                self.state = 1231
                self.fieldName()
                self.state = 1232
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1234
                self.match(ApexParser.CALENDAR_MONTH)
                self.state = 1235
                self.match(ApexParser.LPAREN)
                self.state = 1236
                self.dateFieldName()
                self.state = 1237
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1239
                self.match(ApexParser.CALENDAR_QUARTER)
                self.state = 1240
                self.match(ApexParser.LPAREN)
                self.state = 1241
                self.dateFieldName()
                self.state = 1242
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1244
                self.match(ApexParser.CALENDAR_YEAR)
                self.state = 1245
                self.match(ApexParser.LPAREN)
                self.state = 1246
                self.dateFieldName()
                self.state = 1247
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1249
                self.match(ApexParser.DAY_IN_MONTH)
                self.state = 1250
                self.match(ApexParser.LPAREN)
                self.state = 1251
                self.dateFieldName()
                self.state = 1252
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1254
                self.match(ApexParser.DAY_IN_WEEK)
                self.state = 1255
                self.match(ApexParser.LPAREN)
                self.state = 1256
                self.dateFieldName()
                self.state = 1257
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1259
                self.match(ApexParser.DAY_IN_YEAR)
                self.state = 1260
                self.match(ApexParser.LPAREN)
                self.state = 1261
                self.dateFieldName()
                self.state = 1262
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1264
                self.match(ApexParser.DAY_ONLY)
                self.state = 1265
                self.match(ApexParser.LPAREN)
                self.state = 1266
                self.dateFieldName()
                self.state = 1267
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1269
                self.match(ApexParser.FISCAL_MONTH)
                self.state = 1270
                self.match(ApexParser.LPAREN)
                self.state = 1271
                self.dateFieldName()
                self.state = 1272
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1274
                self.match(ApexParser.FISCAL_QUARTER)
                self.state = 1275
                self.match(ApexParser.LPAREN)
                self.state = 1276
                self.dateFieldName()
                self.state = 1277
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1279
                self.match(ApexParser.FISCAL_YEAR)
                self.state = 1280
                self.match(ApexParser.LPAREN)
                self.state = 1281
                self.dateFieldName()
                self.state = 1282
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1284
                self.match(ApexParser.HOUR_IN_DAY)
                self.state = 1285
                self.match(ApexParser.LPAREN)
                self.state = 1286
                self.dateFieldName()
                self.state = 1287
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1289
                self.match(ApexParser.WEEK_IN_MONTH)
                self.state = 1290
                self.match(ApexParser.LPAREN)
                self.state = 1291
                self.dateFieldName()
                self.state = 1292
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1294
                self.match(ApexParser.WEEK_IN_YEAR)
                self.state = 1295
                self.match(ApexParser.LPAREN)
                self.state = 1296
                self.dateFieldName()
                self.state = 1297
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1299
                self.match(ApexParser.FIELDS)
                self.state = 1300
                self.match(ApexParser.LPAREN)
                self.state = 1301
                self.soqlFieldsParameter()
                self.state = 1302
                self.match(ApexParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateFieldNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONVERT_TIMEZONE(self):
            return self.getToken(ApexParser.CONVERT_TIMEZONE, 0)

        def LPAREN(self):
            return self.getToken(ApexParser.LPAREN, 0)

        def fieldName(self):
            return self.getTypedRuleContext(ApexParser.FieldNameContext,0)


        def RPAREN(self):
            return self.getToken(ApexParser.RPAREN, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_dateFieldName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateFieldName" ):
                listener.enterDateFieldName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateFieldName" ):
                listener.exitDateFieldName(self)




    def dateFieldName(self):

        localctx = ApexParser.DateFieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_dateFieldName)
        try:
            self.state = 1312
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1306
                self.match(ApexParser.CONVERT_TIMEZONE)
                self.state = 1307
                self.match(ApexParser.LPAREN)
                self.state = 1308
                self.fieldName()
                self.state = 1309
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1311
                self.fieldName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeOfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPEOF(self):
            return self.getToken(ApexParser.TYPEOF, 0)

        def fieldName(self):
            return self.getTypedRuleContext(ApexParser.FieldNameContext,0)


        def END(self):
            return self.getToken(ApexParser.END, 0)

        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(ApexParser.WhenClauseContext,i)


        def elseClause(self):
            return self.getTypedRuleContext(ApexParser.ElseClauseContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_typeOf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeOf" ):
                listener.enterTypeOf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeOf" ):
                listener.exitTypeOf(self)




    def typeOf(self):

        localctx = ApexParser.TypeOfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_typeOf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1314
            self.match(ApexParser.TYPEOF)
            self.state = 1315
            self.fieldName()
            self.state = 1317 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1316
                self.whenClause()
                self.state = 1319 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ApexParser.WHEN):
                    break

            self.state = 1322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.ELSE:
                self.state = 1321
                self.elseClause()


            self.state = 1324
            self.match(ApexParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(ApexParser.WHEN, 0)

        def fieldName(self):
            return self.getTypedRuleContext(ApexParser.FieldNameContext,0)


        def THEN(self):
            return self.getToken(ApexParser.THEN, 0)

        def fieldNameList(self):
            return self.getTypedRuleContext(ApexParser.FieldNameListContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_whenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenClause" ):
                listener.enterWhenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenClause" ):
                listener.exitWhenClause(self)




    def whenClause(self):

        localctx = ApexParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1326
            self.match(ApexParser.WHEN)
            self.state = 1327
            self.fieldName()
            self.state = 1328
            self.match(ApexParser.THEN)
            self.state = 1329
            self.fieldNameList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(ApexParser.ELSE, 0)

        def fieldNameList(self):
            return self.getTypedRuleContext(ApexParser.FieldNameListContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_elseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseClause" ):
                listener.enterElseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseClause" ):
                listener.exitElseClause(self)




    def elseClause(self):

        localctx = ApexParser.ElseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_elseClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1331
            self.match(ApexParser.ELSE)
            self.state = 1332
            self.fieldNameList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.FieldNameContext)
            else:
                return self.getTypedRuleContext(ApexParser.FieldNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.COMMA)
            else:
                return self.getToken(ApexParser.COMMA, i)

        def getRuleIndex(self):
            return ApexParser.RULE_fieldNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldNameList" ):
                listener.enterFieldNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldNameList" ):
                listener.exitFieldNameList(self)




    def fieldNameList(self):

        localctx = ApexParser.FieldNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_fieldNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1334
            self.fieldName()
            self.state = 1339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ApexParser.COMMA:
                self.state = 1335
                self.match(ApexParser.COMMA)
                self.state = 1336
                self.fieldName()
                self.state = 1341
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(ApexParser.USING, 0)

        def SCOPE(self):
            return self.getToken(ApexParser.SCOPE, 0)

        def soqlId(self):
            return self.getTypedRuleContext(ApexParser.SoqlIdContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_usingScope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingScope" ):
                listener.enterUsingScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingScope" ):
                listener.exitUsingScope(self)




    def usingScope(self):

        localctx = ApexParser.UsingScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_usingScope)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1342
            self.match(ApexParser.USING)
            self.state = 1343
            self.match(ApexParser.SCOPE)
            self.state = 1344
            self.soqlId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(ApexParser.WHERE, 0)

        def logicalExpression(self):
            return self.getTypedRuleContext(ApexParser.LogicalExpressionContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_whereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereClause" ):
                listener.enterWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereClause" ):
                listener.exitWhereClause(self)




    def whereClause(self):

        localctx = ApexParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1346
            self.match(ApexParser.WHERE)
            self.state = 1347
            self.logicalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ConditionalExpressionContext)
            else:
                return self.getTypedRuleContext(ApexParser.ConditionalExpressionContext,i)


        def SOQLAND(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.SOQLAND)
            else:
                return self.getToken(ApexParser.SOQLAND, i)

        def SOQLOR(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.SOQLOR)
            else:
                return self.getToken(ApexParser.SOQLOR, i)

        def NOT(self):
            return self.getToken(ApexParser.NOT, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_logicalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalExpression" ):
                listener.enterLogicalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalExpression" ):
                listener.exitLogicalExpression(self)




    def logicalExpression(self):

        localctx = ApexParser.LogicalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_logicalExpression)
        self._la = 0 # Token type
        try:
            self.state = 1367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1349
                self.conditionalExpression()
                self.state = 1354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ApexParser.SOQLAND:
                    self.state = 1350
                    self.match(ApexParser.SOQLAND)
                    self.state = 1351
                    self.conditionalExpression()
                    self.state = 1356
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1357
                self.conditionalExpression()
                self.state = 1362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ApexParser.SOQLOR:
                    self.state = 1358
                    self.match(ApexParser.SOQLOR)
                    self.state = 1359
                    self.conditionalExpression()
                    self.state = 1364
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1365
                self.match(ApexParser.NOT)
                self.state = 1366
                self.conditionalExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ApexParser.LPAREN, 0)

        def logicalExpression(self):
            return self.getTypedRuleContext(ApexParser.LogicalExpressionContext,0)


        def RPAREN(self):
            return self.getToken(ApexParser.RPAREN, 0)

        def fieldExpression(self):
            return self.getTypedRuleContext(ApexParser.FieldExpressionContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)




    def conditionalExpression(self):

        localctx = ApexParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_conditionalExpression)
        try:
            self.state = 1374
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ApexParser.LPAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1369
                self.match(ApexParser.LPAREN)
                self.state = 1370
                self.logicalExpression()
                self.state = 1371
                self.match(ApexParser.RPAREN)
                pass
            elif token in [ApexParser.AFTER, ApexParser.BEFORE, ApexParser.GET, ApexParser.INHERITED, ApexParser.INSTANCEOF, ApexParser.SET, ApexParser.SHARING, ApexParser.SWITCH, ApexParser.TRANSIENT, ApexParser.TRIGGER, ApexParser.WHEN, ApexParser.WITH, ApexParser.WITHOUT, ApexParser.SELECT, ApexParser.COUNT, ApexParser.FROM, ApexParser.AS, ApexParser.USING, ApexParser.SCOPE, ApexParser.WHERE, ApexParser.ORDER, ApexParser.BY, ApexParser.LIMIT, ApexParser.SOQLAND, ApexParser.SOQLOR, ApexParser.NOT, ApexParser.AVG, ApexParser.COUNT_DISTINCT, ApexParser.MIN, ApexParser.MAX, ApexParser.SUM, ApexParser.TYPEOF, ApexParser.END, ApexParser.THEN, ApexParser.LIKE, ApexParser.IN, ApexParser.INCLUDES, ApexParser.EXCLUDES, ApexParser.ASC, ApexParser.DESC, ApexParser.NULLS, ApexParser.FIRST, ApexParser.LAST, ApexParser.GROUP, ApexParser.ALL, ApexParser.ROWS, ApexParser.VIEW, ApexParser.HAVING, ApexParser.ROLLUP, ApexParser.TOLABEL, ApexParser.OFFSET, ApexParser.DATA, ApexParser.CATEGORY, ApexParser.AT, ApexParser.ABOVE, ApexParser.BELOW, ApexParser.ABOVE_OR_BELOW, ApexParser.SECURITY_ENFORCED, ApexParser.REFERENCE, ApexParser.CUBE, ApexParser.FORMAT, ApexParser.TRACKING, ApexParser.VIEWSTAT, ApexParser.CUSTOM, ApexParser.STANDARD, ApexParser.CALENDAR_MONTH, ApexParser.CALENDAR_QUARTER, ApexParser.CALENDAR_YEAR, ApexParser.DAY_IN_MONTH, ApexParser.DAY_IN_WEEK, ApexParser.DAY_IN_YEAR, ApexParser.DAY_ONLY, ApexParser.FISCAL_MONTH, ApexParser.FISCAL_QUARTER, ApexParser.FISCAL_YEAR, ApexParser.HOUR_IN_DAY, ApexParser.WEEK_IN_MONTH, ApexParser.WEEK_IN_YEAR, ApexParser.CONVERT_TIMEZONE, ApexParser.YESTERDAY, ApexParser.TODAY, ApexParser.TOMORROW, ApexParser.LAST_WEEK, ApexParser.THIS_WEEK, ApexParser.NEXT_WEEK, ApexParser.LAST_MONTH, ApexParser.THIS_MONTH, ApexParser.NEXT_MONTH, ApexParser.LAST_90_DAYS, ApexParser.NEXT_90_DAYS, ApexParser.LAST_N_DAYS_N, ApexParser.NEXT_N_DAYS_N, ApexParser.NEXT_N_WEEKS_N, ApexParser.LAST_N_WEEKS_N, ApexParser.NEXT_N_MONTHS_N, ApexParser.LAST_N_MONTHS_N, ApexParser.THIS_QUARTER, ApexParser.LAST_QUARTER, ApexParser.NEXT_QUARTER, ApexParser.NEXT_N_QUARTERS_N, ApexParser.LAST_N_QUARTERS_N, ApexParser.THIS_YEAR, ApexParser.LAST_YEAR, ApexParser.NEXT_YEAR, ApexParser.NEXT_N_YEARS_N, ApexParser.LAST_N_YEARS_N, ApexParser.THIS_FISCAL_QUARTER, ApexParser.LAST_FISCAL_QUARTER, ApexParser.NEXT_FISCAL_QUARTER, ApexParser.NEXT_N_FISCAL_QUARTERS_N, ApexParser.LAST_N_FISCAL_QUARTERS_N, ApexParser.THIS_FISCAL_YEAR, ApexParser.LAST_FISCAL_YEAR, ApexParser.NEXT_FISCAL_YEAR, ApexParser.NEXT_N_FISCAL_YEARS_N, ApexParser.LAST_N_FISCAL_YEARS_N, ApexParser.FIND, ApexParser.EMAIL, ApexParser.NAME, ApexParser.PHONE, ApexParser.SIDEBAR, ApexParser.FIELDS, ApexParser.METADATA, ApexParser.PRICEBOOKID, ApexParser.NETWORK, ApexParser.SNIPPET, ApexParser.TARGET_LENGTH, ApexParser.DIVISION, ApexParser.RETURNING, ApexParser.LISTVIEW, ApexParser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1373
                self.fieldExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldName(self):
            return self.getTypedRuleContext(ApexParser.FieldNameContext,0)


        def comparisonOperator(self):
            return self.getTypedRuleContext(ApexParser.ComparisonOperatorContext,0)


        def value(self):
            return self.getTypedRuleContext(ApexParser.ValueContext,0)


        def soqlFunction(self):
            return self.getTypedRuleContext(ApexParser.SoqlFunctionContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_fieldExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldExpression" ):
                listener.enterFieldExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldExpression" ):
                listener.exitFieldExpression(self)




    def fieldExpression(self):

        localctx = ApexParser.FieldExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_fieldExpression)
        try:
            self.state = 1384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1376
                self.fieldName()
                self.state = 1377
                self.comparisonOperator()
                self.state = 1378
                self.value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1380
                self.soqlFunction()
                self.state = 1381
                self.comparisonOperator()
                self.state = 1382
                self.value()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(ApexParser.ASSIGN, 0)

        def NOTEQUAL(self):
            return self.getToken(ApexParser.NOTEQUAL, 0)

        def LT(self):
            return self.getToken(ApexParser.LT, 0)

        def GT(self):
            return self.getToken(ApexParser.GT, 0)

        def LESSANDGREATER(self):
            return self.getToken(ApexParser.LESSANDGREATER, 0)

        def LIKE(self):
            return self.getToken(ApexParser.LIKE, 0)

        def IN(self):
            return self.getToken(ApexParser.IN, 0)

        def NOT(self):
            return self.getToken(ApexParser.NOT, 0)

        def INCLUDES(self):
            return self.getToken(ApexParser.INCLUDES, 0)

        def EXCLUDES(self):
            return self.getToken(ApexParser.EXCLUDES, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = ApexParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_comparisonOperator)
        try:
            self.state = 1401
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1386
                self.match(ApexParser.ASSIGN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1387
                self.match(ApexParser.NOTEQUAL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1388
                self.match(ApexParser.LT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1389
                self.match(ApexParser.GT)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1390
                self.match(ApexParser.LT)
                self.state = 1391
                self.match(ApexParser.ASSIGN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1392
                self.match(ApexParser.GT)
                self.state = 1393
                self.match(ApexParser.ASSIGN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1394
                self.match(ApexParser.LESSANDGREATER)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1395
                self.match(ApexParser.LIKE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1396
                self.match(ApexParser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1397
                self.match(ApexParser.NOT)
                self.state = 1398
                self.match(ApexParser.IN)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1399
                self.match(ApexParser.INCLUDES)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1400
                self.match(ApexParser.EXCLUDES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(ApexParser.NULL, 0)

        def BooleanLiteral(self):
            return self.getToken(ApexParser.BooleanLiteral, 0)

        def IntegerLiteral(self):
            return self.getToken(ApexParser.IntegerLiteral, 0)

        def LongLiteral(self):
            return self.getToken(ApexParser.LongLiteral, 0)

        def NumberLiteral(self):
            return self.getToken(ApexParser.NumberLiteral, 0)

        def StringLiteral(self):
            return self.getToken(ApexParser.StringLiteral, 0)

        def DateLiteral(self):
            return self.getToken(ApexParser.DateLiteral, 0)

        def DateTimeLiteral(self):
            return self.getToken(ApexParser.DateTimeLiteral, 0)

        def dateFormula(self):
            return self.getTypedRuleContext(ApexParser.DateFormulaContext,0)


        def currencyValue(self):
            return self.getTypedRuleContext(ApexParser.CurrencyValueContext,0)


        def LPAREN(self):
            return self.getToken(ApexParser.LPAREN, 0)

        def subQuery(self):
            return self.getTypedRuleContext(ApexParser.SubQueryContext,0)


        def RPAREN(self):
            return self.getToken(ApexParser.RPAREN, 0)

        def valueList(self):
            return self.getTypedRuleContext(ApexParser.ValueListContext,0)


        def boundExpression(self):
            return self.getTypedRuleContext(ApexParser.BoundExpressionContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue" ):
                listener.enterValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue" ):
                listener.exitValue(self)




    def value(self):

        localctx = ApexParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_value)
        try:
            self.state = 1419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1403
                self.match(ApexParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1404
                self.match(ApexParser.BooleanLiteral)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1405
                self.match(ApexParser.IntegerLiteral)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1406
                self.match(ApexParser.LongLiteral)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1407
                self.match(ApexParser.NumberLiteral)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1408
                self.match(ApexParser.StringLiteral)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1409
                self.match(ApexParser.DateLiteral)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1410
                self.match(ApexParser.DateTimeLiteral)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1411
                self.dateFormula()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1412
                self.currencyValue()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1413
                self.match(ApexParser.LPAREN)
                self.state = 1414
                self.subQuery()
                self.state = 1415
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1417
                self.valueList()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1418
                self.boundExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ApexParser.LPAREN, 0)

        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.ValueContext)
            else:
                return self.getTypedRuleContext(ApexParser.ValueContext,i)


        def RPAREN(self):
            return self.getToken(ApexParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.COMMA)
            else:
                return self.getToken(ApexParser.COMMA, i)

        def getRuleIndex(self):
            return ApexParser.RULE_valueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueList" ):
                listener.enterValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueList" ):
                listener.exitValueList(self)




    def valueList(self):

        localctx = ApexParser.ValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_valueList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1421
            self.match(ApexParser.LPAREN)
            self.state = 1422
            self.value()
            self.state = 1427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ApexParser.COMMA:
                self.state = 1423
                self.match(ApexParser.COMMA)
                self.state = 1424
                self.value()
                self.state = 1429
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1430
            self.match(ApexParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CurrencyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def soqlId(self):
            return self.getTypedRuleContext(ApexParser.SoqlIdContext,0)


        def signedInteger(self):
            return self.getTypedRuleContext(ApexParser.SignedIntegerContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_currencyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrencyValue" ):
                listener.enterCurrencyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrencyValue" ):
                listener.exitCurrencyValue(self)




    def currencyValue(self):

        localctx = ApexParser.CurrencyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_currencyValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1432
            self.soqlId()
            self.state = 1433
            self.signedInteger()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(ApexParser.WITH, 0)

        def DATA(self):
            return self.getToken(ApexParser.DATA, 0)

        def CATEGORY(self):
            return self.getToken(ApexParser.CATEGORY, 0)

        def filteringExpression(self):
            return self.getTypedRuleContext(ApexParser.FilteringExpressionContext,0)


        def SECURITY_ENFORCED(self):
            return self.getToken(ApexParser.SECURITY_ENFORCED, 0)

        def logicalExpression(self):
            return self.getTypedRuleContext(ApexParser.LogicalExpressionContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_withClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithClause" ):
                listener.enterWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithClause" ):
                listener.exitWithClause(self)




    def withClause(self):

        localctx = ApexParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_withClause)
        try:
            self.state = 1443
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1435
                self.match(ApexParser.WITH)
                self.state = 1436
                self.match(ApexParser.DATA)
                self.state = 1437
                self.match(ApexParser.CATEGORY)
                self.state = 1438
                self.filteringExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1439
                self.match(ApexParser.WITH)
                self.state = 1440
                self.match(ApexParser.SECURITY_ENFORCED)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1441
                self.match(ApexParser.WITH)
                self.state = 1442
                self.logicalExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilteringExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataCategorySelection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.DataCategorySelectionContext)
            else:
                return self.getTypedRuleContext(ApexParser.DataCategorySelectionContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.AND)
            else:
                return self.getToken(ApexParser.AND, i)

        def getRuleIndex(self):
            return ApexParser.RULE_filteringExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilteringExpression" ):
                listener.enterFilteringExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilteringExpression" ):
                listener.exitFilteringExpression(self)




    def filteringExpression(self):

        localctx = ApexParser.FilteringExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_filteringExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1445
            self.dataCategorySelection()
            self.state = 1450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ApexParser.AND:
                self.state = 1446
                self.match(ApexParser.AND)
                self.state = 1447
                self.dataCategorySelection()
                self.state = 1452
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataCategorySelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def soqlId(self):
            return self.getTypedRuleContext(ApexParser.SoqlIdContext,0)


        def filteringSelector(self):
            return self.getTypedRuleContext(ApexParser.FilteringSelectorContext,0)


        def dataCategoryName(self):
            return self.getTypedRuleContext(ApexParser.DataCategoryNameContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_dataCategorySelection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataCategorySelection" ):
                listener.enterDataCategorySelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataCategorySelection" ):
                listener.exitDataCategorySelection(self)




    def dataCategorySelection(self):

        localctx = ApexParser.DataCategorySelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_dataCategorySelection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1453
            self.soqlId()
            self.state = 1454
            self.filteringSelector()
            self.state = 1455
            self.dataCategoryName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataCategoryNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def soqlId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.SoqlIdContext)
            else:
                return self.getTypedRuleContext(ApexParser.SoqlIdContext,i)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.LPAREN)
            else:
                return self.getToken(ApexParser.LPAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.COMMA)
            else:
                return self.getToken(ApexParser.COMMA, i)

        def getRuleIndex(self):
            return ApexParser.RULE_dataCategoryName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataCategoryName" ):
                listener.enterDataCategoryName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataCategoryName" ):
                listener.exitDataCategoryName(self)




    def dataCategoryName(self):

        localctx = ApexParser.DataCategoryNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_dataCategoryName)
        self._la = 0 # Token type
        try:
            self.state = 1469
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ApexParser.AFTER, ApexParser.BEFORE, ApexParser.GET, ApexParser.INHERITED, ApexParser.INSTANCEOF, ApexParser.SET, ApexParser.SHARING, ApexParser.SWITCH, ApexParser.TRANSIENT, ApexParser.TRIGGER, ApexParser.WHEN, ApexParser.WITH, ApexParser.WITHOUT, ApexParser.SELECT, ApexParser.COUNT, ApexParser.FROM, ApexParser.AS, ApexParser.USING, ApexParser.SCOPE, ApexParser.WHERE, ApexParser.ORDER, ApexParser.BY, ApexParser.LIMIT, ApexParser.SOQLAND, ApexParser.SOQLOR, ApexParser.NOT, ApexParser.AVG, ApexParser.COUNT_DISTINCT, ApexParser.MIN, ApexParser.MAX, ApexParser.SUM, ApexParser.TYPEOF, ApexParser.END, ApexParser.THEN, ApexParser.LIKE, ApexParser.IN, ApexParser.INCLUDES, ApexParser.EXCLUDES, ApexParser.ASC, ApexParser.DESC, ApexParser.NULLS, ApexParser.FIRST, ApexParser.LAST, ApexParser.GROUP, ApexParser.ALL, ApexParser.ROWS, ApexParser.VIEW, ApexParser.HAVING, ApexParser.ROLLUP, ApexParser.TOLABEL, ApexParser.OFFSET, ApexParser.DATA, ApexParser.CATEGORY, ApexParser.AT, ApexParser.ABOVE, ApexParser.BELOW, ApexParser.ABOVE_OR_BELOW, ApexParser.SECURITY_ENFORCED, ApexParser.REFERENCE, ApexParser.CUBE, ApexParser.FORMAT, ApexParser.TRACKING, ApexParser.VIEWSTAT, ApexParser.CUSTOM, ApexParser.STANDARD, ApexParser.CALENDAR_MONTH, ApexParser.CALENDAR_QUARTER, ApexParser.CALENDAR_YEAR, ApexParser.DAY_IN_MONTH, ApexParser.DAY_IN_WEEK, ApexParser.DAY_IN_YEAR, ApexParser.DAY_ONLY, ApexParser.FISCAL_MONTH, ApexParser.FISCAL_QUARTER, ApexParser.FISCAL_YEAR, ApexParser.HOUR_IN_DAY, ApexParser.WEEK_IN_MONTH, ApexParser.WEEK_IN_YEAR, ApexParser.CONVERT_TIMEZONE, ApexParser.YESTERDAY, ApexParser.TODAY, ApexParser.TOMORROW, ApexParser.LAST_WEEK, ApexParser.THIS_WEEK, ApexParser.NEXT_WEEK, ApexParser.LAST_MONTH, ApexParser.THIS_MONTH, ApexParser.NEXT_MONTH, ApexParser.LAST_90_DAYS, ApexParser.NEXT_90_DAYS, ApexParser.LAST_N_DAYS_N, ApexParser.NEXT_N_DAYS_N, ApexParser.NEXT_N_WEEKS_N, ApexParser.LAST_N_WEEKS_N, ApexParser.NEXT_N_MONTHS_N, ApexParser.LAST_N_MONTHS_N, ApexParser.THIS_QUARTER, ApexParser.LAST_QUARTER, ApexParser.NEXT_QUARTER, ApexParser.NEXT_N_QUARTERS_N, ApexParser.LAST_N_QUARTERS_N, ApexParser.THIS_YEAR, ApexParser.LAST_YEAR, ApexParser.NEXT_YEAR, ApexParser.NEXT_N_YEARS_N, ApexParser.LAST_N_YEARS_N, ApexParser.THIS_FISCAL_QUARTER, ApexParser.LAST_FISCAL_QUARTER, ApexParser.NEXT_FISCAL_QUARTER, ApexParser.NEXT_N_FISCAL_QUARTERS_N, ApexParser.LAST_N_FISCAL_QUARTERS_N, ApexParser.THIS_FISCAL_YEAR, ApexParser.LAST_FISCAL_YEAR, ApexParser.NEXT_FISCAL_YEAR, ApexParser.NEXT_N_FISCAL_YEARS_N, ApexParser.LAST_N_FISCAL_YEARS_N, ApexParser.FIND, ApexParser.EMAIL, ApexParser.NAME, ApexParser.PHONE, ApexParser.SIDEBAR, ApexParser.FIELDS, ApexParser.METADATA, ApexParser.PRICEBOOKID, ApexParser.NETWORK, ApexParser.SNIPPET, ApexParser.TARGET_LENGTH, ApexParser.DIVISION, ApexParser.RETURNING, ApexParser.LISTVIEW, ApexParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1457
                self.soqlId()
                pass
            elif token in [ApexParser.LPAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1458
                self.match(ApexParser.LPAREN)
                self.state = 1459
                self.soqlId()
                self.state = 1464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ApexParser.COMMA:
                    self.state = 1460
                    self.match(ApexParser.COMMA)
                    self.state = 1461
                    self.soqlId()
                    self.state = 1466
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1467
                self.match(ApexParser.LPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilteringSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(ApexParser.AT, 0)

        def ABOVE(self):
            return self.getToken(ApexParser.ABOVE, 0)

        def BELOW(self):
            return self.getToken(ApexParser.BELOW, 0)

        def ABOVE_OR_BELOW(self):
            return self.getToken(ApexParser.ABOVE_OR_BELOW, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_filteringSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilteringSelector" ):
                listener.enterFilteringSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilteringSelector" ):
                listener.exitFilteringSelector(self)




    def filteringSelector(self):

        localctx = ApexParser.FilteringSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_filteringSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1471
            _la = self._input.LA(1)
            if not(((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (ApexParser.AT - 97)) | (1 << (ApexParser.ABOVE - 97)) | (1 << (ApexParser.BELOW - 97)) | (1 << (ApexParser.ABOVE_OR_BELOW - 97)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(ApexParser.GROUP, 0)

        def BY(self):
            return self.getToken(ApexParser.BY, 0)

        def selectList(self):
            return self.getTypedRuleContext(ApexParser.SelectListContext,0)


        def HAVING(self):
            return self.getToken(ApexParser.HAVING, 0)

        def logicalExpression(self):
            return self.getTypedRuleContext(ApexParser.LogicalExpressionContext,0)


        def ROLLUP(self):
            return self.getToken(ApexParser.ROLLUP, 0)

        def LPAREN(self):
            return self.getToken(ApexParser.LPAREN, 0)

        def fieldName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.FieldNameContext)
            else:
                return self.getTypedRuleContext(ApexParser.FieldNameContext,i)


        def RPAREN(self):
            return self.getToken(ApexParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.COMMA)
            else:
                return self.getToken(ApexParser.COMMA, i)

        def CUBE(self):
            return self.getToken(ApexParser.CUBE, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_groupByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByClause" ):
                listener.enterGroupByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByClause" ):
                listener.exitGroupByClause(self)




    def groupByClause(self):

        localctx = ApexParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_groupByClause)
        self._la = 0 # Token type
        try:
            self.state = 1508
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1473
                self.match(ApexParser.GROUP)
                self.state = 1474
                self.match(ApexParser.BY)
                self.state = 1475
                self.selectList()
                self.state = 1478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ApexParser.HAVING:
                    self.state = 1476
                    self.match(ApexParser.HAVING)
                    self.state = 1477
                    self.logicalExpression()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1480
                self.match(ApexParser.GROUP)
                self.state = 1481
                self.match(ApexParser.BY)
                self.state = 1482
                self.match(ApexParser.ROLLUP)
                self.state = 1483
                self.match(ApexParser.LPAREN)
                self.state = 1484
                self.fieldName()
                self.state = 1489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ApexParser.COMMA:
                    self.state = 1485
                    self.match(ApexParser.COMMA)
                    self.state = 1486
                    self.fieldName()
                    self.state = 1491
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1492
                self.match(ApexParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1494
                self.match(ApexParser.GROUP)
                self.state = 1495
                self.match(ApexParser.BY)
                self.state = 1496
                self.match(ApexParser.CUBE)
                self.state = 1497
                self.match(ApexParser.LPAREN)
                self.state = 1498
                self.fieldName()
                self.state = 1503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ApexParser.COMMA:
                    self.state = 1499
                    self.match(ApexParser.COMMA)
                    self.state = 1500
                    self.fieldName()
                    self.state = 1505
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1506
                self.match(ApexParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(ApexParser.ORDER, 0)

        def BY(self):
            return self.getToken(ApexParser.BY, 0)

        def fieldOrderList(self):
            return self.getTypedRuleContext(ApexParser.FieldOrderListContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_orderByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByClause" ):
                listener.enterOrderByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByClause" ):
                listener.exitOrderByClause(self)




    def orderByClause(self):

        localctx = ApexParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_orderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1510
            self.match(ApexParser.ORDER)
            self.state = 1511
            self.match(ApexParser.BY)
            self.state = 1512
            self.fieldOrderList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldOrderListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldOrder(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.FieldOrderContext)
            else:
                return self.getTypedRuleContext(ApexParser.FieldOrderContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.COMMA)
            else:
                return self.getToken(ApexParser.COMMA, i)

        def getRuleIndex(self):
            return ApexParser.RULE_fieldOrderList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldOrderList" ):
                listener.enterFieldOrderList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldOrderList" ):
                listener.exitFieldOrderList(self)




    def fieldOrderList(self):

        localctx = ApexParser.FieldOrderListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_fieldOrderList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1514
            self.fieldOrder()
            self.state = 1519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ApexParser.COMMA:
                self.state = 1515
                self.match(ApexParser.COMMA)
                self.state = 1516
                self.fieldOrder()
                self.state = 1521
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldOrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldName(self):
            return self.getTypedRuleContext(ApexParser.FieldNameContext,0)


        def NULLS(self):
            return self.getToken(ApexParser.NULLS, 0)

        def ASC(self):
            return self.getToken(ApexParser.ASC, 0)

        def DESC(self):
            return self.getToken(ApexParser.DESC, 0)

        def FIRST(self):
            return self.getToken(ApexParser.FIRST, 0)

        def LAST(self):
            return self.getToken(ApexParser.LAST, 0)

        def soqlFunction(self):
            return self.getTypedRuleContext(ApexParser.SoqlFunctionContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_fieldOrder

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldOrder" ):
                listener.enterFieldOrder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldOrder" ):
                listener.exitFieldOrder(self)




    def fieldOrder(self):

        localctx = ApexParser.FieldOrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_fieldOrder)
        self._la = 0 # Token type
        try:
            self.state = 1538
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1522
                self.fieldName()
                self.state = 1524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ApexParser.ASC or _la==ApexParser.DESC:
                    self.state = 1523
                    _la = self._input.LA(1)
                    if not(_la==ApexParser.ASC or _la==ApexParser.DESC):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ApexParser.NULLS:
                    self.state = 1526
                    self.match(ApexParser.NULLS)
                    self.state = 1527
                    _la = self._input.LA(1)
                    if not(_la==ApexParser.FIRST or _la==ApexParser.LAST):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1530
                self.soqlFunction()
                self.state = 1532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ApexParser.ASC or _la==ApexParser.DESC:
                    self.state = 1531
                    _la = self._input.LA(1)
                    if not(_la==ApexParser.ASC or _la==ApexParser.DESC):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ApexParser.NULLS:
                    self.state = 1534
                    self.match(ApexParser.NULLS)
                    self.state = 1535
                    _la = self._input.LA(1)
                    if not(_la==ApexParser.FIRST or _la==ApexParser.LAST):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(ApexParser.LIMIT, 0)

        def IntegerLiteral(self):
            return self.getToken(ApexParser.IntegerLiteral, 0)

        def boundExpression(self):
            return self.getTypedRuleContext(ApexParser.BoundExpressionContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_limitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClause" ):
                listener.enterLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClause" ):
                listener.exitLimitClause(self)




    def limitClause(self):

        localctx = ApexParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_limitClause)
        try:
            self.state = 1544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1540
                self.match(ApexParser.LIMIT)
                self.state = 1541
                self.match(ApexParser.IntegerLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1542
                self.match(ApexParser.LIMIT)
                self.state = 1543
                self.boundExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OFFSET(self):
            return self.getToken(ApexParser.OFFSET, 0)

        def IntegerLiteral(self):
            return self.getToken(ApexParser.IntegerLiteral, 0)

        def boundExpression(self):
            return self.getTypedRuleContext(ApexParser.BoundExpressionContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_offsetClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffsetClause" ):
                listener.enterOffsetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffsetClause" ):
                listener.exitOffsetClause(self)




    def offsetClause(self):

        localctx = ApexParser.OffsetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_offsetClause)
        try:
            self.state = 1550
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1546
                self.match(ApexParser.OFFSET)
                self.state = 1547
                self.match(ApexParser.IntegerLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1548
                self.match(ApexParser.OFFSET)
                self.state = 1549
                self.boundExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllRowsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(ApexParser.ALL, 0)

        def ROWS(self):
            return self.getToken(ApexParser.ROWS, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_allRowsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllRowsClause" ):
                listener.enterAllRowsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllRowsClause" ):
                listener.exitAllRowsClause(self)




    def allRowsClause(self):

        localctx = ApexParser.AllRowsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_allRowsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1552
            self.match(ApexParser.ALL)
            self.state = 1553
            self.match(ApexParser.ROWS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.FOR)
            else:
                return self.getToken(ApexParser.FOR, i)

        def VIEW(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.VIEW)
            else:
                return self.getToken(ApexParser.VIEW, i)

        def UPDATE(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.UPDATE)
            else:
                return self.getToken(ApexParser.UPDATE, i)

        def REFERENCE(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.REFERENCE)
            else:
                return self.getToken(ApexParser.REFERENCE, i)

        def getRuleIndex(self):
            return ApexParser.RULE_forClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForClauses" ):
                listener.enterForClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForClauses" ):
                listener.exitForClauses(self)




    def forClauses(self):

        localctx = ApexParser.ForClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_forClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ApexParser.FOR:
                self.state = 1555
                self.match(ApexParser.FOR)
                self.state = 1556
                _la = self._input.LA(1)
                if not(((((_la - 46)) & ~0x3f) == 0 and ((1 << (_la - 46)) & ((1 << (ApexParser.UPDATE - 46)) | (1 << (ApexParser.VIEW - 46)) | (1 << (ApexParser.REFERENCE - 46)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1561
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoundExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(ApexParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(ApexParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_boundExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoundExpression" ):
                listener.enterBoundExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoundExpression" ):
                listener.exitBoundExpression(self)




    def boundExpression(self):

        localctx = ApexParser.BoundExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_boundExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1562
            self.match(ApexParser.COLON)
            self.state = 1563
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateFormulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YESTERDAY(self):
            return self.getToken(ApexParser.YESTERDAY, 0)

        def TODAY(self):
            return self.getToken(ApexParser.TODAY, 0)

        def TOMORROW(self):
            return self.getToken(ApexParser.TOMORROW, 0)

        def LAST_WEEK(self):
            return self.getToken(ApexParser.LAST_WEEK, 0)

        def THIS_WEEK(self):
            return self.getToken(ApexParser.THIS_WEEK, 0)

        def NEXT_WEEK(self):
            return self.getToken(ApexParser.NEXT_WEEK, 0)

        def LAST_MONTH(self):
            return self.getToken(ApexParser.LAST_MONTH, 0)

        def THIS_MONTH(self):
            return self.getToken(ApexParser.THIS_MONTH, 0)

        def NEXT_MONTH(self):
            return self.getToken(ApexParser.NEXT_MONTH, 0)

        def LAST_90_DAYS(self):
            return self.getToken(ApexParser.LAST_90_DAYS, 0)

        def NEXT_90_DAYS(self):
            return self.getToken(ApexParser.NEXT_90_DAYS, 0)

        def LAST_N_DAYS_N(self):
            return self.getToken(ApexParser.LAST_N_DAYS_N, 0)

        def COLON(self):
            return self.getToken(ApexParser.COLON, 0)

        def signedInteger(self):
            return self.getTypedRuleContext(ApexParser.SignedIntegerContext,0)


        def NEXT_N_DAYS_N(self):
            return self.getToken(ApexParser.NEXT_N_DAYS_N, 0)

        def NEXT_N_WEEKS_N(self):
            return self.getToken(ApexParser.NEXT_N_WEEKS_N, 0)

        def LAST_N_WEEKS_N(self):
            return self.getToken(ApexParser.LAST_N_WEEKS_N, 0)

        def NEXT_N_MONTHS_N(self):
            return self.getToken(ApexParser.NEXT_N_MONTHS_N, 0)

        def LAST_N_MONTHS_N(self):
            return self.getToken(ApexParser.LAST_N_MONTHS_N, 0)

        def THIS_QUARTER(self):
            return self.getToken(ApexParser.THIS_QUARTER, 0)

        def LAST_QUARTER(self):
            return self.getToken(ApexParser.LAST_QUARTER, 0)

        def NEXT_QUARTER(self):
            return self.getToken(ApexParser.NEXT_QUARTER, 0)

        def NEXT_N_QUARTERS_N(self):
            return self.getToken(ApexParser.NEXT_N_QUARTERS_N, 0)

        def LAST_N_QUARTERS_N(self):
            return self.getToken(ApexParser.LAST_N_QUARTERS_N, 0)

        def THIS_YEAR(self):
            return self.getToken(ApexParser.THIS_YEAR, 0)

        def LAST_YEAR(self):
            return self.getToken(ApexParser.LAST_YEAR, 0)

        def NEXT_YEAR(self):
            return self.getToken(ApexParser.NEXT_YEAR, 0)

        def NEXT_N_YEARS_N(self):
            return self.getToken(ApexParser.NEXT_N_YEARS_N, 0)

        def LAST_N_YEARS_N(self):
            return self.getToken(ApexParser.LAST_N_YEARS_N, 0)

        def THIS_FISCAL_QUARTER(self):
            return self.getToken(ApexParser.THIS_FISCAL_QUARTER, 0)

        def LAST_FISCAL_QUARTER(self):
            return self.getToken(ApexParser.LAST_FISCAL_QUARTER, 0)

        def NEXT_FISCAL_QUARTER(self):
            return self.getToken(ApexParser.NEXT_FISCAL_QUARTER, 0)

        def NEXT_N_FISCAL_QUARTERS_N(self):
            return self.getToken(ApexParser.NEXT_N_FISCAL_QUARTERS_N, 0)

        def LAST_N_FISCAL_QUARTERS_N(self):
            return self.getToken(ApexParser.LAST_N_FISCAL_QUARTERS_N, 0)

        def THIS_FISCAL_YEAR(self):
            return self.getToken(ApexParser.THIS_FISCAL_YEAR, 0)

        def LAST_FISCAL_YEAR(self):
            return self.getToken(ApexParser.LAST_FISCAL_YEAR, 0)

        def NEXT_FISCAL_YEAR(self):
            return self.getToken(ApexParser.NEXT_FISCAL_YEAR, 0)

        def NEXT_N_FISCAL_YEARS_N(self):
            return self.getToken(ApexParser.NEXT_N_FISCAL_YEARS_N, 0)

        def LAST_N_FISCAL_YEARS_N(self):
            return self.getToken(ApexParser.LAST_N_FISCAL_YEARS_N, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_dateFormula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateFormula" ):
                listener.enterDateFormula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateFormula" ):
                listener.exitDateFormula(self)




    def dateFormula(self):

        localctx = ApexParser.DateFormulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_dateFormula)
        try:
            self.state = 1630
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ApexParser.YESTERDAY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1565
                self.match(ApexParser.YESTERDAY)
                pass
            elif token in [ApexParser.TODAY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1566
                self.match(ApexParser.TODAY)
                pass
            elif token in [ApexParser.TOMORROW]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1567
                self.match(ApexParser.TOMORROW)
                pass
            elif token in [ApexParser.LAST_WEEK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1568
                self.match(ApexParser.LAST_WEEK)
                pass
            elif token in [ApexParser.THIS_WEEK]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1569
                self.match(ApexParser.THIS_WEEK)
                pass
            elif token in [ApexParser.NEXT_WEEK]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1570
                self.match(ApexParser.NEXT_WEEK)
                pass
            elif token in [ApexParser.LAST_MONTH]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1571
                self.match(ApexParser.LAST_MONTH)
                pass
            elif token in [ApexParser.THIS_MONTH]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1572
                self.match(ApexParser.THIS_MONTH)
                pass
            elif token in [ApexParser.NEXT_MONTH]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1573
                self.match(ApexParser.NEXT_MONTH)
                pass
            elif token in [ApexParser.LAST_90_DAYS]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1574
                self.match(ApexParser.LAST_90_DAYS)
                pass
            elif token in [ApexParser.NEXT_90_DAYS]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1575
                self.match(ApexParser.NEXT_90_DAYS)
                pass
            elif token in [ApexParser.LAST_N_DAYS_N]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1576
                self.match(ApexParser.LAST_N_DAYS_N)
                self.state = 1577
                self.match(ApexParser.COLON)
                self.state = 1578
                self.signedInteger()
                pass
            elif token in [ApexParser.NEXT_N_DAYS_N]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1579
                self.match(ApexParser.NEXT_N_DAYS_N)
                self.state = 1580
                self.match(ApexParser.COLON)
                self.state = 1581
                self.signedInteger()
                pass
            elif token in [ApexParser.NEXT_N_WEEKS_N]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1582
                self.match(ApexParser.NEXT_N_WEEKS_N)
                self.state = 1583
                self.match(ApexParser.COLON)
                self.state = 1584
                self.signedInteger()
                pass
            elif token in [ApexParser.LAST_N_WEEKS_N]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1585
                self.match(ApexParser.LAST_N_WEEKS_N)
                self.state = 1586
                self.match(ApexParser.COLON)
                self.state = 1587
                self.signedInteger()
                pass
            elif token in [ApexParser.NEXT_N_MONTHS_N]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1588
                self.match(ApexParser.NEXT_N_MONTHS_N)
                self.state = 1589
                self.match(ApexParser.COLON)
                self.state = 1590
                self.signedInteger()
                pass
            elif token in [ApexParser.LAST_N_MONTHS_N]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1591
                self.match(ApexParser.LAST_N_MONTHS_N)
                self.state = 1592
                self.match(ApexParser.COLON)
                self.state = 1593
                self.signedInteger()
                pass
            elif token in [ApexParser.THIS_QUARTER]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1594
                self.match(ApexParser.THIS_QUARTER)
                pass
            elif token in [ApexParser.LAST_QUARTER]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1595
                self.match(ApexParser.LAST_QUARTER)
                pass
            elif token in [ApexParser.NEXT_QUARTER]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1596
                self.match(ApexParser.NEXT_QUARTER)
                pass
            elif token in [ApexParser.NEXT_N_QUARTERS_N]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1597
                self.match(ApexParser.NEXT_N_QUARTERS_N)
                self.state = 1598
                self.match(ApexParser.COLON)
                self.state = 1599
                self.signedInteger()
                pass
            elif token in [ApexParser.LAST_N_QUARTERS_N]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1600
                self.match(ApexParser.LAST_N_QUARTERS_N)
                self.state = 1601
                self.match(ApexParser.COLON)
                self.state = 1602
                self.signedInteger()
                pass
            elif token in [ApexParser.THIS_YEAR]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1603
                self.match(ApexParser.THIS_YEAR)
                pass
            elif token in [ApexParser.LAST_YEAR]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1604
                self.match(ApexParser.LAST_YEAR)
                pass
            elif token in [ApexParser.NEXT_YEAR]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1605
                self.match(ApexParser.NEXT_YEAR)
                pass
            elif token in [ApexParser.NEXT_N_YEARS_N]:
                self.enterOuterAlt(localctx, 26)
                self.state = 1606
                self.match(ApexParser.NEXT_N_YEARS_N)
                self.state = 1607
                self.match(ApexParser.COLON)
                self.state = 1608
                self.signedInteger()
                pass
            elif token in [ApexParser.LAST_N_YEARS_N]:
                self.enterOuterAlt(localctx, 27)
                self.state = 1609
                self.match(ApexParser.LAST_N_YEARS_N)
                self.state = 1610
                self.match(ApexParser.COLON)
                self.state = 1611
                self.signedInteger()
                pass
            elif token in [ApexParser.THIS_FISCAL_QUARTER]:
                self.enterOuterAlt(localctx, 28)
                self.state = 1612
                self.match(ApexParser.THIS_FISCAL_QUARTER)
                pass
            elif token in [ApexParser.LAST_FISCAL_QUARTER]:
                self.enterOuterAlt(localctx, 29)
                self.state = 1613
                self.match(ApexParser.LAST_FISCAL_QUARTER)
                pass
            elif token in [ApexParser.NEXT_FISCAL_QUARTER]:
                self.enterOuterAlt(localctx, 30)
                self.state = 1614
                self.match(ApexParser.NEXT_FISCAL_QUARTER)
                pass
            elif token in [ApexParser.NEXT_N_FISCAL_QUARTERS_N]:
                self.enterOuterAlt(localctx, 31)
                self.state = 1615
                self.match(ApexParser.NEXT_N_FISCAL_QUARTERS_N)
                self.state = 1616
                self.match(ApexParser.COLON)
                self.state = 1617
                self.signedInteger()
                pass
            elif token in [ApexParser.LAST_N_FISCAL_QUARTERS_N]:
                self.enterOuterAlt(localctx, 32)
                self.state = 1618
                self.match(ApexParser.LAST_N_FISCAL_QUARTERS_N)
                self.state = 1619
                self.match(ApexParser.COLON)
                self.state = 1620
                self.signedInteger()
                pass
            elif token in [ApexParser.THIS_FISCAL_YEAR]:
                self.enterOuterAlt(localctx, 33)
                self.state = 1621
                self.match(ApexParser.THIS_FISCAL_YEAR)
                pass
            elif token in [ApexParser.LAST_FISCAL_YEAR]:
                self.enterOuterAlt(localctx, 34)
                self.state = 1622
                self.match(ApexParser.LAST_FISCAL_YEAR)
                pass
            elif token in [ApexParser.NEXT_FISCAL_YEAR]:
                self.enterOuterAlt(localctx, 35)
                self.state = 1623
                self.match(ApexParser.NEXT_FISCAL_YEAR)
                pass
            elif token in [ApexParser.NEXT_N_FISCAL_YEARS_N]:
                self.enterOuterAlt(localctx, 36)
                self.state = 1624
                self.match(ApexParser.NEXT_N_FISCAL_YEARS_N)
                self.state = 1625
                self.match(ApexParser.COLON)
                self.state = 1626
                self.signedInteger()
                pass
            elif token in [ApexParser.LAST_N_FISCAL_YEARS_N]:
                self.enterOuterAlt(localctx, 37)
                self.state = 1627
                self.match(ApexParser.LAST_N_FISCAL_YEARS_N)
                self.state = 1628
                self.match(ApexParser.COLON)
                self.state = 1629
                self.signedInteger()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignedIntegerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntegerLiteral(self):
            return self.getToken(ApexParser.IntegerLiteral, 0)

        def ADD(self):
            return self.getToken(ApexParser.ADD, 0)

        def SUB(self):
            return self.getToken(ApexParser.SUB, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_signedInteger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignedInteger" ):
                listener.enterSignedInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignedInteger" ):
                listener.exitSignedInteger(self)




    def signedInteger(self):

        localctx = ApexParser.SignedIntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_signedInteger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.ADD or _la==ApexParser.SUB:
                self.state = 1632
                _la = self._input.LA(1)
                if not(_la==ApexParser.ADD or _la==ApexParser.SUB):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1635
            self.match(ApexParser.IntegerLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SoqlIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id(self):
            return self.getTypedRuleContext(ApexParser.IdContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_soqlId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSoqlId" ):
                listener.enterSoqlId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSoqlId" ):
                listener.exitSoqlId(self)




    def soqlId(self):

        localctx = ApexParser.SoqlIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_soqlId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1637
            self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SoslLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FindLiteral(self):
            return self.getToken(ApexParser.FindLiteral, 0)

        def soslClauses(self):
            return self.getTypedRuleContext(ApexParser.SoslClausesContext,0)


        def RBRACK(self):
            return self.getToken(ApexParser.RBRACK, 0)

        def LBRACK(self):
            return self.getToken(ApexParser.LBRACK, 0)

        def FIND(self):
            return self.getToken(ApexParser.FIND, 0)

        def boundExpression(self):
            return self.getTypedRuleContext(ApexParser.BoundExpressionContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_soslLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSoslLiteral" ):
                listener.enterSoslLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSoslLiteral" ):
                listener.exitSoslLiteral(self)




    def soslLiteral(self):

        localctx = ApexParser.SoslLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_soslLiteral)
        try:
            self.state = 1649
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ApexParser.FindLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1639
                self.match(ApexParser.FindLiteral)
                self.state = 1640
                self.soslClauses()
                self.state = 1641
                self.match(ApexParser.RBRACK)
                pass
            elif token in [ApexParser.LBRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1643
                self.match(ApexParser.LBRACK)
                self.state = 1644
                self.match(ApexParser.FIND)
                self.state = 1645
                self.boundExpression()
                self.state = 1646
                self.soslClauses()
                self.state = 1647
                self.match(ApexParser.RBRACK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SoslClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.IN)
            else:
                return self.getToken(ApexParser.IN, i)

        def searchGroup(self):
            return self.getTypedRuleContext(ApexParser.SearchGroupContext,0)


        def RETURNING(self):
            return self.getToken(ApexParser.RETURNING, 0)

        def fieldSpecList(self):
            return self.getTypedRuleContext(ApexParser.FieldSpecListContext,0)


        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.WITH)
            else:
                return self.getToken(ApexParser.WITH, i)

        def DIVISION(self):
            return self.getToken(ApexParser.DIVISION, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.ASSIGN)
            else:
                return self.getToken(ApexParser.ASSIGN, i)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.StringLiteral)
            else:
                return self.getToken(ApexParser.StringLiteral, i)

        def DATA(self):
            return self.getToken(ApexParser.DATA, 0)

        def CATEGORY(self):
            return self.getToken(ApexParser.CATEGORY, 0)

        def filteringExpression(self):
            return self.getTypedRuleContext(ApexParser.FilteringExpressionContext,0)


        def SNIPPET(self):
            return self.getToken(ApexParser.SNIPPET, 0)

        def NETWORK(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.NETWORK)
            else:
                return self.getToken(ApexParser.NETWORK, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.LPAREN)
            else:
                return self.getToken(ApexParser.LPAREN, i)

        def networkList(self):
            return self.getTypedRuleContext(ApexParser.NetworkListContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.RPAREN)
            else:
                return self.getToken(ApexParser.RPAREN, i)

        def PRICEBOOKID(self):
            return self.getToken(ApexParser.PRICEBOOKID, 0)

        def METADATA(self):
            return self.getToken(ApexParser.METADATA, 0)

        def limitClause(self):
            return self.getTypedRuleContext(ApexParser.LimitClauseContext,0)


        def UPDATE(self):
            return self.getToken(ApexParser.UPDATE, 0)

        def updateList(self):
            return self.getTypedRuleContext(ApexParser.UpdateListContext,0)


        def TARGET_LENGTH(self):
            return self.getToken(ApexParser.TARGET_LENGTH, 0)

        def IntegerLiteral(self):
            return self.getToken(ApexParser.IntegerLiteral, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_soslClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSoslClauses" ):
                listener.enterSoslClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSoslClauses" ):
                listener.exitSoslClauses(self)




    def soslClauses(self):

        localctx = ApexParser.SoslClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_soslClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.IN:
                self.state = 1651
                self.match(ApexParser.IN)
                self.state = 1652
                self.searchGroup()


            self.state = 1657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.RETURNING:
                self.state = 1655
                self.match(ApexParser.RETURNING)
                self.state = 1656
                self.fieldSpecList()


            self.state = 1663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 1659
                self.match(ApexParser.WITH)
                self.state = 1660
                self.match(ApexParser.DIVISION)
                self.state = 1661
                self.match(ApexParser.ASSIGN)
                self.state = 1662
                self.match(ApexParser.StringLiteral)


            self.state = 1669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.state = 1665
                self.match(ApexParser.WITH)
                self.state = 1666
                self.match(ApexParser.DATA)
                self.state = 1667
                self.match(ApexParser.CATEGORY)
                self.state = 1668
                self.filteringExpression()


            self.state = 1680
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.state = 1671
                self.match(ApexParser.WITH)
                self.state = 1672
                self.match(ApexParser.SNIPPET)
                self.state = 1678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ApexParser.LPAREN:
                    self.state = 1673
                    self.match(ApexParser.LPAREN)
                    self.state = 1674
                    self.match(ApexParser.TARGET_LENGTH)
                    self.state = 1675
                    self.match(ApexParser.ASSIGN)
                    self.state = 1676
                    self.match(ApexParser.IntegerLiteral)
                    self.state = 1677
                    self.match(ApexParser.RPAREN)




            self.state = 1689
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 1682
                self.match(ApexParser.WITH)
                self.state = 1683
                self.match(ApexParser.NETWORK)
                self.state = 1684
                self.match(ApexParser.IN)
                self.state = 1685
                self.match(ApexParser.LPAREN)
                self.state = 1686
                self.networkList()
                self.state = 1687
                self.match(ApexParser.RPAREN)


            self.state = 1695
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1691
                self.match(ApexParser.WITH)
                self.state = 1692
                self.match(ApexParser.NETWORK)
                self.state = 1693
                self.match(ApexParser.ASSIGN)
                self.state = 1694
                self.match(ApexParser.StringLiteral)


            self.state = 1701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 1697
                self.match(ApexParser.WITH)
                self.state = 1698
                self.match(ApexParser.PRICEBOOKID)
                self.state = 1699
                self.match(ApexParser.ASSIGN)
                self.state = 1700
                self.match(ApexParser.StringLiteral)


            self.state = 1707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.WITH:
                self.state = 1703
                self.match(ApexParser.WITH)
                self.state = 1704
                self.match(ApexParser.METADATA)
                self.state = 1705
                self.match(ApexParser.ASSIGN)
                self.state = 1706
                self.match(ApexParser.StringLiteral)


            self.state = 1710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.LIMIT:
                self.state = 1709
                self.limitClause()


            self.state = 1714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.UPDATE:
                self.state = 1712
                self.match(ApexParser.UPDATE)
                self.state = 1713
                self.updateList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SearchGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIELDS(self):
            return self.getToken(ApexParser.FIELDS, 0)

        def ALL(self):
            return self.getToken(ApexParser.ALL, 0)

        def EMAIL(self):
            return self.getToken(ApexParser.EMAIL, 0)

        def NAME(self):
            return self.getToken(ApexParser.NAME, 0)

        def PHONE(self):
            return self.getToken(ApexParser.PHONE, 0)

        def SIDEBAR(self):
            return self.getToken(ApexParser.SIDEBAR, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_searchGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchGroup" ):
                listener.enterSearchGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchGroup" ):
                listener.exitSearchGroup(self)




    def searchGroup(self):

        localctx = ApexParser.SearchGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_searchGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1716
            _la = self._input.LA(1)
            if not(_la==ApexParser.ALL or ((((_la - 163)) & ~0x3f) == 0 and ((1 << (_la - 163)) & ((1 << (ApexParser.EMAIL - 163)) | (1 << (ApexParser.NAME - 163)) | (1 << (ApexParser.PHONE - 163)) | (1 << (ApexParser.SIDEBAR - 163)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1717
            self.match(ApexParser.FIELDS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldSpecListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldSpec(self):
            return self.getTypedRuleContext(ApexParser.FieldSpecContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.COMMA)
            else:
                return self.getToken(ApexParser.COMMA, i)

        def fieldSpecList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.FieldSpecListContext)
            else:
                return self.getTypedRuleContext(ApexParser.FieldSpecListContext,i)


        def getRuleIndex(self):
            return ApexParser.RULE_fieldSpecList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldSpecList" ):
                listener.enterFieldSpecList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldSpecList" ):
                listener.exitFieldSpecList(self)




    def fieldSpecList(self):

        localctx = ApexParser.FieldSpecListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_fieldSpecList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1719
            self.fieldSpec()
            self.state = 1724
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,164,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1720
                    self.match(ApexParser.COMMA)
                    self.state = 1721
                    self.fieldSpecList() 
                self.state = 1726
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def soslId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.SoslIdContext)
            else:
                return self.getTypedRuleContext(ApexParser.SoslIdContext,i)


        def LPAREN(self):
            return self.getToken(ApexParser.LPAREN, 0)

        def fieldList(self):
            return self.getTypedRuleContext(ApexParser.FieldListContext,0)


        def RPAREN(self):
            return self.getToken(ApexParser.RPAREN, 0)

        def WHERE(self):
            return self.getToken(ApexParser.WHERE, 0)

        def logicalExpression(self):
            return self.getTypedRuleContext(ApexParser.LogicalExpressionContext,0)


        def USING(self):
            return self.getToken(ApexParser.USING, 0)

        def LISTVIEW(self):
            return self.getToken(ApexParser.LISTVIEW, 0)

        def ASSIGN(self):
            return self.getToken(ApexParser.ASSIGN, 0)

        def ORDER(self):
            return self.getToken(ApexParser.ORDER, 0)

        def BY(self):
            return self.getToken(ApexParser.BY, 0)

        def fieldOrderList(self):
            return self.getTypedRuleContext(ApexParser.FieldOrderListContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(ApexParser.LimitClauseContext,0)


        def offsetClause(self):
            return self.getTypedRuleContext(ApexParser.OffsetClauseContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_fieldSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldSpec" ):
                listener.enterFieldSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldSpec" ):
                listener.exitFieldSpec(self)




    def fieldSpec(self):

        localctx = ApexParser.FieldSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_fieldSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1727
            self.soslId()
            self.state = 1753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.LPAREN:
                self.state = 1728
                self.match(ApexParser.LPAREN)
                self.state = 1729
                self.fieldList()
                self.state = 1732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ApexParser.WHERE:
                    self.state = 1730
                    self.match(ApexParser.WHERE)
                    self.state = 1731
                    self.logicalExpression()


                self.state = 1738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ApexParser.USING:
                    self.state = 1734
                    self.match(ApexParser.USING)
                    self.state = 1735
                    self.match(ApexParser.LISTVIEW)
                    self.state = 1736
                    self.match(ApexParser.ASSIGN)
                    self.state = 1737
                    self.soslId()


                self.state = 1743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ApexParser.ORDER:
                    self.state = 1740
                    self.match(ApexParser.ORDER)
                    self.state = 1741
                    self.match(ApexParser.BY)
                    self.state = 1742
                    self.fieldOrderList()


                self.state = 1746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ApexParser.LIMIT:
                    self.state = 1745
                    self.limitClause()


                self.state = 1749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ApexParser.OFFSET:
                    self.state = 1748
                    self.offsetClause()


                self.state = 1751
                self.match(ApexParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def soslId(self):
            return self.getTypedRuleContext(ApexParser.SoslIdContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.COMMA)
            else:
                return self.getToken(ApexParser.COMMA, i)

        def fieldList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.FieldListContext)
            else:
                return self.getTypedRuleContext(ApexParser.FieldListContext,i)


        def getRuleIndex(self):
            return ApexParser.RULE_fieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldList" ):
                listener.enterFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldList" ):
                listener.exitFieldList(self)




    def fieldList(self):

        localctx = ApexParser.FieldListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_fieldList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1755
            self.soslId()
            self.state = 1760
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1756
                    self.match(ApexParser.COMMA)
                    self.state = 1757
                    self.fieldList() 
                self.state = 1762
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def updateType(self):
            return self.getTypedRuleContext(ApexParser.UpdateTypeContext,0)


        def COMMA(self):
            return self.getToken(ApexParser.COMMA, 0)

        def updateList(self):
            return self.getTypedRuleContext(ApexParser.UpdateListContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_updateList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateList" ):
                listener.enterUpdateList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateList" ):
                listener.exitUpdateList(self)




    def updateList(self):

        localctx = ApexParser.UpdateListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_updateList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1763
            self.updateType()
            self.state = 1766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.COMMA:
                self.state = 1764
                self.match(ApexParser.COMMA)
                self.state = 1765
                self.updateList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRACKING(self):
            return self.getToken(ApexParser.TRACKING, 0)

        def VIEWSTAT(self):
            return self.getToken(ApexParser.VIEWSTAT, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_updateType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateType" ):
                listener.enterUpdateType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateType" ):
                listener.exitUpdateType(self)




    def updateType(self):

        localctx = ApexParser.UpdateTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_updateType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1768
            _la = self._input.LA(1)
            if not(_la==ApexParser.TRACKING or _la==ApexParser.VIEWSTAT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NetworkListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(ApexParser.StringLiteral, 0)

        def COMMA(self):
            return self.getToken(ApexParser.COMMA, 0)

        def networkList(self):
            return self.getTypedRuleContext(ApexParser.NetworkListContext,0)


        def getRuleIndex(self):
            return ApexParser.RULE_networkList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNetworkList" ):
                listener.enterNetworkList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNetworkList" ):
                listener.exitNetworkList(self)




    def networkList(self):

        localctx = ApexParser.NetworkListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_networkList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1770
            self.match(ApexParser.StringLiteral)
            self.state = 1773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ApexParser.COMMA:
                self.state = 1771
                self.match(ApexParser.COMMA)
                self.state = 1772
                self.networkList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SoslIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id(self):
            return self.getTypedRuleContext(ApexParser.IdContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(ApexParser.DOT)
            else:
                return self.getToken(ApexParser.DOT, i)

        def soslId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ApexParser.SoslIdContext)
            else:
                return self.getTypedRuleContext(ApexParser.SoslIdContext,i)


        def getRuleIndex(self):
            return ApexParser.RULE_soslId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSoslId" ):
                listener.enterSoslId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSoslId" ):
                listener.exitSoslId(self)




    def soslId(self):

        localctx = ApexParser.SoslIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_soslId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1775
            self.id()
            self.state = 1780
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,174,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1776
                    self.match(ApexParser.DOT)
                    self.state = 1777
                    self.soslId() 
                self.state = 1782
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,174,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ApexParser.Identifier, 0)

        def AFTER(self):
            return self.getToken(ApexParser.AFTER, 0)

        def BEFORE(self):
            return self.getToken(ApexParser.BEFORE, 0)

        def GET(self):
            return self.getToken(ApexParser.GET, 0)

        def INHERITED(self):
            return self.getToken(ApexParser.INHERITED, 0)

        def INSTANCEOF(self):
            return self.getToken(ApexParser.INSTANCEOF, 0)

        def SET(self):
            return self.getToken(ApexParser.SET, 0)

        def SHARING(self):
            return self.getToken(ApexParser.SHARING, 0)

        def SWITCH(self):
            return self.getToken(ApexParser.SWITCH, 0)

        def TRANSIENT(self):
            return self.getToken(ApexParser.TRANSIENT, 0)

        def TRIGGER(self):
            return self.getToken(ApexParser.TRIGGER, 0)

        def WHEN(self):
            return self.getToken(ApexParser.WHEN, 0)

        def WITH(self):
            return self.getToken(ApexParser.WITH, 0)

        def WITHOUT(self):
            return self.getToken(ApexParser.WITHOUT, 0)

        def SELECT(self):
            return self.getToken(ApexParser.SELECT, 0)

        def COUNT(self):
            return self.getToken(ApexParser.COUNT, 0)

        def FROM(self):
            return self.getToken(ApexParser.FROM, 0)

        def AS(self):
            return self.getToken(ApexParser.AS, 0)

        def USING(self):
            return self.getToken(ApexParser.USING, 0)

        def SCOPE(self):
            return self.getToken(ApexParser.SCOPE, 0)

        def WHERE(self):
            return self.getToken(ApexParser.WHERE, 0)

        def ORDER(self):
            return self.getToken(ApexParser.ORDER, 0)

        def BY(self):
            return self.getToken(ApexParser.BY, 0)

        def LIMIT(self):
            return self.getToken(ApexParser.LIMIT, 0)

        def SOQLAND(self):
            return self.getToken(ApexParser.SOQLAND, 0)

        def SOQLOR(self):
            return self.getToken(ApexParser.SOQLOR, 0)

        def NOT(self):
            return self.getToken(ApexParser.NOT, 0)

        def AVG(self):
            return self.getToken(ApexParser.AVG, 0)

        def COUNT_DISTINCT(self):
            return self.getToken(ApexParser.COUNT_DISTINCT, 0)

        def MIN(self):
            return self.getToken(ApexParser.MIN, 0)

        def MAX(self):
            return self.getToken(ApexParser.MAX, 0)

        def SUM(self):
            return self.getToken(ApexParser.SUM, 0)

        def TYPEOF(self):
            return self.getToken(ApexParser.TYPEOF, 0)

        def END(self):
            return self.getToken(ApexParser.END, 0)

        def THEN(self):
            return self.getToken(ApexParser.THEN, 0)

        def LIKE(self):
            return self.getToken(ApexParser.LIKE, 0)

        def IN(self):
            return self.getToken(ApexParser.IN, 0)

        def INCLUDES(self):
            return self.getToken(ApexParser.INCLUDES, 0)

        def EXCLUDES(self):
            return self.getToken(ApexParser.EXCLUDES, 0)

        def ASC(self):
            return self.getToken(ApexParser.ASC, 0)

        def DESC(self):
            return self.getToken(ApexParser.DESC, 0)

        def NULLS(self):
            return self.getToken(ApexParser.NULLS, 0)

        def FIRST(self):
            return self.getToken(ApexParser.FIRST, 0)

        def LAST(self):
            return self.getToken(ApexParser.LAST, 0)

        def GROUP(self):
            return self.getToken(ApexParser.GROUP, 0)

        def ALL(self):
            return self.getToken(ApexParser.ALL, 0)

        def ROWS(self):
            return self.getToken(ApexParser.ROWS, 0)

        def VIEW(self):
            return self.getToken(ApexParser.VIEW, 0)

        def HAVING(self):
            return self.getToken(ApexParser.HAVING, 0)

        def ROLLUP(self):
            return self.getToken(ApexParser.ROLLUP, 0)

        def TOLABEL(self):
            return self.getToken(ApexParser.TOLABEL, 0)

        def OFFSET(self):
            return self.getToken(ApexParser.OFFSET, 0)

        def DATA(self):
            return self.getToken(ApexParser.DATA, 0)

        def CATEGORY(self):
            return self.getToken(ApexParser.CATEGORY, 0)

        def AT(self):
            return self.getToken(ApexParser.AT, 0)

        def ABOVE(self):
            return self.getToken(ApexParser.ABOVE, 0)

        def BELOW(self):
            return self.getToken(ApexParser.BELOW, 0)

        def ABOVE_OR_BELOW(self):
            return self.getToken(ApexParser.ABOVE_OR_BELOW, 0)

        def SECURITY_ENFORCED(self):
            return self.getToken(ApexParser.SECURITY_ENFORCED, 0)

        def REFERENCE(self):
            return self.getToken(ApexParser.REFERENCE, 0)

        def CUBE(self):
            return self.getToken(ApexParser.CUBE, 0)

        def FORMAT(self):
            return self.getToken(ApexParser.FORMAT, 0)

        def TRACKING(self):
            return self.getToken(ApexParser.TRACKING, 0)

        def VIEWSTAT(self):
            return self.getToken(ApexParser.VIEWSTAT, 0)

        def STANDARD(self):
            return self.getToken(ApexParser.STANDARD, 0)

        def CUSTOM(self):
            return self.getToken(ApexParser.CUSTOM, 0)

        def CALENDAR_MONTH(self):
            return self.getToken(ApexParser.CALENDAR_MONTH, 0)

        def CALENDAR_QUARTER(self):
            return self.getToken(ApexParser.CALENDAR_QUARTER, 0)

        def CALENDAR_YEAR(self):
            return self.getToken(ApexParser.CALENDAR_YEAR, 0)

        def DAY_IN_MONTH(self):
            return self.getToken(ApexParser.DAY_IN_MONTH, 0)

        def DAY_IN_WEEK(self):
            return self.getToken(ApexParser.DAY_IN_WEEK, 0)

        def DAY_IN_YEAR(self):
            return self.getToken(ApexParser.DAY_IN_YEAR, 0)

        def DAY_ONLY(self):
            return self.getToken(ApexParser.DAY_ONLY, 0)

        def FISCAL_MONTH(self):
            return self.getToken(ApexParser.FISCAL_MONTH, 0)

        def FISCAL_QUARTER(self):
            return self.getToken(ApexParser.FISCAL_QUARTER, 0)

        def FISCAL_YEAR(self):
            return self.getToken(ApexParser.FISCAL_YEAR, 0)

        def HOUR_IN_DAY(self):
            return self.getToken(ApexParser.HOUR_IN_DAY, 0)

        def WEEK_IN_MONTH(self):
            return self.getToken(ApexParser.WEEK_IN_MONTH, 0)

        def WEEK_IN_YEAR(self):
            return self.getToken(ApexParser.WEEK_IN_YEAR, 0)

        def CONVERT_TIMEZONE(self):
            return self.getToken(ApexParser.CONVERT_TIMEZONE, 0)

        def YESTERDAY(self):
            return self.getToken(ApexParser.YESTERDAY, 0)

        def TODAY(self):
            return self.getToken(ApexParser.TODAY, 0)

        def TOMORROW(self):
            return self.getToken(ApexParser.TOMORROW, 0)

        def LAST_WEEK(self):
            return self.getToken(ApexParser.LAST_WEEK, 0)

        def THIS_WEEK(self):
            return self.getToken(ApexParser.THIS_WEEK, 0)

        def NEXT_WEEK(self):
            return self.getToken(ApexParser.NEXT_WEEK, 0)

        def LAST_MONTH(self):
            return self.getToken(ApexParser.LAST_MONTH, 0)

        def THIS_MONTH(self):
            return self.getToken(ApexParser.THIS_MONTH, 0)

        def NEXT_MONTH(self):
            return self.getToken(ApexParser.NEXT_MONTH, 0)

        def LAST_90_DAYS(self):
            return self.getToken(ApexParser.LAST_90_DAYS, 0)

        def NEXT_90_DAYS(self):
            return self.getToken(ApexParser.NEXT_90_DAYS, 0)

        def LAST_N_DAYS_N(self):
            return self.getToken(ApexParser.LAST_N_DAYS_N, 0)

        def NEXT_N_DAYS_N(self):
            return self.getToken(ApexParser.NEXT_N_DAYS_N, 0)

        def NEXT_N_WEEKS_N(self):
            return self.getToken(ApexParser.NEXT_N_WEEKS_N, 0)

        def LAST_N_WEEKS_N(self):
            return self.getToken(ApexParser.LAST_N_WEEKS_N, 0)

        def NEXT_N_MONTHS_N(self):
            return self.getToken(ApexParser.NEXT_N_MONTHS_N, 0)

        def LAST_N_MONTHS_N(self):
            return self.getToken(ApexParser.LAST_N_MONTHS_N, 0)

        def THIS_QUARTER(self):
            return self.getToken(ApexParser.THIS_QUARTER, 0)

        def LAST_QUARTER(self):
            return self.getToken(ApexParser.LAST_QUARTER, 0)

        def NEXT_QUARTER(self):
            return self.getToken(ApexParser.NEXT_QUARTER, 0)

        def NEXT_N_QUARTERS_N(self):
            return self.getToken(ApexParser.NEXT_N_QUARTERS_N, 0)

        def LAST_N_QUARTERS_N(self):
            return self.getToken(ApexParser.LAST_N_QUARTERS_N, 0)

        def THIS_YEAR(self):
            return self.getToken(ApexParser.THIS_YEAR, 0)

        def LAST_YEAR(self):
            return self.getToken(ApexParser.LAST_YEAR, 0)

        def NEXT_YEAR(self):
            return self.getToken(ApexParser.NEXT_YEAR, 0)

        def NEXT_N_YEARS_N(self):
            return self.getToken(ApexParser.NEXT_N_YEARS_N, 0)

        def LAST_N_YEARS_N(self):
            return self.getToken(ApexParser.LAST_N_YEARS_N, 0)

        def THIS_FISCAL_QUARTER(self):
            return self.getToken(ApexParser.THIS_FISCAL_QUARTER, 0)

        def LAST_FISCAL_QUARTER(self):
            return self.getToken(ApexParser.LAST_FISCAL_QUARTER, 0)

        def NEXT_FISCAL_QUARTER(self):
            return self.getToken(ApexParser.NEXT_FISCAL_QUARTER, 0)

        def NEXT_N_FISCAL_QUARTERS_N(self):
            return self.getToken(ApexParser.NEXT_N_FISCAL_QUARTERS_N, 0)

        def LAST_N_FISCAL_QUARTERS_N(self):
            return self.getToken(ApexParser.LAST_N_FISCAL_QUARTERS_N, 0)

        def THIS_FISCAL_YEAR(self):
            return self.getToken(ApexParser.THIS_FISCAL_YEAR, 0)

        def LAST_FISCAL_YEAR(self):
            return self.getToken(ApexParser.LAST_FISCAL_YEAR, 0)

        def NEXT_FISCAL_YEAR(self):
            return self.getToken(ApexParser.NEXT_FISCAL_YEAR, 0)

        def NEXT_N_FISCAL_YEARS_N(self):
            return self.getToken(ApexParser.NEXT_N_FISCAL_YEARS_N, 0)

        def LAST_N_FISCAL_YEARS_N(self):
            return self.getToken(ApexParser.LAST_N_FISCAL_YEARS_N, 0)

        def FIND(self):
            return self.getToken(ApexParser.FIND, 0)

        def EMAIL(self):
            return self.getToken(ApexParser.EMAIL, 0)

        def NAME(self):
            return self.getToken(ApexParser.NAME, 0)

        def PHONE(self):
            return self.getToken(ApexParser.PHONE, 0)

        def SIDEBAR(self):
            return self.getToken(ApexParser.SIDEBAR, 0)

        def FIELDS(self):
            return self.getToken(ApexParser.FIELDS, 0)

        def METADATA(self):
            return self.getToken(ApexParser.METADATA, 0)

        def PRICEBOOKID(self):
            return self.getToken(ApexParser.PRICEBOOKID, 0)

        def NETWORK(self):
            return self.getToken(ApexParser.NETWORK, 0)

        def SNIPPET(self):
            return self.getToken(ApexParser.SNIPPET, 0)

        def TARGET_LENGTH(self):
            return self.getToken(ApexParser.TARGET_LENGTH, 0)

        def DIVISION(self):
            return self.getToken(ApexParser.DIVISION, 0)

        def RETURNING(self):
            return self.getToken(ApexParser.RETURNING, 0)

        def LISTVIEW(self):
            return self.getToken(ApexParser.LISTVIEW, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId" ):
                listener.enterId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId" ):
                listener.exitId(self)




    def id(self):

        localctx = ApexParser.IdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1783
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.GET) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.SET) | (1 << ApexParser.SHARING) | (1 << ApexParser.SWITCH) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.TRIGGER) | (1 << ApexParser.WHEN) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT) | (1 << ApexParser.SELECT) | (1 << ApexParser.COUNT) | (1 << ApexParser.FROM) | (1 << ApexParser.AS) | (1 << ApexParser.USING) | (1 << ApexParser.SCOPE) | (1 << ApexParser.WHERE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ApexParser.ORDER - 64)) | (1 << (ApexParser.BY - 64)) | (1 << (ApexParser.LIMIT - 64)) | (1 << (ApexParser.SOQLAND - 64)) | (1 << (ApexParser.SOQLOR - 64)) | (1 << (ApexParser.NOT - 64)) | (1 << (ApexParser.AVG - 64)) | (1 << (ApexParser.COUNT_DISTINCT - 64)) | (1 << (ApexParser.MIN - 64)) | (1 << (ApexParser.MAX - 64)) | (1 << (ApexParser.SUM - 64)) | (1 << (ApexParser.TYPEOF - 64)) | (1 << (ApexParser.END - 64)) | (1 << (ApexParser.THEN - 64)) | (1 << (ApexParser.LIKE - 64)) | (1 << (ApexParser.IN - 64)) | (1 << (ApexParser.INCLUDES - 64)) | (1 << (ApexParser.EXCLUDES - 64)) | (1 << (ApexParser.ASC - 64)) | (1 << (ApexParser.DESC - 64)) | (1 << (ApexParser.NULLS - 64)) | (1 << (ApexParser.FIRST - 64)) | (1 << (ApexParser.LAST - 64)) | (1 << (ApexParser.GROUP - 64)) | (1 << (ApexParser.ALL - 64)) | (1 << (ApexParser.ROWS - 64)) | (1 << (ApexParser.VIEW - 64)) | (1 << (ApexParser.HAVING - 64)) | (1 << (ApexParser.ROLLUP - 64)) | (1 << (ApexParser.TOLABEL - 64)) | (1 << (ApexParser.OFFSET - 64)) | (1 << (ApexParser.DATA - 64)) | (1 << (ApexParser.CATEGORY - 64)) | (1 << (ApexParser.AT - 64)) | (1 << (ApexParser.ABOVE - 64)) | (1 << (ApexParser.BELOW - 64)) | (1 << (ApexParser.ABOVE_OR_BELOW - 64)) | (1 << (ApexParser.SECURITY_ENFORCED - 64)) | (1 << (ApexParser.REFERENCE - 64)) | (1 << (ApexParser.CUBE - 64)) | (1 << (ApexParser.FORMAT - 64)) | (1 << (ApexParser.TRACKING - 64)) | (1 << (ApexParser.VIEWSTAT - 64)) | (1 << (ApexParser.CUSTOM - 64)) | (1 << (ApexParser.STANDARD - 64)) | (1 << (ApexParser.CALENDAR_MONTH - 64)) | (1 << (ApexParser.CALENDAR_QUARTER - 64)) | (1 << (ApexParser.CALENDAR_YEAR - 64)) | (1 << (ApexParser.DAY_IN_MONTH - 64)) | (1 << (ApexParser.DAY_IN_WEEK - 64)) | (1 << (ApexParser.DAY_IN_YEAR - 64)) | (1 << (ApexParser.DAY_ONLY - 64)) | (1 << (ApexParser.FISCAL_MONTH - 64)) | (1 << (ApexParser.FISCAL_QUARTER - 64)) | (1 << (ApexParser.FISCAL_YEAR - 64)) | (1 << (ApexParser.HOUR_IN_DAY - 64)) | (1 << (ApexParser.WEEK_IN_MONTH - 64)) | (1 << (ApexParser.WEEK_IN_YEAR - 64)) | (1 << (ApexParser.CONVERT_TIMEZONE - 64)) | (1 << (ApexParser.YESTERDAY - 64)) | (1 << (ApexParser.TODAY - 64)) | (1 << (ApexParser.TOMORROW - 64)) | (1 << (ApexParser.LAST_WEEK - 64)) | (1 << (ApexParser.THIS_WEEK - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ApexParser.NEXT_WEEK - 128)) | (1 << (ApexParser.LAST_MONTH - 128)) | (1 << (ApexParser.THIS_MONTH - 128)) | (1 << (ApexParser.NEXT_MONTH - 128)) | (1 << (ApexParser.LAST_90_DAYS - 128)) | (1 << (ApexParser.NEXT_90_DAYS - 128)) | (1 << (ApexParser.LAST_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 128)) | (1 << (ApexParser.LAST_N_WEEKS_N - 128)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 128)) | (1 << (ApexParser.LAST_N_MONTHS_N - 128)) | (1 << (ApexParser.THIS_QUARTER - 128)) | (1 << (ApexParser.LAST_QUARTER - 128)) | (1 << (ApexParser.NEXT_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_YEAR - 128)) | (1 << (ApexParser.LAST_YEAR - 128)) | (1 << (ApexParser.NEXT_YEAR - 128)) | (1 << (ApexParser.NEXT_N_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_YEARS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_QUARTER - 128)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 128)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.FIND - 128)) | (1 << (ApexParser.EMAIL - 128)) | (1 << (ApexParser.NAME - 128)) | (1 << (ApexParser.PHONE - 128)) | (1 << (ApexParser.SIDEBAR - 128)) | (1 << (ApexParser.FIELDS - 128)) | (1 << (ApexParser.METADATA - 128)) | (1 << (ApexParser.PRICEBOOKID - 128)) | (1 << (ApexParser.NETWORK - 128)) | (1 << (ApexParser.SNIPPET - 128)) | (1 << (ApexParser.TARGET_LENGTH - 128)) | (1 << (ApexParser.DIVISION - 128)) | (1 << (ApexParser.RETURNING - 128)) | (1 << (ApexParser.LISTVIEW - 128)))) != 0) or _la==ApexParser.Identifier):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnyIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ApexParser.Identifier, 0)

        def ABSTRACT(self):
            return self.getToken(ApexParser.ABSTRACT, 0)

        def AFTER(self):
            return self.getToken(ApexParser.AFTER, 0)

        def BEFORE(self):
            return self.getToken(ApexParser.BEFORE, 0)

        def BREAK(self):
            return self.getToken(ApexParser.BREAK, 0)

        def CATCH(self):
            return self.getToken(ApexParser.CATCH, 0)

        def CLASS(self):
            return self.getToken(ApexParser.CLASS, 0)

        def CONTINUE(self):
            return self.getToken(ApexParser.CONTINUE, 0)

        def DELETE(self):
            return self.getToken(ApexParser.DELETE, 0)

        def DO(self):
            return self.getToken(ApexParser.DO, 0)

        def ELSE(self):
            return self.getToken(ApexParser.ELSE, 0)

        def ENUM(self):
            return self.getToken(ApexParser.ENUM, 0)

        def EXTENDS(self):
            return self.getToken(ApexParser.EXTENDS, 0)

        def FINAL(self):
            return self.getToken(ApexParser.FINAL, 0)

        def FINALLY(self):
            return self.getToken(ApexParser.FINALLY, 0)

        def FOR(self):
            return self.getToken(ApexParser.FOR, 0)

        def GET(self):
            return self.getToken(ApexParser.GET, 0)

        def GLOBAL(self):
            return self.getToken(ApexParser.GLOBAL, 0)

        def IF(self):
            return self.getToken(ApexParser.IF, 0)

        def IMPLEMENTS(self):
            return self.getToken(ApexParser.IMPLEMENTS, 0)

        def INHERITED(self):
            return self.getToken(ApexParser.INHERITED, 0)

        def INSERT(self):
            return self.getToken(ApexParser.INSERT, 0)

        def INSTANCEOF(self):
            return self.getToken(ApexParser.INSTANCEOF, 0)

        def INTERFACE(self):
            return self.getToken(ApexParser.INTERFACE, 0)

        def LIST(self):
            return self.getToken(ApexParser.LIST, 0)

        def MAP(self):
            return self.getToken(ApexParser.MAP, 0)

        def MERGE(self):
            return self.getToken(ApexParser.MERGE, 0)

        def NEW(self):
            return self.getToken(ApexParser.NEW, 0)

        def NULL(self):
            return self.getToken(ApexParser.NULL, 0)

        def ON(self):
            return self.getToken(ApexParser.ON, 0)

        def OVERRIDE(self):
            return self.getToken(ApexParser.OVERRIDE, 0)

        def PRIVATE(self):
            return self.getToken(ApexParser.PRIVATE, 0)

        def PROTECTED(self):
            return self.getToken(ApexParser.PROTECTED, 0)

        def PUBLIC(self):
            return self.getToken(ApexParser.PUBLIC, 0)

        def RETURN(self):
            return self.getToken(ApexParser.RETURN, 0)

        def SET(self):
            return self.getToken(ApexParser.SET, 0)

        def SHARING(self):
            return self.getToken(ApexParser.SHARING, 0)

        def STATIC(self):
            return self.getToken(ApexParser.STATIC, 0)

        def SUPER(self):
            return self.getToken(ApexParser.SUPER, 0)

        def SWITCH(self):
            return self.getToken(ApexParser.SWITCH, 0)

        def TESTMETHOD(self):
            return self.getToken(ApexParser.TESTMETHOD, 0)

        def THIS(self):
            return self.getToken(ApexParser.THIS, 0)

        def THROW(self):
            return self.getToken(ApexParser.THROW, 0)

        def TRANSIENT(self):
            return self.getToken(ApexParser.TRANSIENT, 0)

        def TRIGGER(self):
            return self.getToken(ApexParser.TRIGGER, 0)

        def TRY(self):
            return self.getToken(ApexParser.TRY, 0)

        def UNDELETE(self):
            return self.getToken(ApexParser.UNDELETE, 0)

        def UPDATE(self):
            return self.getToken(ApexParser.UPDATE, 0)

        def UPSERT(self):
            return self.getToken(ApexParser.UPSERT, 0)

        def VIRTUAL(self):
            return self.getToken(ApexParser.VIRTUAL, 0)

        def WEBSERVICE(self):
            return self.getToken(ApexParser.WEBSERVICE, 0)

        def WHEN(self):
            return self.getToken(ApexParser.WHEN, 0)

        def WHILE(self):
            return self.getToken(ApexParser.WHILE, 0)

        def WITH(self):
            return self.getToken(ApexParser.WITH, 0)

        def WITHOUT(self):
            return self.getToken(ApexParser.WITHOUT, 0)

        def SELECT(self):
            return self.getToken(ApexParser.SELECT, 0)

        def COUNT(self):
            return self.getToken(ApexParser.COUNT, 0)

        def FROM(self):
            return self.getToken(ApexParser.FROM, 0)

        def AS(self):
            return self.getToken(ApexParser.AS, 0)

        def USING(self):
            return self.getToken(ApexParser.USING, 0)

        def SCOPE(self):
            return self.getToken(ApexParser.SCOPE, 0)

        def WHERE(self):
            return self.getToken(ApexParser.WHERE, 0)

        def ORDER(self):
            return self.getToken(ApexParser.ORDER, 0)

        def BY(self):
            return self.getToken(ApexParser.BY, 0)

        def LIMIT(self):
            return self.getToken(ApexParser.LIMIT, 0)

        def SOQLAND(self):
            return self.getToken(ApexParser.SOQLAND, 0)

        def SOQLOR(self):
            return self.getToken(ApexParser.SOQLOR, 0)

        def NOT(self):
            return self.getToken(ApexParser.NOT, 0)

        def AVG(self):
            return self.getToken(ApexParser.AVG, 0)

        def COUNT_DISTINCT(self):
            return self.getToken(ApexParser.COUNT_DISTINCT, 0)

        def MIN(self):
            return self.getToken(ApexParser.MIN, 0)

        def MAX(self):
            return self.getToken(ApexParser.MAX, 0)

        def SUM(self):
            return self.getToken(ApexParser.SUM, 0)

        def TYPEOF(self):
            return self.getToken(ApexParser.TYPEOF, 0)

        def END(self):
            return self.getToken(ApexParser.END, 0)

        def THEN(self):
            return self.getToken(ApexParser.THEN, 0)

        def LIKE(self):
            return self.getToken(ApexParser.LIKE, 0)

        def IN(self):
            return self.getToken(ApexParser.IN, 0)

        def INCLUDES(self):
            return self.getToken(ApexParser.INCLUDES, 0)

        def EXCLUDES(self):
            return self.getToken(ApexParser.EXCLUDES, 0)

        def ASC(self):
            return self.getToken(ApexParser.ASC, 0)

        def DESC(self):
            return self.getToken(ApexParser.DESC, 0)

        def NULLS(self):
            return self.getToken(ApexParser.NULLS, 0)

        def FIRST(self):
            return self.getToken(ApexParser.FIRST, 0)

        def LAST(self):
            return self.getToken(ApexParser.LAST, 0)

        def GROUP(self):
            return self.getToken(ApexParser.GROUP, 0)

        def ALL(self):
            return self.getToken(ApexParser.ALL, 0)

        def ROWS(self):
            return self.getToken(ApexParser.ROWS, 0)

        def VIEW(self):
            return self.getToken(ApexParser.VIEW, 0)

        def HAVING(self):
            return self.getToken(ApexParser.HAVING, 0)

        def ROLLUP(self):
            return self.getToken(ApexParser.ROLLUP, 0)

        def TOLABEL(self):
            return self.getToken(ApexParser.TOLABEL, 0)

        def OFFSET(self):
            return self.getToken(ApexParser.OFFSET, 0)

        def DATA(self):
            return self.getToken(ApexParser.DATA, 0)

        def CATEGORY(self):
            return self.getToken(ApexParser.CATEGORY, 0)

        def AT(self):
            return self.getToken(ApexParser.AT, 0)

        def ABOVE(self):
            return self.getToken(ApexParser.ABOVE, 0)

        def BELOW(self):
            return self.getToken(ApexParser.BELOW, 0)

        def ABOVE_OR_BELOW(self):
            return self.getToken(ApexParser.ABOVE_OR_BELOW, 0)

        def SECURITY_ENFORCED(self):
            return self.getToken(ApexParser.SECURITY_ENFORCED, 0)

        def REFERENCE(self):
            return self.getToken(ApexParser.REFERENCE, 0)

        def CUBE(self):
            return self.getToken(ApexParser.CUBE, 0)

        def FORMAT(self):
            return self.getToken(ApexParser.FORMAT, 0)

        def TRACKING(self):
            return self.getToken(ApexParser.TRACKING, 0)

        def VIEWSTAT(self):
            return self.getToken(ApexParser.VIEWSTAT, 0)

        def STANDARD(self):
            return self.getToken(ApexParser.STANDARD, 0)

        def CUSTOM(self):
            return self.getToken(ApexParser.CUSTOM, 0)

        def CALENDAR_MONTH(self):
            return self.getToken(ApexParser.CALENDAR_MONTH, 0)

        def CALENDAR_QUARTER(self):
            return self.getToken(ApexParser.CALENDAR_QUARTER, 0)

        def CALENDAR_YEAR(self):
            return self.getToken(ApexParser.CALENDAR_YEAR, 0)

        def DAY_IN_MONTH(self):
            return self.getToken(ApexParser.DAY_IN_MONTH, 0)

        def DAY_IN_WEEK(self):
            return self.getToken(ApexParser.DAY_IN_WEEK, 0)

        def DAY_IN_YEAR(self):
            return self.getToken(ApexParser.DAY_IN_YEAR, 0)

        def DAY_ONLY(self):
            return self.getToken(ApexParser.DAY_ONLY, 0)

        def FISCAL_MONTH(self):
            return self.getToken(ApexParser.FISCAL_MONTH, 0)

        def FISCAL_QUARTER(self):
            return self.getToken(ApexParser.FISCAL_QUARTER, 0)

        def FISCAL_YEAR(self):
            return self.getToken(ApexParser.FISCAL_YEAR, 0)

        def HOUR_IN_DAY(self):
            return self.getToken(ApexParser.HOUR_IN_DAY, 0)

        def WEEK_IN_MONTH(self):
            return self.getToken(ApexParser.WEEK_IN_MONTH, 0)

        def WEEK_IN_YEAR(self):
            return self.getToken(ApexParser.WEEK_IN_YEAR, 0)

        def CONVERT_TIMEZONE(self):
            return self.getToken(ApexParser.CONVERT_TIMEZONE, 0)

        def YESTERDAY(self):
            return self.getToken(ApexParser.YESTERDAY, 0)

        def TODAY(self):
            return self.getToken(ApexParser.TODAY, 0)

        def TOMORROW(self):
            return self.getToken(ApexParser.TOMORROW, 0)

        def LAST_WEEK(self):
            return self.getToken(ApexParser.LAST_WEEK, 0)

        def THIS_WEEK(self):
            return self.getToken(ApexParser.THIS_WEEK, 0)

        def NEXT_WEEK(self):
            return self.getToken(ApexParser.NEXT_WEEK, 0)

        def LAST_MONTH(self):
            return self.getToken(ApexParser.LAST_MONTH, 0)

        def THIS_MONTH(self):
            return self.getToken(ApexParser.THIS_MONTH, 0)

        def NEXT_MONTH(self):
            return self.getToken(ApexParser.NEXT_MONTH, 0)

        def LAST_90_DAYS(self):
            return self.getToken(ApexParser.LAST_90_DAYS, 0)

        def NEXT_90_DAYS(self):
            return self.getToken(ApexParser.NEXT_90_DAYS, 0)

        def LAST_N_DAYS_N(self):
            return self.getToken(ApexParser.LAST_N_DAYS_N, 0)

        def NEXT_N_DAYS_N(self):
            return self.getToken(ApexParser.NEXT_N_DAYS_N, 0)

        def NEXT_N_WEEKS_N(self):
            return self.getToken(ApexParser.NEXT_N_WEEKS_N, 0)

        def LAST_N_WEEKS_N(self):
            return self.getToken(ApexParser.LAST_N_WEEKS_N, 0)

        def NEXT_N_MONTHS_N(self):
            return self.getToken(ApexParser.NEXT_N_MONTHS_N, 0)

        def LAST_N_MONTHS_N(self):
            return self.getToken(ApexParser.LAST_N_MONTHS_N, 0)

        def THIS_QUARTER(self):
            return self.getToken(ApexParser.THIS_QUARTER, 0)

        def LAST_QUARTER(self):
            return self.getToken(ApexParser.LAST_QUARTER, 0)

        def NEXT_QUARTER(self):
            return self.getToken(ApexParser.NEXT_QUARTER, 0)

        def NEXT_N_QUARTERS_N(self):
            return self.getToken(ApexParser.NEXT_N_QUARTERS_N, 0)

        def LAST_N_QUARTERS_N(self):
            return self.getToken(ApexParser.LAST_N_QUARTERS_N, 0)

        def THIS_YEAR(self):
            return self.getToken(ApexParser.THIS_YEAR, 0)

        def LAST_YEAR(self):
            return self.getToken(ApexParser.LAST_YEAR, 0)

        def NEXT_YEAR(self):
            return self.getToken(ApexParser.NEXT_YEAR, 0)

        def NEXT_N_YEARS_N(self):
            return self.getToken(ApexParser.NEXT_N_YEARS_N, 0)

        def LAST_N_YEARS_N(self):
            return self.getToken(ApexParser.LAST_N_YEARS_N, 0)

        def THIS_FISCAL_QUARTER(self):
            return self.getToken(ApexParser.THIS_FISCAL_QUARTER, 0)

        def LAST_FISCAL_QUARTER(self):
            return self.getToken(ApexParser.LAST_FISCAL_QUARTER, 0)

        def NEXT_FISCAL_QUARTER(self):
            return self.getToken(ApexParser.NEXT_FISCAL_QUARTER, 0)

        def NEXT_N_FISCAL_QUARTERS_N(self):
            return self.getToken(ApexParser.NEXT_N_FISCAL_QUARTERS_N, 0)

        def LAST_N_FISCAL_QUARTERS_N(self):
            return self.getToken(ApexParser.LAST_N_FISCAL_QUARTERS_N, 0)

        def THIS_FISCAL_YEAR(self):
            return self.getToken(ApexParser.THIS_FISCAL_YEAR, 0)

        def LAST_FISCAL_YEAR(self):
            return self.getToken(ApexParser.LAST_FISCAL_YEAR, 0)

        def NEXT_FISCAL_YEAR(self):
            return self.getToken(ApexParser.NEXT_FISCAL_YEAR, 0)

        def NEXT_N_FISCAL_YEARS_N(self):
            return self.getToken(ApexParser.NEXT_N_FISCAL_YEARS_N, 0)

        def LAST_N_FISCAL_YEARS_N(self):
            return self.getToken(ApexParser.LAST_N_FISCAL_YEARS_N, 0)

        def FIND(self):
            return self.getToken(ApexParser.FIND, 0)

        def EMAIL(self):
            return self.getToken(ApexParser.EMAIL, 0)

        def NAME(self):
            return self.getToken(ApexParser.NAME, 0)

        def PHONE(self):
            return self.getToken(ApexParser.PHONE, 0)

        def SIDEBAR(self):
            return self.getToken(ApexParser.SIDEBAR, 0)

        def FIELDS(self):
            return self.getToken(ApexParser.FIELDS, 0)

        def METADATA(self):
            return self.getToken(ApexParser.METADATA, 0)

        def PRICEBOOKID(self):
            return self.getToken(ApexParser.PRICEBOOKID, 0)

        def NETWORK(self):
            return self.getToken(ApexParser.NETWORK, 0)

        def SNIPPET(self):
            return self.getToken(ApexParser.SNIPPET, 0)

        def TARGET_LENGTH(self):
            return self.getToken(ApexParser.TARGET_LENGTH, 0)

        def DIVISION(self):
            return self.getToken(ApexParser.DIVISION, 0)

        def RETURNING(self):
            return self.getToken(ApexParser.RETURNING, 0)

        def LISTVIEW(self):
            return self.getToken(ApexParser.LISTVIEW, 0)

        def getRuleIndex(self):
            return ApexParser.RULE_anyId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyId" ):
                listener.enterAnyId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyId" ):
                listener.exitAnyId(self)




    def anyId(self):

        localctx = ApexParser.AnyIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_anyId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1785
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ApexParser.ABSTRACT) | (1 << ApexParser.AFTER) | (1 << ApexParser.BEFORE) | (1 << ApexParser.BREAK) | (1 << ApexParser.CATCH) | (1 << ApexParser.CLASS) | (1 << ApexParser.CONTINUE) | (1 << ApexParser.DELETE) | (1 << ApexParser.DO) | (1 << ApexParser.ELSE) | (1 << ApexParser.ENUM) | (1 << ApexParser.EXTENDS) | (1 << ApexParser.FINAL) | (1 << ApexParser.FINALLY) | (1 << ApexParser.FOR) | (1 << ApexParser.GET) | (1 << ApexParser.GLOBAL) | (1 << ApexParser.IF) | (1 << ApexParser.IMPLEMENTS) | (1 << ApexParser.INHERITED) | (1 << ApexParser.INSERT) | (1 << ApexParser.INSTANCEOF) | (1 << ApexParser.INTERFACE) | (1 << ApexParser.MERGE) | (1 << ApexParser.NEW) | (1 << ApexParser.NULL) | (1 << ApexParser.ON) | (1 << ApexParser.OVERRIDE) | (1 << ApexParser.PRIVATE) | (1 << ApexParser.PROTECTED) | (1 << ApexParser.PUBLIC) | (1 << ApexParser.RETURN) | (1 << ApexParser.SET) | (1 << ApexParser.SHARING) | (1 << ApexParser.STATIC) | (1 << ApexParser.SUPER) | (1 << ApexParser.SWITCH) | (1 << ApexParser.TESTMETHOD) | (1 << ApexParser.THIS) | (1 << ApexParser.THROW) | (1 << ApexParser.TRANSIENT) | (1 << ApexParser.TRIGGER) | (1 << ApexParser.TRY) | (1 << ApexParser.UNDELETE) | (1 << ApexParser.UPDATE) | (1 << ApexParser.UPSERT) | (1 << ApexParser.VIRTUAL) | (1 << ApexParser.WEBSERVICE) | (1 << ApexParser.WHEN) | (1 << ApexParser.WHILE) | (1 << ApexParser.WITH) | (1 << ApexParser.WITHOUT) | (1 << ApexParser.LIST) | (1 << ApexParser.MAP) | (1 << ApexParser.SELECT) | (1 << ApexParser.COUNT) | (1 << ApexParser.FROM) | (1 << ApexParser.AS) | (1 << ApexParser.USING) | (1 << ApexParser.SCOPE) | (1 << ApexParser.WHERE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ApexParser.ORDER - 64)) | (1 << (ApexParser.BY - 64)) | (1 << (ApexParser.LIMIT - 64)) | (1 << (ApexParser.SOQLAND - 64)) | (1 << (ApexParser.SOQLOR - 64)) | (1 << (ApexParser.NOT - 64)) | (1 << (ApexParser.AVG - 64)) | (1 << (ApexParser.COUNT_DISTINCT - 64)) | (1 << (ApexParser.MIN - 64)) | (1 << (ApexParser.MAX - 64)) | (1 << (ApexParser.SUM - 64)) | (1 << (ApexParser.TYPEOF - 64)) | (1 << (ApexParser.END - 64)) | (1 << (ApexParser.THEN - 64)) | (1 << (ApexParser.LIKE - 64)) | (1 << (ApexParser.IN - 64)) | (1 << (ApexParser.INCLUDES - 64)) | (1 << (ApexParser.EXCLUDES - 64)) | (1 << (ApexParser.ASC - 64)) | (1 << (ApexParser.DESC - 64)) | (1 << (ApexParser.NULLS - 64)) | (1 << (ApexParser.FIRST - 64)) | (1 << (ApexParser.LAST - 64)) | (1 << (ApexParser.GROUP - 64)) | (1 << (ApexParser.ALL - 64)) | (1 << (ApexParser.ROWS - 64)) | (1 << (ApexParser.VIEW - 64)) | (1 << (ApexParser.HAVING - 64)) | (1 << (ApexParser.ROLLUP - 64)) | (1 << (ApexParser.TOLABEL - 64)) | (1 << (ApexParser.OFFSET - 64)) | (1 << (ApexParser.DATA - 64)) | (1 << (ApexParser.CATEGORY - 64)) | (1 << (ApexParser.AT - 64)) | (1 << (ApexParser.ABOVE - 64)) | (1 << (ApexParser.BELOW - 64)) | (1 << (ApexParser.ABOVE_OR_BELOW - 64)) | (1 << (ApexParser.SECURITY_ENFORCED - 64)) | (1 << (ApexParser.REFERENCE - 64)) | (1 << (ApexParser.CUBE - 64)) | (1 << (ApexParser.FORMAT - 64)) | (1 << (ApexParser.TRACKING - 64)) | (1 << (ApexParser.VIEWSTAT - 64)) | (1 << (ApexParser.CUSTOM - 64)) | (1 << (ApexParser.STANDARD - 64)) | (1 << (ApexParser.CALENDAR_MONTH - 64)) | (1 << (ApexParser.CALENDAR_QUARTER - 64)) | (1 << (ApexParser.CALENDAR_YEAR - 64)) | (1 << (ApexParser.DAY_IN_MONTH - 64)) | (1 << (ApexParser.DAY_IN_WEEK - 64)) | (1 << (ApexParser.DAY_IN_YEAR - 64)) | (1 << (ApexParser.DAY_ONLY - 64)) | (1 << (ApexParser.FISCAL_MONTH - 64)) | (1 << (ApexParser.FISCAL_QUARTER - 64)) | (1 << (ApexParser.FISCAL_YEAR - 64)) | (1 << (ApexParser.HOUR_IN_DAY - 64)) | (1 << (ApexParser.WEEK_IN_MONTH - 64)) | (1 << (ApexParser.WEEK_IN_YEAR - 64)) | (1 << (ApexParser.CONVERT_TIMEZONE - 64)) | (1 << (ApexParser.YESTERDAY - 64)) | (1 << (ApexParser.TODAY - 64)) | (1 << (ApexParser.TOMORROW - 64)) | (1 << (ApexParser.LAST_WEEK - 64)) | (1 << (ApexParser.THIS_WEEK - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ApexParser.NEXT_WEEK - 128)) | (1 << (ApexParser.LAST_MONTH - 128)) | (1 << (ApexParser.THIS_MONTH - 128)) | (1 << (ApexParser.NEXT_MONTH - 128)) | (1 << (ApexParser.LAST_90_DAYS - 128)) | (1 << (ApexParser.NEXT_90_DAYS - 128)) | (1 << (ApexParser.LAST_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_DAYS_N - 128)) | (1 << (ApexParser.NEXT_N_WEEKS_N - 128)) | (1 << (ApexParser.LAST_N_WEEKS_N - 128)) | (1 << (ApexParser.NEXT_N_MONTHS_N - 128)) | (1 << (ApexParser.LAST_N_MONTHS_N - 128)) | (1 << (ApexParser.THIS_QUARTER - 128)) | (1 << (ApexParser.LAST_QUARTER - 128)) | (1 << (ApexParser.NEXT_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_YEAR - 128)) | (1 << (ApexParser.LAST_YEAR - 128)) | (1 << (ApexParser.NEXT_YEAR - 128)) | (1 << (ApexParser.NEXT_N_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_YEARS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_QUARTER - 128)) | (1 << (ApexParser.LAST_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_FISCAL_QUARTER - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_QUARTERS_N - 128)) | (1 << (ApexParser.THIS_FISCAL_YEAR - 128)) | (1 << (ApexParser.LAST_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_FISCAL_YEAR - 128)) | (1 << (ApexParser.NEXT_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.LAST_N_FISCAL_YEARS_N - 128)) | (1 << (ApexParser.FIND - 128)) | (1 << (ApexParser.EMAIL - 128)) | (1 << (ApexParser.NAME - 128)) | (1 << (ApexParser.PHONE - 128)) | (1 << (ApexParser.SIDEBAR - 128)) | (1 << (ApexParser.FIELDS - 128)) | (1 << (ApexParser.METADATA - 128)) | (1 << (ApexParser.PRICEBOOKID - 128)) | (1 << (ApexParser.NETWORK - 128)) | (1 << (ApexParser.SNIPPET - 128)) | (1 << (ApexParser.TARGET_LENGTH - 128)) | (1 << (ApexParser.DIVISION - 128)) | (1 << (ApexParser.RETURNING - 128)) | (1 << (ApexParser.LISTVIEW - 128)))) != 0) or _la==ApexParser.Identifier):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[72] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 9)
         




